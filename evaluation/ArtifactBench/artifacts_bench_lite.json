{"index": 57, "question": "You are a coding expert. Please use your professional knowledge to generate accurate and professional responses. Make sure the code you generate is executable for demonstration purposes. Please help me implement this SVG image using code. Money is in the form of dollar bills or cash currency.", "checklist": [{"id": 0, "title": "Is the SVG dollar bill/cash currency visually accurate and detailed?", "description": "Check if the SVG implementation includes essential visual elements of currency: denomination markings, security features (watermarks, security threads), serial numbers, and proper proportions. Score 0 if basic currency shape is missing, 5 if only basic outline is present, and 10 if detailed elements including textures and security features are implemented.", "maxScore": 10}, {"id": 1, "title": "Are proper SVG techniques used for currency representation?", "description": "Evaluate whether appropriate SVG elements (<path>, <rect>, <pattern>, <linearGradient>, etc.) are used efficiently for different parts of the currency. Check if complex details use proper techniques like gradient meshes or patterns instead of excessive path elements. Deduct 3 points for inefficient element choices, 4 points for missing essential SVG techniques like gradients for realistic shading, and 5 points if implementation relies solely on basic shapes without proper detail work.", "maxScore": 10}, {"id": 2, "title": "Is the currency sizing and scaling properly implemented?", "description": "Verify if the SVG uses proper viewBox attributes, preserveAspectRatio settings, and responsive design principles to ensure the currency renders correctly at different sizes. Check if proper width/height attributes or percentages are used. Deduct 5 points if the currency doesn't scale proportionally, and 5 points if viewBox is improperly configured causing display issues at different resolutions.", "maxScore": 10}, {"id": 3, "title": "Does the implementation include interactive or animated elements?", "description": "Assess whether the code includes appropriate animations or interactions that enhance the currency visualization (e.g., hover effects showing security features, flip animations to see both sides, counting/stacking animations). Give 0 points for no interactivity, 5 points for basic hover/click effects, and 10 points for smooth, meaningful animations that demonstrate currency properties.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common situations (such as browser compatibility issues, rendering in different contexts, fallback mechanisms). Code with strong robustness should work across modern browsers and include fallback options. Give 10 points for comprehensive fallbacks and browser support, 5 points for average robustness with minor issues, and 0 points if major rendering problems occur across platforms.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the visualization (e.g., 1. Realistic paper texture/folding effects 2. Security features that appear under hover 3. Multiple currency types or denominations). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar visual elements 2. Excessive detail that harms performance 3. Fancy effects that don't contribute to realistic currency representation. Deduct 3 points for each redundancy found, and directly deduct 10 points if the core visualization is compromised by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating drawing functions/reusable components), code organization, and maintainability. Deduct 5 points if global variables are overused; deduct 5 points if the code duplication rate is too high; deduct 5 points if there's no structure or commenting for complex drawing functions. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the visual representation meet professional design standards?", "description": "Evaluate whether the currency design follows authentic design principles: 1) Accurate color matching to real currency 2) Proper proportions and detail placement 3) Professional typography matching official currency fonts. Deduct 3 points for inaccurate colors, 5 points for unrealistic proportions, and 5 points for poor typography. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the implementation optimized for performance?", "description": "Judge whether the SVG implementation is optimized: 1) Appropriate use of groups (<g>) 2) Efficient path commands 3) Proper use of symbols for repeated elements 4) Reasonable file size for detail level. Deduct 3 points for each inefficient implementation pattern, 5 points for excessive node count causing slow rendering, and 5 points for missing optimization techniques like symbol reuse for repeated elements. The full score is 10 points.", "maxScore": 10}], "class": "SVG Generation-SVG Images", "difficulty": "easy"}
{"index": 230, "question": "You are a code expert, please use your professional knowledge to generate accurate and expert responses. Be sure to make the code you generate executable for demonstration. How to use Tailwind CSS 4 in Electron.js with Vite, without using other frameworks such as React.", "checklist": [{"id": 0, "title": "Is the Electron.js + Vite integration properly configured?", "description": "Check if the code includes proper configuration for Electron.js with Vite, including correct entry points, build scripts, and development server setup. Verify that main and renderer processes are correctly separated and communicate properly. Score 0 if basic integration is missing, 5 if it works but with suboptimal configuration, and 10 if fully optimized with proper HMR support.", "maxScore": 10}, {"id": 1, "title": "Is Tailwind CSS 4 correctly installed and configured?", "description": "Evaluate if Tailwind CSS 4 is correctly installed with proper postcss configuration. Check for presence of tailwind.config.js with appropriate content paths targeting Electron's renderer process files. Verify that the Tailwind directives (@tailwind base, components, utilities) are properly included. Deduct 5 points if configuration is incomplete, 3 points if customization options are missing, and 3 points if purging/content configuration is incorrect. Full score is 10 points.", "maxScore": 10}, {"id": 2, "title": "Is the build process properly set up without framework dependencies?", "description": "Check if the build process avoids React, Vue, or other frameworks as specified. Verify that the solution uses vanilla JS or minimal libraries that don't qualify as frameworks. Ensure build scripts in package.json correctly handle both development and production builds for Electron without framework-specific configurations. Deduct 10 points if any framework is used, 5 points if build process doesn't handle both dev and prod environments.", "maxScore": 10}, {"id": 3, "title": "Is there a working demonstration of Tailwind CSS usage in the Electron app?", "description": "Review whether the code includes practical examples of Tailwind CSS classes being used in HTML elements within the Electron renderer process. Check for demonstration of responsive design, dark mode support, and at least one custom component using Tailwind's @apply directive. Score 0 if no examples provided, 5 if basic examples only, 10 if comprehensive examples showing Tailwind CSS 4's new features.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as missing files, CSS parsing errors, electron process crashes, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Hot reload with CSS changes preservation 2. Custom Tailwind plugins specific for desktop apps 3. Native OS integration with Tailwind-styled components). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant configuration files or duplicate Tailwind setups 2. Unnecessary dependencies that could bloat the Electron app 3. Overly complex build steps that could be simplified. Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functionality is interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating main/renderer processes, CSS modules, and utility functions), file organization, and build process automation. Deduct 5 points if global state pollution is found; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the build process is not automated. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction smooth and seamless?", "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Click feedback delay ≤ 100ms 2) Transition animation duration controlled between 300-500ms 3) Clear visual focus guidance. Deduct 5 points for each operation without feedback, 3 points for visual after-images during fast sliding, and 5 points for hard-to-find key function buttons. The full score is 10 points.", "maxScore": 10}], "class": "Other-Development Configuration", "difficulty": "medium"}
{"index": 37, "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. You're a code expert. Please use your professional knowledge to generate accurate, professional responses. Ensure that the code you generate is executable.\n\nPlease use HTML and JavaScript to implement a collaborative puzzle-solving game.\n\n**Task**: Design a collaborative puzzle-solving mode where players need to cooperate with AI or another player to solve puzzles.\n\n**Tip**: You can set up puzzles that require multiple people to complete, such as pressing two switches simultaneously, passing props to each other, etc.\n\nPlease include comments in your code to help other developers understand your implementation process.", "checklist": [{"id": 0, "title": "Is the puzzle-solving core game system fully implemented?", "description": "Review whether the code accurately implements the puzzle game mechanics through HTML/JavaScript, including puzzle creation, manipulation, and completion detection logic. Evaluate the structure of the puzzle system and whether it allows for multiple players to interact with puzzle elements simultaneously. Score 0 if core puzzle mechanics are missing, 5 points if basic puzzle interaction is implemented but lacks collaborative features, and 10 points if a comprehensive puzzle system supporting collaborative actions is fully implemented.", "maxScore": 10}, {"id": 1, "title": "Is the collaborative interaction between players properly implemented?", "description": "Check if the game includes mechanisms that genuinely require collaboration (e.g., simultaneous button presses, complementary abilities, or shared resource management). Evaluate the synchronization of player actions and their effect on the puzzle state. Award 10 points for well-designed collaborative mechanics with clear dependency between players; 5 points if collaboration exists but feels superficial; 0 points if players can effectively solve puzzles independently without collaboration.", "maxScore": 10}, {"id": 2, "title": "Is the AI player implementation adequate (if applicable)?", "description": "Assess the quality of the AI implementation for single-player mode. The AI should demonstrate intelligent behavior, respond to the player's actions, and provide meaningful assistance in solving puzzles. Examine decision-making algorithms, pathfinding capabilities, and ability to work cooperatively. Award 10 points for sophisticated AI that feels like a real partner; 5 points for functional but basic AI; 0 points if AI is missing or completely ineffective at puzzle solving.", "maxScore": 10}, {"id": 3, "title": "Is the multiplayer synchronization mechanism properly designed?", "description": "Evaluate whether the code includes proper state synchronization for multiplayer gameplay. Check for client-server communication or peer-to-peer mechanisms that maintain consistent game state across clients. Examine handling of latency, conflict resolution, and state reconciliation. Deduct 5 points if the synchronization mechanism lacks error handling or causes desynchronization issues. Deduct 3 points if there's no handling for network latency. The full score is 10 points.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as out-of-bounds input, network interruption, user operation errors, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Dynamic puzzle difficulty adjustment based on player performance 2. Real-time visual feedback for collaborative actions 3. Voice or text chat integration for coordination). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple ways to handle the same puzzle interaction) 2. Function modules unrelated to puzzle solving (e.g., unnecessary game features that distract from the core experience) 3. Fancy effects that affect performance (e.g., excessive animations that slow down gameplay). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating game logic/view/network layers), unit test coverage, and build process automation. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the build process is not automated. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction smooth and seamless?", "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Click feedback delay ≤ 100ms 2) Transition animation duration controlled between 300-500ms 3) Clear visual focus guidance. Deduct 5 points for each operation without feedback, 3 points for visual after-images during fast sliding, and 5 points for hard-to-find key function buttons. The full score is 10 points.", "maxScore": 10}], "class": "Game Development-Puzzle", "difficulty": "medium"}
{"index": 1804, "question": "You are a code expert, please use your professional knowledge to generate accurate and professional responses. Make sure the generated code is executable for demonstration when possible. Write a JavaScript program that can provide solutions for mitigating physical harm after users consume unhealthy foods.", "checklist": [{"id": 0, "title": "Is the core health assessment functionality properly implemented?", "description": "Evaluate whether the code accurately implements algorithms to calculate health impacts from unhealthy food consumption. Check if it includes nutrient analysis, caloric impact estimation, and personalized risk assessment. Score 0 if no assessment logic exists, 5 if basic calorie counting is implemented, and 10 if comprehensive health impact analysis with scientific backing is included.", "maxScore": 10}, {"id": 1, "title": "Are evidence-based mitigation strategies provided?", "description": "Check if the solution offers scientifically-backed mitigation strategies (e.g., specific exercises, nutritional counterbalances, hydration recommendations). Verify if strategies are tied to specific unhealthy food types. Deduct 5 points if recommendations lack scientific citations, 3 points if strategies are generic rather than food-specific. The full score is 10 points.", "maxScore": 10}, {"id": 2, "title": "Is user input handling comprehensive and personalized?", "description": "Evaluate the implementation of user input collection for personalization (age, weight, height, existing health conditions, food consumed). Check if BMI calculation and individual factors are considered when providing recommendations. Deduct 5 points if basic physical parameters are missing, 3 points if the system doesn't adapt recommendations based on user profile. The full score is 10 points.", "maxScore": 10}, {"id": 3, "title": "Is there a visualization component for health impact and improvement tracking?", "description": "Assess whether the code includes visual representations (charts, progress trackers, comparison metrics) to help users understand health impacts and track improvement. Check for interactive elements that respond to user input. Deduct 5 points if no visualization exists, 3 points if visualizations are static rather than interactive. The full score is 10 points.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as invalid user inputs, extreme nutritional values, missing health data, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Real-time AI nutritional advice 2. Integration with fitness trackers 3. Social sharing of health improvement milestones). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple BMI calculation methods) 2. Function modules unrelated to health mitigation (e.g., a built-in game) 3. Fancy effects that affect performance (e.g., unnecessary animations). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating nutritional analysis/recommendation/visualization layers), unit test coverage, and build process automation. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the build process is not automated. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction smooth and seamless?", "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Click feedback delay ≤ 100ms 2) Transition animation duration controlled between 300-500ms 3) Clear visual focus guidance. Deduct 5 points for each operation without feedback, 3 points for visual after-images during fast sliding, and 5 points for hard-to-find key function buttons. The full score is 10 points.", "maxScore": 10}], "class": "Utility Tools-Calculation Tools", "difficulty": "hard"}
{"index": 937, "question": "You are a code expert. Please use your professional knowledge to generate accurate and expert responses. Be sure to make the generated code executable for demonstration purposes. Design a mobile app for the Android system that functions as a novel reader, retrieving book content in JSON format from specific URLs.", "checklist": [{"id": 0, "title": "Is the core novel reading functionality fully implemented?", "description": "Review whether the code accurately implements the book content retrieval mechanism from JSON APIs, including parsing, caching, and displaying formatted text content. Check for proper handling of different chapter navigation, bookmarks, and reading progress tracking. Score 0 if core reading functionality is missing, 5 if basic reading is implemented but lacks navigation features, and 10 if all essential reader functions are included.", "maxScore": 10}, {"id": 1, "title": "Is the JSON data handling correctly implemented?", "description": "Evaluate the JSON parsing mechanism, including error handling for malformed data, empty responses, or unexpected content structure. Check for proper model classes representing book and chapter data. Verify that JSON parsing is performed off the main thread to prevent UI freezes. Deduct 5 points if no error handling exists, 3 points if parsing blocks the UI thread, and 2 points if model classes are poorly designed. The full score is 10 points.", "maxScore": 10}, {"id": 2, "title": "Is the network communication layer properly designed?", "description": "Check whether the app implements proper HTTP client (Retrofit/Volley/OkHttp), handles network timeouts, implements retry mechanisms, and displays appropriate loading/error states. Verify implementation of network state monitoring and offline mode. Deduct 5 points if no network error handling exists, 3 points if no caching strategy is implemented, and 3 points if offline mode is missing. The full score is 10 points.", "maxScore": 10}, {"id": 3, "title": "Is the Android-specific architecture and lifecycle management implemented correctly?", "description": "Assess whether the code follows Android architectural patterns (MVVM/MVP/MVI), handles configuration changes properly, manages Activity/Fragment lifecycles, and implements proper state preservation. Check for implementation of ViewModels, LiveData/StateFlow, and proper navigation components. Deduct 5 points for not following architecture patterns, 3 points for lifecycle leaks, and 3 points for improper state management. The full score is 10 points.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as network errors, out-of-memory issues, device rotation, background process killing, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the reading experience (e.g., 1. Text-to-speech integration 2. Customizable reading themes/fonts 3. Reading statistics and analytics 4. Social sharing capabilities 5. Annotation and highlighting). Add 2 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple text parsing engines) 2. Function modules unrelated to novel reading (e.g., built-in games) 3. Fancy effects that affect performance (e.g., excessive animations during page turns). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating UI/business logic/data access layers), unit test coverage, and build process automation. Examine proper dependency injection usage, static analysis tools integration, and code documentation. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 3 points if the code duplication rate is too high (over 30%); deduct 2 points if build variants (debug/release) are not properly configured. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface design meet modern Android UI standards?", "description": "Evaluate whether the UI follows Material Design principles: 1) Proper implementation of components (RecyclerView, ConstraintLayout, etc.) 2) Support for both light/dark themes 3) Responsive layouts for different screen sizes 4) Proper touch target sizes (min 48dp) 5) Accessibility compliance. Deduct 2 points for each UI guideline violation, 3 points for non-responsive layouts, and 3 points for accessibility issues. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction smooth and battery-efficient?", "description": "Judge whether the app performs well on mobile devices: 1) Smooth scrolling without frame drops 2) Efficient battery usage (no continuous background processes) 3) Fast app startup time (under 2 seconds) 4) Proper handling of system resources. Deduct 3 points for janky scrolling, 3 points for excessive battery drain, 2 points for slow startup, and 2 points for memory leaks. The full score is 10 points.", "maxScore": 10}], "class": "Web Applications-Education/Learning", "difficulty": "medium"}
{"index": 1017, "question": "You are a code expert, please use your professional knowledge to generate accurate and professional responses. Make sure the generated code is executable for display whenever possible. Modify: Place the \"Edit Member List\" button after the \"Import List\" button. Issue: After editing the member list and clicking the \"Save Changes\" button, the window cannot be closed. Generate complete webpage code.", "checklist": [{"id": 0, "title": "Is the 'Edit Member List' button placement correctly implemented?", "description": "Verify that the 'Edit Member List' button appears after the 'Import List' button in the DOM structure and visual layout. Check both the HTML order and any CSS positioning that might affect the visual order. Give 10 points if correctly placed, 5 points if visually correct but with improper DOM structure, and 0 points if incorrectly placed.", "maxScore": 10}, {"id": 1, "title": "Is the modal window closing functionality properly implemented?", "description": "Check whether the 'Save Changes' button correctly triggers the modal closing mechanism. The modal should completely disappear from view and be removed from the active DOM when clicked. Verify event listeners are properly attached and that any backdrop/overlay elements are also hidden or removed. Award 10 points if it works flawlessly, 5 points if it visually disappears but remains in DOM, and 0 points if it doesn't close at all.", "maxScore": 10}, {"id": 2, "title": "Is the member list editing functionality complete?", "description": "Evaluate whether the edit functionality allows adding new members, deleting existing ones, and modifying member information. The implementation should include input validation and proper state management. Award 10 points for full CRUD operations with validation, 7 points if basic editing works without validation, and 3 points if only partial editing capabilities exist.", "maxScore": 10}, {"id": 3, "title": "Is the data persistence properly implemented?", "description": "Check if the changes made to the member list are properly saved and persisted (either to localStorage, sessionStorage, or prepared for server submission). The saved data should be retrievable after the modal is closed and reopened. Give 10 points for complete persistence with error handling, 5 points for basic persistence without error handling, and 0 points if changes are lost after closing the modal.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as empty input fields, special characters in names, duplicate entries, etc.) and provide friendly error messages or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Drag-and-drop reordering of members 2. Real-time search/filtering 3. Bulk operations for multiple members). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple ways to edit the same data) 2. Function modules unrelated to member list management 3. Fancy effects that affect performance (e.g., unnecessary animations). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating data model/view/controller layers), use of modern JavaScript practices, and code maintainability. Deduct 5 points if global variables are excessively used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if event listeners are not properly managed (potential memory leaks). The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction smooth and seamless?", "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Click feedback delay ≤ 100ms 2) Transition animation duration controlled between 300-500ms 3) Clear visual focus guidance. Deduct 5 points for each operation without feedback, 3 points for visual after-images during transitions, and 5 points for hard-to-find key function buttons. The full score is 10 points.", "maxScore": 10}], "class": "Management Systems-Frontend/Backend Platforms", "difficulty": "easy"}
{"index": 854, "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure the code you generate is executable when presented. \"Ten Lines at a Glance\" Training\nBased on the title, generate a standard for an app's subtitle display that allows viewing ten lines at a glance.", "checklist": [{"id": 0, "title": "Is the subtitle display system properly designed?", "description": "Review whether the code implements a proper subtitle display mechanism that shows exactly 10 lines at a time. Check if it handles text wrapping correctly, accounts for different screen sizes, and maintains consistent line height. Score 0 if the display doesn't show 10 lines, 5 if it shows 10 lines but with inconsistent spacing or formatting, and 10 if it perfectly displays 10 lines with proper formatting and responsiveness.", "maxScore": 10}, {"id": 1, "title": "Is text rendering optimization implemented?", "description": "Evaluate whether the code includes techniques for efficient text rendering such as text virtualization, canvas-based rendering, or optimized DOM manipulation for smooth scrolling through subtitles. Check if the implementation prevents layout thrashing when updating lines. Deduct 5 points if no optimization is present, 3 points if basic optimization exists but performance still suffers under load. The full score is 10 points.", "maxScore": 10}, {"id": 2, "title": "Is there a proper timing synchronization mechanism?", "description": "Check if the subtitle system includes synchronization with media timing (video/audio) through either timestamp-based or duration-based approaches. Verify that there's a mechanism to adjust subtitle display based on playback speed changes. Deduct 5 points if subtitles aren't properly synchronized, 3 points if synchronization works only at normal speed. Award 10 points for a comprehensive solution with frame-accurate timing.", "maxScore": 10}, {"id": 3, "title": "Does the implementation handle various subtitle formats and languages?", "description": "Assess whether the code supports common subtitle formats (SRT, WebVTT, etc.) and handles different languages properly, including right-to-left text, vertical text, and complex scripts. Check if it correctly manages Unicode characters and text that requires special rendering. Deduct 5 points if only one format is supported, 3 points if language support is limited. The full score is 10 points.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as malformed subtitle files, missing timing information, overlapping time codes, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Dynamic font sizing based on content importance 2. Color-coded speaker identification 3. Smooth transition animations between subtitle changes). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant subtitle parsing mechanisms 2. Unnecessary rendering loops or DOM manipulations 3. Overly complex animations that could impact performance or readability. Deduct 3 points for each redundancy found, and directly deduct 10 points if the core subtitle display functionality is compromised by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating subtitle parsing/rendering/synchronization), unit test coverage, and build process automation. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the build process is not automated. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the subtitle display follows modern design principles: 1) Appropriate contrast ratio between text and background (minimum 4.5:1) 2) Proper typography with adequate spacing between lines (1.2-1.5× line height) 3) Consistent margins and padding around the subtitle area. Deduct 3 points for poor contrast, 5 points for illegible font choices, and 5 points for inconsistent spacing or alignment. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction smooth and seamless?", "description": "Judge whether the subtitle transitions conform to human perception characteristics: 1) Subtitles appear and disappear without jarring 2) Smooth scrolling if content changes while maintaining readability 3) Proper focus handling for accessibility. Deduct 5 points for abrupt transitions between subtitles, 3 points for stuttering during scrolling, and 5 points for lack of user controls for subtitle display preferences. The full score is 10 points.", "maxScore": 10}], "class": "Other-UI/UX Design Standards", "difficulty": "hard"}
{"index": 325, "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure that the code you generate is executable. Could you create a similar dynamic website based on an existing one, and provide me with the source code? If you're confident you can do this, I'll share the website with you. How does that sound?", "checklist": [{"id": 0, "title": "Website Structure Implementation", "description": "Evaluate whether the code properly implements the basic structure of the website, including HTML markup, CSS styling, and JavaScript functionality that mirrors the reference site.Score 0 if the structure is completely different from the reference, 5 if it has similar structure but significant differences, and 10 if it accurately reproduces the reference site's structure with proper semantic HTML elements.", "maxScore": 10}, {"id": 1, "title": "Visual Design Fidelity", "description": "Assess how closely the implementation matches the visual design of the reference site, including colors, typography, spacing, and overall layout.Deduct 2 points for each significant visual discrepancy from the reference site (colors off by more than 10% in RGB values, font sizes different by more than 2px, layout spacing off by more than 15px). The full score is 10 points.", "maxScore": 10}, {"id": 2, "title": "Interactive Elements Functionality", "description": "Check whether all interactive elements (buttons, forms, dropdowns, etc.) function similarly to the reference site, including proper hover states, click events, and form validations.Deduct 2 points for each non-functional interactive element, and 1 point for each element with partial functionality (e.g., hover states work but click events don't). Give 10 points if all interactive elements work as expected.", "maxScore": 10}, {"id": 3, "title": "Responsive Design Implementation", "description": "Evaluate whether the site is responsive like the reference site, adapting properly to different screen sizes (mobile, tablet, desktop) with appropriate breakpoints and media queries.Score 0 if no responsive design is implemented, 5 if basic responsiveness exists but with layout issues at certain breakpoints, and 10 if the implementation adjusts smoothly across all screen sizes matching the reference site's behavior.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as incorrect user input, network failures, resources failing to load, etc.) and provide friendly error prompts or recovery mechanisms.Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features or improvements over the reference site that enhance the experience (e.g., 1. Performance optimizations 2. Accessibility improvements 3. Enhanced animations or transitions).Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions 2. Function modules unrelated to the reference site 3. Fancy effects that affect performance and weren't in the original site.Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating components, styles, and logic), code organization, best practices for the technologies used, and build process implementation.Deduct 5 points if global style/script pollution is found; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if there's no separation of concerns. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching 2) Proper layout spacing 3) Professional font system (body font size ≥ 14px, line height over 1.5 times).Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction smooth and seamless?", "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Click feedback delay ≤ 100ms 2) Transition animation duration controlled between 300-500ms 3) Clear visual focus guidance.Deduct 5 points for each operation without feedback, 3 points for visual after-images during fast interactions, and 5 points for hard-to-find key function buttons. The full score is 10 points.", "maxScore": 10}], "class": "Other-Web Development", "difficulty": "hard"}
{"index": 1720, "question": "You are a code expert, please use your professional knowledge to generate accurate and professional responses. Make sure the generated code is executable for demonstration. Implement a Galton board program using HTML language.", "checklist": [{"id": 0, "title": "Is the Galton board physics simulation accurately implemented?", "description": "Review whether the code accurately implements the physics of ball movement through HTML/JavaScript, including gravity simulation, collision detection with pegs, and realistic bouncing mechanics. The ball should exhibit proper acceleration due to gravity and random deflection upon hitting pegs. Score 0 if no physics simulation is implemented, 5 if only basic gravity is present without proper collision mechanics, and 10 if realistic physics with proper momentum and random distribution is fully implemented.", "maxScore": 10}, {"id": 1, "title": "Is the visual representation of the Galton board properly constructed?", "description": "Check whether the HTML/CSS implementation includes a proper triangular peg arrangement, collection bins at the bottom, and clear visual boundaries. The pegs should be arranged in a mathematically correct pattern that creates the binomial distribution. Deduct 5 points if the peg arrangement is irregular or mathematically incorrect, and 3 points if the visual proportions don't match a real Galton board. The full score is 10 points.", "maxScore": 10}, {"id": 2, "title": "Does the program demonstrate proper statistical distribution visualization?", "description": "Evaluate whether the simulation produces and displays the characteristic bell curve (normal distribution) when multiple balls are dropped. The program should include a histogram or counter showing ball accumulation in each bin, and ideally overlay the theoretical binomial distribution curve. Deduct 5 points if no statistical visualization is provided, and 3 points if the distribution doesn't converge to the expected bell curve after sufficient trials. The full score is 10 points.", "maxScore": 10}, {"id": 3, "title": "Are interactive controls and animation features properly implemented?", "description": "Check whether the code includes user controls for dropping balls (single or multiple), adjusting simulation speed, resetting the board, and pausing/resuming animation. The ball animation should be smooth and visually appealing with proper frame rates. Deduct 5 points if no user controls are provided, and 3 points if animations are choppy or lack smooth transitions. Give 10 points if comprehensive controls with smooth animations are fully implemented.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as rapid clicking, browser performance limitations, edge cases in physics calculations, etc.) and provide friendly error handling or performance optimization. Code with strong robustness should prevent memory leaks during long simulations and handle browser compatibility issues. Give 10 points for excellent robustness, 5 points for average handling, and 0 points if no exception handling is present.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the educational or entertainment value (e.g., 1. Real-time probability calculations and predictions 2. Customizable board parameters (peg count, ball size) 3. Sound effects synchronized with collisions 4. Historical data tracking and comparison). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple ball drop mechanisms coexisting) 2. Function modules unrelated to Galton board simulation (e.g., unrelated games or calculators) 3. Excessive visual effects that impact performance (e.g., complex particle systems that slow down the physics). Deduct 3 points for each redundancy found, and directly deduct 10 points if core simulation functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating physics engine/rendering/UI control layers), code organization, and maintainability. Deduct 5 points if global state pollution is found or object-oriented principles are not followed; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if functions are not properly separated or commented. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching with clear contrast between pegs, balls, and background 2) Proper proportional relationships between board elements 3) Professional typography for labels and statistics (font size ≥ 14px, clear hierarchy). Deduct 3 points for each visually cluttered element, 5 points for poor color contrast that affects readability, and 5 points for disproportionate element sizing. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction smooth and seamless?", "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Ball animation frame rate ≥ 30fps for smooth motion 2) Interactive button response delay ≤ 100ms 3) Collision animations that provide clear visual feedback 4) Smooth statistical updates without jarring jumps. Deduct 5 points for each choppy animation sequence, 3 points for delayed user input response, and 5 points for unclear visual feedback during interactions. The full score is 10 points.", "maxScore": 10}], "class": "Simulation & Modeling-Physics Simulation", "difficulty": "medium"}
{"index": 1451, "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Be sure that the code you provide is executable and demonstrable. For an iOS native project, please implement a secondary page using React Native that resembles the native tableview, which can scroll up and down and respond to cell selection. Please provide the complete code.", "checklist": [{"id": 0, "title": "Is a complete React Native component implemented that resembles iOS UITableView?", "description": "Evaluate whether the code implements a proper React Native component that visually and functionally resembles the native iOS UITableView. Check for proper section headers, row styling, separators, and overall visual fidelity to native iOS components. Score 0 if the component is missing or barely resembles a UITableView, 5 if basic structure is implemented but with visual inconsistencies, and 10 if it's virtually indistinguishable from a native implementation.", "maxScore": 10}, {"id": 1, "title": "Does the implementation handle vertical scrolling properly?", "description": "Verify that the React Native implementation properly handles vertical scrolling with iOS-like momentum, bounce effects, scroll indicators, and pull-to-refresh capabilities. Check if FlatList or ScrollView is configured correctly with appropriate performance optimizations. Deduct 3 points if scrolling performance is poor, 3 points if iOS-specific scroll behaviors are missing, and 5 points if scrolling functionality is broken. The full score is 10 points.", "maxScore": 10}, {"id": 2, "title": "Is cell selection implemented with proper visual feedback?", "description": "Examine whether cell selection provides the standard iOS highlight effect, proper onPress handlers, and appropriate visual feedback. Check if selection state is properly managed and if there's a haptic feedback implementation. Deduct 5 points if selection visual effect is missing or incorrect, 3 points if selection callback is not implemented, and 2 points if there's no deselection handling. The full score is 10 points.", "maxScore": 10}, {"id": 3, "title": "Is the integration between React Native and iOS native properly configured?", "description": "Evaluate if the code includes proper React Native to iOS native bridge configuration, including navigation handling between native screens and React Native views. Check for proper module registration, event handling across the bridge, and configuration of the RCTRootView. Deduct 5 points for missing native module integration, 3 points for improper navigation handling, and 5 points for broken communication between native and React Native. The full score is 10 points.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as data loading failures, network issues, state inconsistencies) and provide friendly error handling. Check for proper componentDidCatch implementations, error boundaries, and fallback UIs. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Swipe actions on cells 2. Interactive cell animations 3. Advanced section indexing like in native Contacts app). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant state management or component re-rendering 2. Unnecessarily complex animations that affect performance 3. Overuse of third-party libraries for simple tasks. Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review component architecture (proper separation of concerns, stateless/stateful components), TypeScript/PropTypes usage, and code organization. Deduct 5 points if there's no component decomposition; deduct 5 points if prop validation is missing; deduct 5 points if styling approach is inconsistent or inline styles are overused. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet iOS design standards?", "description": "Evaluate whether the design follows iOS Human Interface Guidelines: 1) Proper use of system colors 2) Standard font usage (SF Pro or equivalent) 3) Proper margins and layout constraints matching iOS defaults (typically 16pt horizontal margins). Deduct 3 points for each non-iOS-like visual element, 5 points for Android-looking components, and 5 points for improper use of navigation bars or toolbars. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction smooth and seamless?", "description": "Judge whether the dynamic effects conform to iOS interaction standards: 1) Proper cell highlight timings 2) Standard iOS animation durations (typically 0.3s for most transitions) 3) Proper gesture handling that doesn't interfere with native gestures. Deduct 5 points for each janky animation, 3 points for incorrect timing in interactions, and 5 points for gesture conflicts with native iOS gestures. The full score is 10 points.", "maxScore": 10}], "class": "Other-Mobile App Development", "difficulty": "easy"}
{"index": 950, "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Be sure to provide executable code when possible. Create an HTML-based airplane battle game.", "checklist": [{"id": 0, "title": "Is the core game mechanics fully implemented?", "description": "Evaluate whether the code implements the essential airplane battle game mechanics: player movement, enemy spawning, bullet firing, collision detection, and scoring system. Score 0 if the core interaction logic is missing, 5 if only basic movement and shooting are implemented, and 10 if all essential battle mechanics (including enemy AI patterns and power-ups) are fully included.", "maxScore": 10}, {"id": 1, "title": "Is the game loop and rendering system properly designed?", "description": "Check whether the game implements a proper game loop using requestAnimationFrame or similar technique, with separate update and render cycles. Verify that sprite rendering is optimized (using canvas or efficient DOM manipulation). Deduct 5 points if the game has performance issues above 30 FPS, 3 points if animation is jerky, and 3 points if there's no frame rate management. The full score is 10 points.", "maxScore": 10}, {"id": 2, "title": "Are the game controls responsive and intuitive?", "description": "Assess whether the game provides responsive controls (keyboard/touch/mouse) with proper event handling and input buffering. Test if the player airplane responds within 50ms of input, and if there are alternative control schemes for different devices. Deduct 5 points if controls feel laggy, and 5 points if the game isn't playable across different input methods. The full score is 10 points.", "maxScore": 10}, {"id": 3, "title": "Is there a complete game progression system?", "description": "Review whether the game includes a progression system with increasing difficulty levels, waves of enemies, boss battles, and game states (start screen, gameplay, game over, pause). Check for score persistence and level advancement logic. Deduct 5 points if difficulty never increases, 3 points if there's no pause functionality, and 5 points if game state transitions are abrupt or missing. The full score is 10 points.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as browser resizing, focus loss, unexpected user input, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Special weapons or power-ups 2. Dynamic weather effects 3. Procedurally generated enemy patterns 4. Interactive background elements). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple collision detection systems) 2. Function modules unrelated to the airplane battle game (e.g., an unnecessary settings menu with too many options) 3. Fancy effects that affect performance (e.g., excessive particle effects that cause lag). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating game entity classes, rendering engine, input handling), code organization, and maintainability. Deduct 5 points if global state pollution is found or if proper object-oriented/functional patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if there's no clear separation between game logic and presentation. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional game design standards?", "description": "Evaluate whether the overall design follows modern game design principles: 1) Consistent visual style and theme 2) Clear visual hierarchy with important elements (player health, score) easily visible 3) Proper contrast between game elements and background 4) Readable text elements even during intense gameplay. Deduct 3 points for each cluttered UI element, 5 points for poor contrast making gameplay difficult, and 5 points for inconsistent visual style. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction smooth and seamless?", "description": "Judge whether the dynamic effects conform to game feel principles: 1) Visual feedback for all player actions (shooting, taking damage, power-ups) 2) Enemy destruction animations and effects 3) Screen shake and other juice elements for impactful moments 4) Smooth transitions between game states. Deduct 5 points for each action without feedback, 3 points for jarring or missing transitions, and 5 points for confusing visual feedback during gameplay. The full score is 10 points.", "maxScore": 10}], "class": "Game Development-Shooting", "difficulty": "medium"}
{"index": 1249, "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Be sure to ensure that the generated code is executable for demonstration purposes. Create a small program code that combines Heavenly Stems and Earthly Branches, the Chinese Zodiac, and the 64 hexagrams of I Ching for auspicious time analysis.", "checklist": [{"id": 0, "title": "Is the Heavenly Stems and Earthly Branches calculation system accurately implemented?", "description": "Review whether the code correctly implements the 60-year cycle calculation system (天干地支) with accurate mapping of the 10 Heavenly Stems and 12 Earthly Branches. Check if the conversion from Gregorian calendar to traditional Chinese calendar includes proper leap year handling and solar term calculations. Score 0 if basic stem-branch pairing is wrong, 5 if only basic conversion is implemented without solar terms, and 10 if complete with accurate astronomical calculations.", "maxScore": 10}, {"id": 1, "title": "Is the Chinese Zodiac integration and compatibility analysis properly implemented?", "description": "Evaluate whether the 12 zodiac animals (生肖) are correctly mapped to birth years and integrated with compatibility analysis (相冲相合). Check if the code includes zodiac personality traits, lucky elements (五行), and inter-zodiac relationship calculations. Deduct 5 points if zodiac-year mapping is incorrect, 3 points if compatibility logic is missing. Full score requires complete zodiac interaction matrix with Five Elements theory integration.", "maxScore": 10}, {"id": 2, "title": "Are the 64 I Ching hexagrams correctly implemented with divination logic?", "description": "Check whether all 64 hexagrams (六十四卦) are accurately represented with correct trigram combinations, names, and interpretations. Evaluate if the divination algorithm includes proper randomization methods (coin toss, yarrow stalk simulation) and hexagram transformation logic. Deduct 5 points if hexagram structures are wrong, 5 points if divination randomization is pseudo or biased. Requires complete hexagram database with changing lines functionality.", "maxScore": 10}, {"id": 3, "title": "Is the auspicious time analysis algorithm comprehensive and culturally accurate?", "description": "Assess whether the time analysis combines all three systems (stems-branches, zodiac, I Ching) into coherent auspicious timing recommendations. Check if the algorithm considers traditional factors like conflict avoidance (冲煞), favorable directions (吉方), and time-specific activities. Deduct 5 points if integration logic is superficial, 3 points if cultural context is inaccurate. Full score requires sophisticated multi-factor analysis with seasonal adjustments.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle edge cases such as invalid dates, leap years, timezone conversions, and boundary conditions in calendar calculations. Code should gracefully handle user input errors and provide meaningful error messages for invalid queries. Give 10 points for comprehensive error handling, 5 points for basic exception management, and 0 points if crashes occur with invalid inputs.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that enhance cultural authenticity?", "description": "Check for creative features that add cultural depth such as: 1) Interactive hexagram casting animations 2) Personalized zodiac compatibility reports 3) Historical event correlation with stem-branch cycles 4) Multi-language support for traditional terms. Add 3 points for each well-implemented cultural feature (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly examine three types of redundancy: 1) Duplicate calendar conversion functions 2) Unrelated fortune-telling elements (Western astrology, tarot) 3) Excessive decorative animations that obscure cultural content. Deduct 3 points for each redundancy found, and directly deduct 10 points if core traditional systems are compromised by irrelevant features.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular separation of calendar systems, zodiac logic, and I Ching components. Check for proper data structures, algorithm efficiency, and maintainable code organization. Deduct 5 points for monolithic code structure; deduct 5 points if calculation algorithms are inefficient; deduct 5 points if no input validation exists. Full score requires clean architecture with separated concerns.", "maxScore": 10}, {"id": 8, "title": "Does the interface design respect traditional Chinese aesthetics?", "description": "Evaluate whether the visual design incorporates traditional Chinese design elements appropriately: 1) Color harmony using traditional palettes (red, gold, jade green) 2) Typography respecting Chinese character spacing and hierarchy 3) Layout following traditional symmetry principles. Deduct 3 points for culturally inappropriate color choices, 5 points for poor Chinese text rendering, and 5 points for layout that conflicts with traditional aesthetics. Full score requires authentic cultural visual representation.", "maxScore": 10}, {"id": 9, "title": "Is the user interaction intuitive and culturally contextual?", "description": "Judge whether interactions follow cultural expectations: 1) Intuitive date selection with lunar calendar support 2) Clear hexagram casting process with appropriate ritual feel 3) Results presentation that respects traditional consultation format. Deduct 5 points for confusing navigation between different systems, 3 points for rushed transitions that break cultural immersion, and 5 points for results that lack traditional interpretive context. Full score requires seamless cultural user experience.", "maxScore": 10}], "class": "Other-Divination", "difficulty": "hard"}
{"index": 1703, "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Be sure to ensure that the generated code is executable for demonstration purposes. Create a complete user-end source code using uniapp that mimics the JD app, implementing the following requirements:\n1. Homepage\n2. Category page\n3. Shopping cart\n4. Personal profile page", "checklist": [{"id": 0, "title": "Is the homepage implementation complete and functional?", "description": "Review whether the code accurately implements key homepage components: banner slideshow, navigation icons, product recommendations, and promotional sections. Check if data loading and rendering are properly handled (lazy loading for performance). Score 0 if the homepage structure is missing, 5 if basic layout is implemented without dynamic features, and 10 if the homepage closely resembles JD's with all core components functioning properly.", "maxScore": 10}, {"id": 1, "title": "Is the category page correctly structured with hierarchical navigation?", "description": "Evaluate the implementation of the two-level or three-level category navigation system, including primary categories, sub-categories, and product listings. Check if category data is properly structured, if navigation between categories is smooth, and if category filtering works correctly. Deduct 5 points if only a flat category structure is implemented, 3 points if transitions between categories are abrupt. Full score of 10 points requires smooth scrolling, proper caching of category state, and visual hierarchy matching JD's design.", "maxScore": 10}, {"id": 2, "title": "Is the shopping cart functionality fully implemented?", "description": "Check whether the shopping cart includes essential features: adding/removing products, quantity adjustment, price calculation, product selection checkboxes, and checkout options. Verify if cart state persists across app navigation and if calculations for subtotals, discounts, and shipping are accurate. Deduct 5 points if quantity adjustment doesn't work properly, 3 points if price calculations are incorrect. Full score of 10 points requires all cart functions working with proper validation and state management.", "maxScore": 10}, {"id": 3, "title": "Is the personal profile page properly implemented with user account features?", "description": "Review the profile page implementation including user information display, order history, address management, and account settings. Check if the layout follows JD's design patterns and if navigation to sub-sections works correctly. Deduct 5 points if user data management is missing, 3 points if navigation to sub-sections doesn't work. Full score of 10 requires proper state management for user information, clean layout, and all essential user account features.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as network failures, empty data responses, input validation) and provide friendly error prompts or recovery mechanisms. Check for proper error boundaries and fallback UI components. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Pull-down refresh animations 2. Custom skeleton screens during loading 3. Gesture-based navigation 4. Voice search capability). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple HTTP request utilities) 2. Function modules unrelated to an e-commerce app 3. Fancy effects that affect performance (e.g., excessive animations, unnecessary 3D effects). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (separation of UI components, business logic, and API services), use of uniapp best practices, proper state management, and build configuration. Deduct 5 points if global state pollution is found or if Vue component composition is poorly structured; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if there's no consideration for multiple platform compatibility. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the overall design follows JD's design language: 1) Consistent use of red as primary color with appropriate accents 2) Proper layout spacing following standard design grids 3) Professional typography hierarchy (clear distinction between titles, prices, and descriptions). Deduct 3 points for each misaligned visual element, 5 points for color schemes that don't match JD's branding, and 5 points for inconsistent visual components. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction smooth and seamless?", "description": "Judge whether the dynamic effects conform to modern mobile app standards: 1) Responsive touch feedback ≤ 100ms 2) Smooth transitions between pages and components 3) Proper loading states and indicators. Deduct 5 points for each operation without feedback, 3 points for jerky animations or transitions, and 5 points for non-intuitive interaction patterns that differ significantly from standard e-commerce apps. The full score is 10 points.", "maxScore": 10}], "class": "Web Applications-Online Shopping", "difficulty": "hard"}
{"index": 1645, "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. You're a coding expert. Please use your professional knowledge to generate accurate and professional responses. Make sure the code you provide is executable when possible. With Mother's Day approaching, please help me create an HTML webpage about being grateful to mothers. The content should express understanding of mothers' hardships, willingness to share their burdens, and showing filial piety. Use G.E.M.'s \"The Only\" as the background.", "checklist": [{"id": 0, "title": "Does the webpage express gratitude and appreciation toward mothers effectively?", "description": "Evaluate whether the content genuinely expresses understanding of mothers' hardships, willingness to share burdens, and showing filial piety. Score 0 if these themes are absent, 5 if only superficially mentioned, and 10 if the content is heartfelt and comprehensive with specific examples or scenarios that mothers might face.", "maxScore": 10}, {"id": 1, "title": "Is G.E.M.'s 'The Only' properly implemented as background music?", "description": "Check if the audio implementation works correctly with proper controls (play/pause), autoplay with user consent, appropriate volume levels, and fallback if the audio file cannot be loaded. Deduct 5 points if there's no user control for the audio, 3 points if there's no fallback mechanism, and 3 points if the audio integration disrupts the user experience.", "maxScore": 10}, {"id": 2, "title": "Is the Mother's Day theme visually represented through effective design elements?", "description": "Assess whether appropriate Mother's Day imagery (like flowers, hearts, mother-child illustrations) is integrated into the design. The visual theme should complement the textual content. Deduct 4 points if imagery is generic or unrelated to mothers, 3 points if visual elements clash with the theme, and 5 points if there are no thematic visual elements at all.", "maxScore": 10}, {"id": 3, "title": "Does the webpage include interactive elements to enhance user engagement?", "description": "Review for interactive elements like animation effects when hovering over images of mothers, clickable elements that reveal special messages, or transitions that create an emotional connection. Award 0 points for static content only, 5 points for basic hover effects, and 10 points for thoughtful animations or interactions that enhance the emotional impact.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as media loading failures, browser compatibility issues, responsive adjustments for different devices) and provide fallback options. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Animated mother's day card, 2. Interactive timeline of mother's memories, 3. Virtual gift creation feature). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple audio players) 2. Function modules unrelated to Mother's Day theme (e.g., unrelated animations) 3. Fancy effects that affect performance (e.g., excessive particle effects). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review HTML structure (semantic HTML usage), CSS organization (separate styling from content), and JavaScript best practices. Deduct 5 points if non-semantic elements are overused; deduct 3 points if inline styles dominate instead of external CSS; deduct 3 points if JavaScript is not well-organized or contains potential memory leaks. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the webpage responsive and accessible?", "description": "Judge whether the webpage adapts well to different screen sizes (desktop, tablet, mobile) and includes accessibility features: 1) Proper alt text for images 2) Keyboard navigation support 3) Sufficient color contrast. Deduct 3 points for non-responsive layouts, 3 points for missing alt texts, 2 points for keyboard navigation issues, and 2 points for poor color contrast. The full score is 10 points.", "maxScore": 10}], "class": "Web Applications-Blogs/Forums", "difficulty": "easy"}
{"index": 1148, "question": "You are a code expert, please use your professional knowledge to generate accurate and professional responses. Ensure the generated code is executable for demonstration. Create a character animation model based on stand-up comedian Xu Zhisheng, with the setting being on a stand-up comedy stage while performing. Please write out the code, using AI dream generation.", "checklist": [{"id": 0, "title": "Is the character model accurately resembling Xu Zhisheng implemented?", "description": "Review whether the code creates a recognizable 3D model or 2D representation of Xu Zhisheng with proper facial features, proportions, and expressions that match his appearance. Score 0 if the character is generic without resemblance, 5 if it has basic similar features but lacks detail, and 10 if the model accurately captures his distinctive look and persona.", "maxScore": 10}, {"id": 1, "title": "Is the stand-up comedy stage environment properly implemented?", "description": "Check whether the code effectively creates a stand-up comedy stage setting with appropriate lighting, microphone stand, backdrop, and audience area. Deduct 3 points if stage lighting effects are missing, 3 points if the stage layout is unrealistic, and 2 points if audience elements are absent. The full score is 10 points.", "maxScore": 10}, {"id": 2, "title": "Are the character animations for comedy performance implemented?", "description": "Evaluate whether the animations include typical stand-up comedy gestures, movements, and expressions (e.g., microphone handling, comedic timing gestures, facial reactions). Score 0 if animations are static or missing, 5 if only basic movements are implemented, and 10 if the animations convincingly capture the dynamic nature of stand-up comedy performance with varied gestures and expressions.", "maxScore": 10}, {"id": 3, "title": "Is the AI dream generation approach properly implemented?", "description": "Assess whether appropriate AI methods (e.g., GAN, diffusion models, or other generation techniques) are used with proper implementation of parameters, training processes, or API integration. Deduct 5 points if the AI approach is superficially mentioned without actual implementation, 3 points if inappropriate AI methods are used for character animation. The full score is 10 points.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as resource loading failures, incompatible browsers, user interaction errors, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Interactive audience reactions 2. Dynamic joke generation 3. Voice recognition for user interaction). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar animation functions 2. Function modules unrelated to the comedy performance (e.g., unnecessary game mechanics) 3. Fancy effects that affect performance (e.g., excessive particle effects). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating animation logic/rendering/AI components), optimization techniques for animation performance, and code organization. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if performance optimization is not considered. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching for the stage and lighting 2) Proper layout spacing of UI controls and animation viewport 3) Professional font system for any text elements. Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction smooth and seamless?", "description": "Judge whether the animation and interactive effects conform to human perception characteristics: 1) Animation frame rate consistently above 30fps 2) Natural transitions between different comedy gestures and expressions 3) Clear visual feedback for user interactions. Deduct 5 points for jerky animations, 3 points for unnatural transitions between poses, and 5 points for confusing interaction mechanisms. The full score is 10 points.", "maxScore": 10}], "class": "Multimedia Editing-Video Production", "difficulty": "hard"}
{"index": 1337, "question": "You are a coding expert. Please use your professional knowledge to generate accurate and professional responses. Make sure to ensure that the code you generate is executable for demonstration purposes. Help me write the project content for an AI teaching assistant educational platform.", "checklist": [{"id": 0, "title": "Is a comprehensive AI teaching assistant system architecture designed?", "description": "Review whether the architecture clearly defines the core components of an educational platform (user management, content delivery, AI assistant integration, database design). Score 0 if there's no clear architecture, 5 if basic components are outlined but connections are unclear, and 10 if a complete, well-integrated system architecture with clear data flows is provided.", "maxScore": 10}, {"id": 1, "title": "Is the AI interaction model properly implemented?", "description": "Evaluate the implementation of the AI teaching assistant's core functionality, including natural language processing capabilities, response generation algorithms, and contextual understanding. Look for prompt engineering techniques, model selection justification, and handling of educational context. Deduct 5 points if the AI model lacks educational domain adaptation, and 3 points if there's no context retention between interactions. The full score is 10 points.", "maxScore": 10}, {"id": 2, "title": "Is the educational content management system fully functional?", "description": "Check whether the platform includes a comprehensive content management system with curriculum organization, lesson planning, assessment creation, and learning path customization. Score 0 if content management is missing, 5 if basic management exists but lacks educational metadata/taxonomies, and 10 if there is a complete system with content versioning, learning objective mapping, and adapting content based on student progress.", "maxScore": 10}, {"id": 3, "title": "Are student progress tracking and analytics features implemented?", "description": "Evaluate the implementation of learning analytics, student performance tracking, and personalized feedback mechanisms. Score 10 points if the system includes comprehensive dashboards for educators, learning pattern detection algorithms, and personalized intervention suggestions. Deduct 5 points if analytics are limited to basic metrics without actionable insights, and 3 points if visualization components are missing or inadequate.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as invalid user inputs, network interruptions, AI service failures, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the educational experience (e.g., 1. Real-time speech-to-text for lecture transcription 2. AI-generated visual concept maps 3. Personalized learning style adaptation). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar educational functions (e.g., multiple assessment systems) 2. Function modules unrelated to education (e.g., excessive gamification elements) 3. Fancy effects that affect platform performance (e.g., unnecessary animations that distract from learning). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core educational functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating educational content/AI service/user interface layers), unit test coverage, and build process automation. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the build process is not automated. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional educational design standards?", "description": "Evaluate whether the overall design follows modern educational UX principles: 1) Accessible color scheme (WCAG AA compliance) 2) Consistent information hierarchy (clear visual distinction between primary/secondary content) 3) Professional typography system (readable fonts with proper contrast). Deduct 3 points for cluttered learning interfaces, 5 points for cognitive overload-inducing layouts, and 5 points for non-intuitive navigation patterns. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the platform interaction designed for effective learning?", "description": "Judge whether the interaction design supports educational goals: 1) Clear feedback on learning activities within 1-2 seconds 2) Scaffolded interfaces that adapt to learner proficiency 3) Distraction-minimizing focus states during core learning activities. Deduct 5 points for cognitive friction in primary learning paths, 3 points for inconsistent interaction patterns across modules, and 5 points for excessive UI friction in assessment components. The full score is 10 points.", "maxScore": 10}], "class": "Web Applications-Education/Learning", "difficulty": "medium"}
{"index": 1285, "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure the code you generate is executable and displayable. Create a web-based intelligent music player that can automatically add playlists for different times and play the scheduled music when the time arrives. Please provide detailed implementation process and complete code.", "checklist": [{"id": 0, "title": "Is the core music playback system fully implemented?", "description": "Review whether the code accurately implements HTML5 Audio API or Web Audio API for music playback, including play/pause, volume control, progress tracking, and playlist management. Check if it supports multiple audio formats (MP3, WAV, OGG) and includes proper audio loading states. Score 0 if basic playback is not functional, 5 if only simple play/pause works, and 10 if all core audio features including seamless track transitions are implemented.", "maxScore": 10}, {"id": 1, "title": "Is the intelligent scheduling system properly designed?", "description": "Evaluate whether the time-based scheduling mechanism uses accurate timing APIs (setInterval/setTimeout or Web Workers for precision). Check if it includes timezone handling, schedule conflict resolution, and persistent storage of scheduled playlists. Deduct 5 points if scheduling accuracy exceeds ±30 seconds, 3 points if timezone issues aren't handled, and 5 points if schedules don't persist after browser refresh. Full score is 10 points.", "maxScore": 10}, {"id": 2, "title": "Is the automatic playlist generation algorithm effective?", "description": "Check whether the system implements intelligent playlist creation based on time context (morning, afternoon, evening, night) with appropriate music categorization logic. Evaluate if it includes music metadata analysis, mood-based selection, or learning from user preferences. Deduct 5 points if playlists are randomly generated without context awareness, 3 points if music categorization is overly simplistic. Full score requires sophisticated algorithmic playlist generation.", "maxScore": 10}, {"id": 3, "title": "Is the complete music library management system constructed?", "description": "Review whether the code includes comprehensive music library features: file upload/import, metadata editing, search/filter functionality, and playlist organization. Check for drag-and-drop support, bulk operations, and music file validation. Deduct 5 points if file management is basic, 3 points if search functionality is missing, and 5 points if no bulk operations are supported. Give 10 points if fully implemented with advanced library management.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as corrupted audio files, network interruption, invalid time inputs, browser compatibility issues, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Audio visualization/spectrum analyzer 2. Smart crossfade between tracks 3. Voice control integration 4. Sleep timer with fade-out 5. Social sharing of playlists). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple audio players coexisting) 2. Function modules unrelated to music playing (e.g., built-in games or social media feeds) 3. Fancy effects that affect audio performance (e.g., heavy visual effects during playback). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core music functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating audio engine/UI/scheduling/storage layers), unit test coverage, and build process automation. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the build process is not automated. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the overall design follows modern music player design principles: 1) Harmonious color matching with proper contrast for readability 2) Intuitive music controls layout (standard play/pause/skip positioning) 3) Professional typography for song titles and metadata (body font size ≥ 14px, line height over 1.5 times) 4) Proper album artwork display. Deduct 3 points for each crowded visual element, 5 points for poor color contrast affecting usability, and 5 points for chaotic music information layout. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction smooth and seamless?", "description": "Judge whether the dynamic effects conform to music player UX standards: 1) Audio control feedback delay ≤ 100ms 2) Progress bar scrubbing is responsive and accurate 3) Volume slider transitions are smooth 4) Track switching animations are seamless 5) Schedule notifications are non-intrusive. Deduct 5 points for each laggy audio control response, 3 points for jerky progress bar interactions, and 5 points for disruptive notification behavior. The full score is 10 points.", "maxScore": 10}], "class": "Web Applications-Entertainment", "difficulty": "hard"}
{"index": 842, "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Security Center 3.7\n\n## Core Functional Modules:\n\n### Federated Learning Console\n- Participant Status Dashboard (Heartbeat Detection)\n- Encryption Protocol Performance Monitoring (e.g., Paillier encryption time consumption curves)\n\n### Audit Tracker\n- Operation Replay Function: Frame-by-frame playback of user operations along a timeline\n- Difference Highlighting: Such as parameter comparison before and after configuration changes", "checklist": [{"id": 0, "title": "Is the Federated Learning Console fully implemented?", "description": "Review whether the participant status dashboard accurately displays real-time heartbeat detection with proper connection state visualization. Check if encryption protocol performance monitoring includes comprehensive metrics display (Paillier encryption time curves, throughput graphs, error rates). Score 0 if dashboard lacks real-time updates, 5 if only basic status display is implemented, and 10 if complete monitoring with historical data analysis is included.", "maxScore": 10}, {"id": 1, "title": "Is the Audit Tracker operation replay function properly implemented?", "description": "Evaluate whether the frame-by-frame playback system includes precise timeline control, step-by-step operation reconstruction, and smooth playback/pause functionality. Check for operation filtering capabilities and timeline scrubbing. Deduct 5 points if playback lacks accuracy, 3 points if timeline navigation is missing. The full score is 10 points.", "maxScore": 10}, {"id": 2, "title": "Is the difference highlighting system comprehensively designed?", "description": "Assess whether parameter comparison functionality includes visual diff rendering, side-by-side comparison views, and change impact analysis. Check for color-coded modifications, expandable nested object comparisons, and export capabilities. Deduct 5 points if visual highlighting is poor, 3 points if complex nested changes aren't handled properly. The full score is 10 points.", "maxScore": 10}, {"id": 3, "title": "Is the security center data architecture robust and scalable?", "description": "Review whether the system implements proper data persistence, real-time synchronization, and efficient querying mechanisms for audit logs and federated learning metrics. Check for data encryption at rest, proper indexing strategies, and backup mechanisms. Deduct 5 points if data integrity isn't guaranteed, 3 points if query performance is suboptimal. Give 10 points if fully implemented with enterprise-grade security.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as network timeouts, invalid data formats, concurrent access conflicts, encryption failures, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should effectively handle edge cases in security-critical environments, giving 10 points. If robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance security monitoring experience (e.g., 1. AI-powered anomaly detection alerts 2. Interactive 3D network topology visualization 3. Predictive performance analytics 4. Custom dashboard widgets). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar monitoring functions (e.g., multiple heartbeat detection mechanisms) 2. Function modules unrelated to security monitoring (e.g., built-in games or entertainment features) 3. Fancy effects that impact dashboard performance (e.g., excessive animations on critical monitoring displays). Deduct 3 points for each redundancy found, and directly deduct 10 points if core security functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating monitoring logic/visualization/data layers), security best practices implementation, and automated testing coverage. Deduct 5 points if sensitive data handling violations are found or security patterns aren't followed; deduct 5 points if code duplication rate exceeds 30%; deduct 5 points if no automated security testing is implemented. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface design meet enterprise security dashboard standards?", "description": "Evaluate whether the design follows enterprise dashboard principles: 1) Professional color scheme suitable for security monitoring (high contrast, accessibility compliant) 2) Information hierarchy with proper data density (critical alerts prominently displayed) 3) Consistent iconography and typography system (readable at various screen sizes). Deduct 3 points for each cluttered information panel, 5 points for poor color accessibility, and 5 points for inconsistent visual language. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Are the real-time updates and interactions responsive and intuitive?", "description": "Judge whether real-time features meet monitoring system requirements: 1) Dashboard updates with minimal latency (<500ms for critical alerts) 2) Smooth transitions for data refresh without disrupting user focus 3) Intuitive drill-down interactions for detailed analysis. Deduct 5 points for each delayed critical notification, 3 points for jarring update animations, and 5 points for non-intuitive navigation between monitoring views. The full score is 10 points.", "maxScore": 10}], "class": "Management Systems-Frontend/Backend Platforms", "difficulty": "medium"}
{"index": 1464, "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure the code you generate is executable for demonstration. Implement temperature data visualization using Vue 3 and Leaflet.", "checklist": [{"id": 0, "title": "Is the Vue 3 + Leaflet integration properly implemented?", "description": "Evaluate whether the Vue 3 component structure correctly integrates with the Leaflet library. Check for proper lifecycle hooks management (onMounted, onBeforeUnmount), Leaflet map initialization, and proper cleanup. Score 0 if the integration is broken, 5 if basic integration exists but with issues, and 10 if the integration is seamless with proper Vue 3 Composition API usage.", "maxScore": 10}, {"id": 1, "title": "Is the temperature data visualization effectively implemented?", "description": "Examine how temperature data is visualized on the map. Check for appropriate visualization techniques (heatmap, colored markers, chloropleth, etc.) that accurately represent temperature variations. Assess if color scales are intuitive and if legends are provided. Score 0 if visualization is missing, 5 if basic visualization exists but lacks clarity, and 10 if visualization is comprehensive with proper color mapping and clear visual cues.", "maxScore": 10}, {"id": 2, "title": "Is the data fetching and processing mechanism well-designed?", "description": "Review the implementation of data retrieval (API calls, static data imports) and processing logic. Check for error handling during data fetching, data transformation for visualization compatibility, and caching strategies. Deduct 5 points if error states aren't handled, 3 points if there's no loading state, and 3 points if data processing is inefficient. The full score is 10 points.", "maxScore": 10}, {"id": 3, "title": "Are interactive map features properly implemented?", "description": "Assess the implementation of map interactions such as zooming, panning, tooltips on hover, and click events on temperature data points. Check if interaction with temperature layers is intuitive and responsive. Deduct 5 points if essential map interactions are broken, 3 points if temperature data isn't interactive, and 2 points if interactions lack smooth transitions. The full score is 10 points.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as empty data, API failures, incorrect data formats, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Time-based animation of temperature changes 2. Multiple visualization modes (heatmap/isolines/colored markers) 3. Comparison tools for different time periods). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant map library imports or duplicate visualization layers 2. Unnecessary UI components that don't contribute to temperature visualization 3. Heavy animations or effects that slow down map rendering. Deduct 3 points for each redundancy found, and directly deduct 10 points if the core visualization functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating map configuration/data handling/UI components), reusability of components, and proper Vue 3 best practices. Deduct 5 points if global state management is messy or Composition API is misused; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if there's no separation of concerns between visualization logic and UI. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching for both UI and temperature visualization (color scales should be scientifically appropriate) 2) Proper layout spacing for controls and legends 3) Professional font system for temperature indicators and map labels. Deduct 3 points for each crowded visual element, 5 points for confusing temperature color scales, and 5 points for poorly positioned legends or controls. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction smooth and seamless?", "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Map loading and rendering performance (should complete within 2 seconds) 2) Smooth transitions when changing temperature visualization settings 3) Responsive tooltip displays when interacting with temperature data. Deduct 5 points for laggy map performance, 3 points for jarring transitions between data views, and 5 points for delayed response when interacting with temperature points. The full score is 10 points.", "maxScore": 10}], "class": "Data Science-Data Visualization Dashboards", "difficulty": "easy"}
{"index": 1466, "question": "You are a coding expert. Please use your professional knowledge to generate accurate, professional responses. Be sure to provide code that is executable and displayable. Program a Solitaire card game.", "checklist": [{"id": 0, "title": "Is the core Solitaire game logic fully implemented?", "description": "Review whether the code accurately implements the classic Solitaire rules including proper foundation building (Ace to King in same suit), tableau movement (descending order with alternating colors), and stock/waste pile management. Score 0 if core game mechanics are missing, 5 if basic card movement is implemented but with rule errors, and 10 if all Solitaire rules are properly enforced with win condition detection.", "maxScore": 10}, {"id": 1, "title": "Is the card deck manipulation system well-designed?", "description": "Check the implementation of card dealing, flipping, and movement between different game areas (tableau, foundations, stock, and waste). Proper card flipping animation should be included, and the waste-to-stock recycling mechanism should be implemented. Deduct 5 points if cards cannot be properly moved between all required areas, 3 points if the recycling mechanism is missing, and 2 points if card flipping is not visually indicated. The full score is 10 points.", "maxScore": 10}, {"id": 2, "title": "Are the game's move validation and undo functionality implemented?", "description": "Evaluate whether the code includes proper move validation to prevent illegal moves and an undo system that allows players to reverse their actions. Check for multiple undo levels and proper state management. Deduct 5 points if move validation is incomplete, 5 points if undo functionality is missing, and 3 points if the undo system can only revert a single move. The full score is 10 points.", "maxScore": 10}, {"id": 3, "title": "Is the game state persistence and scoring system implemented?", "description": "Check if the game includes a way to save and restore games (local storage), and if it implements a proper scoring system (time-based, move-based, or traditional Solitaire scoring). Deduct 5 points if game saving is not implemented, 3 points if loading saved games doesn't restore the exact state, and 2 points if scoring is absent. The full score is 10 points.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as rapid clicking, illegal drag-and-drop attempts, browser refresh, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Automated smart move suggestions 2. Multiple card themes/designs 3. Statistics tracking for games played/won). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple card movement systems) 2. Function modules unrelated to Solitaire (e.g., unnecessary mini-games) 3. Fancy effects that affect performance (e.g., excessive animations that slow down gameplay). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating game logic/view/controller layers), unit test coverage, and build process automation. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the build process is not automated. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the card design and layout follow professional standards: 1) Clear card visibility (appropriate size and contrast) 2) Proper spacing between tableau columns 3) Professional color scheme for the game board (felt green or other suitable background). Deduct 3 points for cramped card layout, 5 points for poor card readability, and 5 points for unprofessional visual elements like pixelated card images. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction smooth and seamless?", "description": "Judge whether the card movements and interactions conform to user expectations: 1) Responsive drag-and-drop mechanics with visual feedback 2) Smooth card flipping animations (150-300ms) 3) Clear indication of valid drop targets. Deduct 5 points for laggy card movement, 3 points for missing drag-and-drop visual feedback, and 5 points for confusing or inconsistent interaction patterns. The full score is 10 points.", "maxScore": 10}], "class": "Game Development-Strategy", "difficulty": "medium"}
{"index": 1177, "question": "You are a code expert. Please use your professional knowledge to generate accurate, professional responses. Make sure that any code you generate is executable and can be demonstrated. Create an online-editable mind map.", "checklist": [{"id": 0, "title": "Is the core mind map rendering system fully implemented?", "description": "Check whether the code creates a complete visual mind map structure with nodes and connections using SVG/Canvas/HTML. Verify if it includes essential features like node creation, connection drawing, and hierarchical representation. Score 0 if the mind map structure is not implemented, 5 if basic node display is implemented without proper connections, and 10 if a complete hierarchical mind map with proper visualization is implemented.", "maxScore": 10}, {"id": 1, "title": "Is the editing functionality comprehensive?", "description": "Evaluate whether users can add, edit, delete, and move nodes through intuitive interactions. Check for features like inline text editing, node dragging, context menus, and keyboard shortcuts. Deduct 3 points if inline editing is missing, 3 points if drag-and-drop functionality isn't smooth, and 4 points if keyboard shortcuts aren't implemented. The full score is 10 points.", "maxScore": 10}, {"id": 2, "title": "Is the data structure design optimized for mind maps?", "description": "Assess whether the code uses an appropriate tree-like data structure that efficiently represents hierarchical relationships and supports operations like adding child nodes, reordering siblings, and collapsing/expanding branches. Check if the data model is separate from the view layer. Deduct 5 points if the data structure doesn't properly maintain parent-child relationships, and 5 points if there's no clean separation between data and presentation. The full score is 10 points.", "maxScore": 10}, {"id": 3, "title": "Are data persistence and sharing mechanisms implemented?", "description": "Verify if the mind map can be saved (locally or cloud-based) and if the implementation includes export/import functionality in standard formats (like JSON, FreeMind, etc.). Check if there's a real-time collaboration feature or sharing capability. Award 3 points for local storage implementation, 3 points for export/import functionality, and 4 points for sharing or collaboration features. The full score is 10 points.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as invalid input, browser compatibility issues, large mind maps, etc.) and provide friendly error prompts or recovery mechanisms. Check for defensive programming practices like input validation and error handling. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Auto-layout algorithms 2. Rich node formatting options 3. Image/attachment support 4. Node filtering/searching 5. Presentation mode). Add 2 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple ways to achieve the same editing operation) 2. Function modules unrelated to mind mapping (e.g., a built-in calculator) 3. Fancy effects that affect performance (e.g., excessive animations). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating data model/view/controller layers), unit test coverage, and code organization. Check for proper event handling patterns and performance optimization for large mind maps. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 3 points if the code duplication rate is too high (over 30%); deduct 2 points if there's no performance optimization for large datasets. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing and node distribution 3) Professional font system (consistent typography hierarchy, readable font sizes) 4) Intuitive visual cues for editing operations. Deduct 3 points for each crowded visual element, 3 points for a glaring color combination, and 4 points for confusing user interface elements. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction smooth and seamless?", "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Node creation/editing feedback delay ≤ 100ms 2) Smooth animations for expanding/collapsing nodes (300-500ms) 3) Responsive drag-and-drop with visual feedback 4) Clear indication of selected/active nodes. Deduct 3 points for each operation without feedback, 2 points for jerky animations during interactions, and 5 points for hard-to-use editing controls. The full score is 10 points.", "maxScore": 10}], "class": "Mermaid Flowcharts-Mind Maps", "difficulty": "easy"}
{"index": 788, "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional replies. Make sure the code you produce is executable and demonstrable. You can drag and drop folders or multiple files, the functionality remains unchanged, and display the results in table format.", "checklist": [{"id": 0, "title": "Is the code properly structured for file/folder handling?", "description": "Evaluate whether the code implements proper detection and handling of both individual files and folder structures. Check if it recursively traverses directories when needed and correctly preserves folder hierarchies. Score 0 if basic file handling is missing, 5 if only single file handling is implemented, and 10 if complete folder structure handling with proper error cases is implemented.", "maxScore": 10}, {"id": 1, "title": "Is drag and drop functionality properly implemented?", "description": "Assess whether the code correctly implements HTML5 drag and drop API with proper event handling (dragenter, dragover, dragleave, drop). Check if it prevents default browser behaviors, provides visual feedback during drag operations, and handles multiple file selections. Deduct 5 points if drag highlighting is missing, 3 points if it doesn't handle browser compatibility issues. Full score is 10 points.", "maxScore": 10}, {"id": 2, "title": "Is file processing and data extraction handled efficiently?", "description": "Review how the code extracts and processes data from various file types. Check if it uses appropriate APIs (FileReader, Blob, etc.), handles large files efficiently (e.g., streaming for large files), and properly sanitizes input data. Deduct 5 points if it lacks progress indicators for large files, 3 points if memory management for large datasets is poor. Full score is 10 points.", "maxScore": 10}, {"id": 3, "title": "Is the table display functionality properly implemented?", "description": "Evaluate whether the code effectively presents data in a well-structured table format with proper styling and layout. Check for sorting capabilities, pagination for large datasets, responsive design, and proper handling of various data types. Deduct 5 points if no sorting functionality, 3 points if the table is not responsive, and 5 points if complex data types aren't properly displayed. Full score is 10 points.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as unsupported file types, corrupted files, very large files, browser limitations, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Preview thumbnails for image files 2. Syntax highlighting for code files 3. Data visualization options for numerical data). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple file parsing methods that do the same thing) 2. Function modules unrelated to file handling and table display 3. Fancy effects that affect performance (e.g., excessive animations during file loading). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating file handling/data processing/UI rendering layers), unit test coverage, and build process automation. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the build process is not automated. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction smooth and seamless?", "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Feedback when files are being processed ≤ 200ms 2) Transition animation duration controlled between 300-500ms 3) Clear visual guidance for drop zones. Deduct 5 points for each operation without feedback, 3 points for jerky animations during table rendering, and 5 points for confusing drag and drop areas. The full score is 10 points.", "maxScore": 10}], "class": "Utility Tools-Batch Processing", "difficulty": "hard"}
{"index": 1610, "question": "You are a coding expert. Please use your professional knowledge to generate accurate and professional responses. Make sure the code you produce is executable and ready for demonstration. Please help me write a complete mini-program for medication reminders for elderly people that I can directly copy and paste for use.", "checklist": [{"id": 0, "title": "Is the medication reminder core functionality fully implemented?", "description": "Evaluate whether the code implements essential medication reminder features: scheduling reminders, setting medication details (name, dosage, frequency), notification system, and acknowledgment of taken medication. Score 0 if core functionality is missing, 5 if basic reminders are implemented without flexibility, and 10 if the system includes multiple scheduling options (daily, weekly, specific times) with medication details management.", "maxScore": 10}, {"id": 1, "title": "Is the elderly user interface properly designed for accessibility?", "description": "Check if the UI follows elderly-friendly design principles: large text (at least 16px), high contrast colors (contrast ratio ≥ 7:1), simplified navigation, clear buttons (minimum 44x44px touch targets), and minimal steps to complete tasks. Deduct 3 points for each accessibility guideline violated. Award full points only if the interface demonstrates specific considerations for elderly users including font scaling options.", "maxScore": 10}, {"id": 2, "title": "Does the application include caregiver integration features?", "description": "Assess whether the code implements caregiver monitoring capabilities: missed medication alerts, medication adherence tracking, remote monitoring dashboard, and emergency contact integration. Deduct 3 points if remote monitoring is missing, 3 points if adherence tracking is absent, and 4 points if emergency contact functionality is not implemented. The full score is 10 points.", "maxScore": 10}, {"id": 3, "title": "Is data persistence and offline functionality properly implemented?", "description": "Evaluate if the code properly handles data storage (local storage or database implementation), synchronization mechanisms, and offline functionality. Check for proper data validation, backup mechanisms, and recovery procedures. Deduct 5 points if medication data isn't persistent after app restart, and 5 points if the app requires constant internet connection to function. Full score for complete offline capability with data integrity protection.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as incorrect inputs, network interruption, system notifications being blocked, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Medication identification using camera 2. Voice-based reminders and commands 3. Adaptive reminder timing based on user habits 4. Gamification elements for medication adherence). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple notification systems coexisting) 2. Function modules unrelated to medication reminders (e.g., a built-in games section) 3. Fancy effects that affect performance (e.g., unnecessary animations that might confuse elderly users). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating data/UI/notification layers), unit test coverage, and build process automation. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the build process is not automated. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 16px for elderly users, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction smooth and seamless?", "description": "Judge whether the dynamic effects conform to elderly users' perception characteristics: 1) Clear feedback for every action 2) Transition animation duration controlled between 400-700ms (slightly longer for elderly users) 3) Obvious visual and possibly auditory cues for important actions. Deduct 5 points for each operation without feedback, 3 points for confusing transitions, and 5 points for hard-to-find key function buttons. The full score is 10 points.", "maxScore": 10}], "class": "Utility Tools-Daily Office Tasks", "difficulty": "hard"}
{"index": 1098, "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Be sure to ensure that the generated code is executable for display. Help me create a full-screen calendar webpage that includes all 12 months. The top of the page should have a year selector, and it should be able to display workdays, rest days, and holidays by importing a JSON date sequence.", "checklist": [{"id": 0, "title": "Is the full-screen calendar layout properly implemented?", "description": "Evaluate whether the HTML/CSS implementation creates a true full-screen calendar with proper grid layout for all 12 months. Check if the layout is responsive across different screen sizes and maintains proper aspect ratios. Score 0 if not full-screen, 5 if full-screen but with layout issues, and 10 if perfectly implemented with responsive design.", "maxScore": 10}, {"id": 1, "title": "Is the year selector functionality complete?", "description": "Examine if the year selector is implemented at the top of the page with proper event handling. Check for features like dropdown/input field, validation (preventing non-numeric or invalid years), and smooth year transitions that preserve view state. Deduct 3 points if only basic year changing works, 5 points if validation is missing, and 7 points if year transitions cause visual glitches. The full score is 10 points.", "maxScore": 10}, {"id": 2, "title": "Is the JSON date import mechanism correctly implemented?", "description": "Assess the code's ability to parse and display workdays, rest days, and holidays from imported JSON data. Check for proper error handling when processing malformed JSON, the presence of a loading state, and efficient data processing. Deduct 5 points if there's no error handling, 3 points if the calendar doesn't update reactively when new JSON is loaded, and 5 points if date categories (workday/rest day/holiday) aren't visually distinct. The full score is 10 points.", "maxScore": 10}, {"id": 3, "title": "Is the date rendering and visualization accurate?", "description": "Check whether the calendar correctly handles leap years, month lengths, and first day of month positioning. Verify that today's date is highlighted and dates outside the current month are visually distinguished. Deduct 5 points for each date calculation error (like incorrect leap year handling), 3 points if today's date isn't highlighted, and 5 points if the calendar grid doesn't properly align with weekdays. The full score is 10 points.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as invalid JSON data, out of range years, browser resize events, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Animation effects for month transitions 2. Keyboard shortcuts for navigation 3. Interactive tooltips for holidays with descriptions). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple date calculation methods) 2. Function modules unrelated to calendar display (e.g., unnecessary widgets) 3. Fancy effects that affect performance (e.g., excessive animations that slow down rendering). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating UI components/date logic/state management), code reusability, and the presence of comments or documentation. Deduct 5 points if global state management is chaotic or overly complex; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if there's no documentation or comments explaining complex logic. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching for different date types (workdays, rest days, holidays) 2) Proper layout spacing between months and within date cells 3) Professional typography for month names, weekday headers, and date numbers (consistent font sizes and proper contrast). Deduct 3 points for each inconsistent visual element, 5 points for poor color choices that hinder readability, and 5 points for cluttered month layouts. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction smooth and seamless?", "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Year changing response delay ≤ 100ms 2) Smooth transitions between years without jarring visual changes 3) Clear visual feedback when selecting dates or changing views. Deduct 5 points for laggy year transitions, 3 points for missing hover states on interactive elements, and 5 points if the calendar re-renders in a visually disruptive way. The full score is 10 points.", "maxScore": 10}], "class": "Web Applications-Education/Learning", "difficulty": "easy"}
{"index": 1700, "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure that the code you generate is executable for demonstration purposes. Transform the collection agreement and profit-sharing agreement into a component with a plus sign for image uploads, and also include functionality to display the uploaded images.", "checklist": [{"id": 0, "title": "Is the component structure properly implemented?", "description": "Review whether the code correctly implements a reusable component structure that integrates both collection agreement and profit-sharing agreement functionality. Check if the component uses proper encapsulation, follows component design patterns, and separates concerns. Score 0 if the component structure is missing, 5 if basic structure is implemented but lacks proper organization, and 10 if the component is well-structured, reusable, and follows best practices.", "maxScore": 10}, {"id": 1, "title": "Is the image upload functionality with plus sign UI fully implemented?", "description": "Evaluate whether the code implements a user-friendly image upload interface with a visible plus sign indicator. Check if it includes proper visual feedback during hover/click states, handles multiple image formats, provides file size validation, and includes loading states. Deduct 3 points if the plus sign UI is missing, 5 points if upload functionality doesn't work, and 2 points if there's no visual feedback during upload process. The full score is 10 points.", "maxScore": 10}, {"id": 2, "title": "Is the image display functionality properly implemented?", "description": "Check whether the uploaded images are properly displayed with appropriate sizing, formatting, and layout considerations. Evaluate if the implementation includes image preview capabilities, thumbnail generation, gallery view options, and proper handling of different aspect ratios. Deduct 5 points if images aren't displayed after upload, 3 points if the display lacks proper formatting controls, and 2 points if there's no preview functionality. The full score is 10 points.", "maxScore": 10}, {"id": 3, "title": "Is the agreement functionality properly integrated with the image component?", "description": "Assess whether both collection and profit-sharing agreement functionalities are properly integrated with the image upload/display component. Check if the agreements can be properly linked to specific uploaded images, if agreement terms are clearly presented, and if user confirmation workflows are implemented. Deduct 5 points if agreements are not connected to images, 3 points if agreement workflows are incomplete, and 3 points if agreement text is not customizable. The full score is 10 points.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as invalid file types, oversized images, network errors during upload, missing image sources, and permission issues) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Drag-and-drop image uploading 2. Image editing tools 3. Agreement template selection 4. Digital signature integration). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple image upload handlers) 2. Function modules unrelated to agreements or image management (e.g., unrelated user profile features) 3. Fancy effects that affect performance (e.g., unnecessary animations that slow down the upload process). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating UI components/business logic/API calls), unit test coverage, and build process automation. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the build process is not automated. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction smooth and seamless?", "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Click feedback delay ≤ 100ms 2) Transition animation duration controlled between 300-500ms 3) Clear visual focus guidance. Deduct 5 points for each operation without feedback, 3 points for visual after-images during fast sliding, and 5 points for hard-to-find key function buttons. The full score is 10 points.", "maxScore": 10}], "class": "Web Applications-Communication", "difficulty": "easy"}
{"index": 621, "question": "You are a code expert, please use your professional knowledge to generate accurate and professional responses. Try to ensure the generated code is executable and displayable. ======== ROLE ========\nYou are an experienced code expert. I will provide you with a software development requirement description, and you need to generate project code based on these requirements. Strictly follow the rules to help users generate complete project code with simple and easy-to-understand comments, without outputting anything else.\n\n======== OUTPUT RULES ========\n1. You should always generate complete, runnable project code, and ensure the project is fully executable\n2. Ensure all code files you output are complete, do not omit any code\n3. Before the final output, carefully review and check all code to evaluate its executability. If the code cannot be executed or contains errors, regenerate it\n4. If the requirements involve external API access or need to use user data (images, videos, audio, etc.), please provide simulated data\n\n======== PROJECT REQUIREMENTS ========\nCreate a device maintenance reminder system where maintenance cycles must be set when registering devices (based on operating hours/calendar days). The homepage should use colors to distinguish device maintenance status (green-normal, yellow-due within 7 days, red-overdue). Clicking on a device should display maintenance history records and allow adding new maintenance records (including maintenance personnel and consumables used).", "checklist": [{"id": 0, "title": "Is the device registration system with maintenance cycle setting fully implemented?", "description": "Review whether the code implements a complete device registration system allowing for setting maintenance cycles in both operating hours and calendar days. Check if it includes input validation for mandatory fields, device categorization, and handles edge cases (like negative cycle values or extremely large numbers). Score 0 if core registration functionality is missing, 5 if basic registration exists but lacks proper cycle configuration, and 10 if the registration system is comprehensive with validation and flexible cycle setting options.", "maxScore": 10}, {"id": 1, "title": "Is the color-coded device status visualization properly implemented?", "description": "Evaluate whether the status visualization accurately implements the three-tier color system (green-normal, yellow-due within 7 days, red-overdue). Verify if the color states update dynamically based on real-time calculations rather than fixed values. Check if the visualization is accessible (includes text indicators alongside colors) and handles edge cases like devices with multiple maintenance types. Deduct 5 points if color logic is inconsistent, 3 points if the visualization isn't responsive across different screen sizes.", "maxScore": 10}, {"id": 2, "title": "Is the device detail view with maintenance history records complete?", "description": "Check whether clicking on a device properly displays comprehensive maintenance history with chronological ordering and filtering options. Verify if the history view includes all relevant information (maintenance dates, personnel, actions taken, consumables used). Assess whether pagination or lazy loading is implemented for devices with extensive history. Score 0 if history viewing is not implemented, 5 if basic history exists but lacks filtering/sorting, and 10 if the history view is comprehensive and user-friendly.", "maxScore": 10}, {"id": 3, "title": "Is the maintenance record addition functionality properly implemented?", "description": "Review the new maintenance record addition functionality including form validation, personnel selection, consumables tracking, and automatic date stamping. Verify if the system recalculates next maintenance dates after new records are added. Check if maintenance personnel authentication/authorization is implemented. Deduct 5 points if form validation is missing, 3 points if there's no confirmation dialog before submission, and 2 points if consumables tracking is incomplete.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as network interruption, user input errors, database connection issues, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Predictive maintenance suggestions based on history 2. Consumables inventory management integration 3. Mobile-friendly notifications for upcoming maintenance). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple date calculation methods coexisting) 2. Function modules unrelated to maintenance tracking (e.g., a built-in weather widget) 3. Fancy effects that affect performance (e.g., unnecessary animations on the device list). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating device logic/maintenance tracking/UI layers), unit test coverage, and build process automation. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the build process is not automated. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors beyond the required status colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction smooth and seamless?", "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Click feedback delay ≤ 100ms 2) Transition animation duration controlled between 300-500ms 3) Clear visual focus guidance when switching between device list and maintenance details. Deduct 5 points for each operation without feedback, 3 points for visual after-images during fast switching between views, and 5 points for hard-to-find maintenance addition buttons. The full score is 10 points.", "maxScore": 10}], "class": "Management Systems-Frontend/Backend Platforms", "difficulty": "medium"}
{"index": 1669, "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Be sure to ensure that the generated code is executable for demonstration. Create a page with draggable directory upload functionality using HTML and JavaScript.", "checklist": [{"id": 0, "title": "Is the drag-and-drop directory upload functionality fully implemented?", "description": "Check if the code implements the core HTML5 FileSystem API with proper directory reading capabilities. Verify that it handles the 'webkitdirectory' attribute for input elements and uses DataTransfer API for drag operations. Score 0 if drag-and-drop is not implemented, 5 if only file (not directory) upload works, and 10 if full directory structure upload is supported with proper event handling.", "maxScore": 10}, {"id": 1, "title": "Is the directory structure properly maintained and displayed?", "description": "Evaluate whether the uploaded directory structure is preserved and visually represented to the user. Check if the code processes the relative paths from FileList entries and rebuilds the nested structure accurately. Deduct 5 points if folders are flattened, 3 points if subfolder nesting is limited to a single level. Award full points only if the complete directory hierarchy is preserved with proper indentation or tree visualization.", "maxScore": 10}, {"id": 2, "title": "Are appropriate file handling mechanisms implemented?", "description": "Review the implementation of file handling including type detection, size validation, and preview generation. Check if the code provides file type icons, size formatting (KB/MB), and thumbnail previews for supported formats (images, PDFs). Deduct 3 points if there's no file size limit, 4 points if file type validation is missing, and 3 points if there are no file previews. The full score is 10 points.", "maxScore": 10}, {"id": 3, "title": "Is there proper user feedback during the upload process?", "description": "Check if the code provides visual feedback for the upload process including drag-over states, progress indicators, success/error notifications, and abort capabilities. Deduct 3 points for missing drag-over visual cues, 4 points for no upload progress indicator, and 3 points for absence of completion/error feedback. The full score is 10 points.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as unsupported browsers, invalid file types, empty directories, oversized files, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Instant search within uploaded files 2. Auto-categorization of files by type 3. File preview directly in the interface). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple file parsing methods) 2. Function modules unrelated to directory upload (e.g., unnecessary analytics) 3. Fancy effects that affect performance (e.g., excessive animations). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating UI/logic/data processing layers), event delegation usage, and memory management. Deduct 5 points if global namespace pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if memory leaks are detected in large file handling. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional upload area styling (clear drop zone with proper contrast). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for an ambiguous drop target area. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction smooth and seamless?", "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Immediate visual feedback when dragging over drop zone 2) Smooth transition animations for file listing (300-500ms) 3) Clear visual hierarchy in directory tree display. Deduct 5 points for each operation without feedback, 3 points for janky animations during directory expansion, and 5 points for confusing interaction patterns. The full score is 10 points.", "maxScore": 10}], "class": "Management Systems-File Management", "difficulty": "easy"}
{"index": 7, "question": "You are a code expert, please use your professional knowledge to generate accurate and professional responses. Make sure that the code you generate is executable and can be demonstrated.\n\nPlease use HTML and JavaScript to implement a Capture and Collection game.\n\n**Task**: Implement a capturing system where players can capture certain objects or creatures in the game through specific operations, and collect them.\n\n**Hint**: You can capture objects by throwing nets or using specific items, and add them to the player's collection.\n\nPlease include comments in your code so other developers can understand your implementation process.", "checklist": [{"id": 0, "title": "Is the capture mechanism fully implemented?", "description": "Review whether the code accurately implements capture operations through HTML/JavaScript, including throwing mechanics (trajectory calculation, collision detection), capture success/failure logic, and different capture tools (nets, traps, etc.). Score 0 if core capture interaction is not implemented, 5 if only basic click-to-capture is implemented, and 10 if physics-based throwing with realistic trajectories and multiple capture methods are fully included.", "maxScore": 10}, {"id": 1, "title": "Is the collection system comprehensively designed?", "description": "Check whether the collection system includes inventory management, item categorization, rarity systems, and collection progress tracking. Evaluate if captured objects have different attributes (size, rarity, behavior patterns). Deduct 5 points if no inventory UI is provided, 3 points if objects lack unique properties, and 2 points if collection statistics are missing. The full score is 10 points.", "maxScore": 10}, {"id": 2, "title": "Are the game objects and creatures intelligently designed?", "description": "Evaluate whether capturable objects/creatures have realistic movement patterns, AI behaviors (fleeing, hiding, different speeds), and spawn mechanics. Objects should have varied difficulty levels and unique characteristics. Deduct 5 points if objects are static or move in simple patterns, 3 points if no difficulty progression exists, and 2 points if spawn timing is not balanced. The full score is 10 points.", "maxScore": 10}, {"id": 3, "title": "Is the complete game progression system constructed?", "description": "Check whether the code includes complete progression mechanics such as player levels, unlockable capture tools, achievement systems, and collection milestones. Evaluate if there are rewards for completing collections and progression feedback. Deduct 5 points if no progression tracking is implemented, 3 points if achievements are missing, and 2 points if unlock mechanisms are absent. Give 10 points if fully implemented.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as out-of-bounds input, rapid clicking, collision edge cases, inventory overflow, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Photo mode for captured creatures 2. Breeding/evolution system 3. Trading mechanism 4. Environmental interaction affecting capture rates 5. Mini-games for difficult captures). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple capture validation logics coexisting) 2. Function modules unrelated to capture/collection gameplay (e.g., built-in calculator) 3. Fancy effects that affect performance (e.g., excessive particle systems on every capture). Deduct 3 points for each redundancy found, and directly deduct 10 points if core functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating capture logic/collection management/rendering layers), code documentation quality, and maintainable structure. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if comments are insufficient or unclear. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times) 4) Clear inventory and collection UI organization. Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction smooth and seamless?", "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Capture action feedback delay ≤ 100ms 2) Transition animation duration controlled between 300-500ms 3) Clear visual focus guidance for capturable objects 4) Smooth inventory opening/closing animations. Deduct 5 points for each operation without feedback, 3 points for visual after-images during object movement, and 5 points for hard-to-identify interactive elements. The full score is 10 points.", "maxScore": 10}], "class": "Game Development-Simulation/Management", "difficulty": "medium"}
{"index": 890, "question": "You are a code expert. Please use your professional knowledge to generate accurate, expert responses. Be careful to ensure that the code you generate is executable and can be displayed. Desktop heart code creation.", "checklist": [{"id": 0, "title": "Is the desktop heart basic animation implemented correctly?", "description": "Evaluate whether the code implements a functional desktop heart animation with smooth transitions. Check if the heart shape is properly rendered using SVG/Canvas/CSS, and whether it includes proper color gradients or effects. Score 0 if no animation is present, 5 if the heart is static or has minimal animation, and 10 if it has fluid, attractive animations with proper easing functions.", "maxScore": 10}, {"id": 1, "title": "Does the desktop heart follow proper window management?", "description": "Check whether the code properly implements window management features such as 'always on top', proper z-index handling, transparency control, and clickthrough capabilities. Deduct 3 points if the window isn't set to stay on top, 4 points if it interferes with normal desktop interaction, and 3 points if it lacks proper transparency settings. The full score is 10 points.", "maxScore": 10}, {"id": 2, "title": "Are interactive features implemented for the desktop heart?", "description": "Assess whether users can interact with the heart through mouse hover, click, drag, or keyboard shortcuts. Check for event listeners and handlers. Deduct 5 points if no interaction is possible, 3 points if the interaction is limited to basic hover effects. Give 10 points if multiple interaction modes are implemented with proper feedback mechanisms.", "maxScore": 10}, {"id": 3, "title": "Is a customization system provided for the desktop heart?", "description": "Evaluate whether the code provides options to customize the heart's appearance (color, size, effects), behavior (movement patterns, response to inputs), or includes themes/skins. Deduct 3 points for each major customization category missing. Score 10 if the customization is comprehensive with a settings interface.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as screen resolution changes, system theme switches, multi-monitor setups, etc.) and provide graceful error handling or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Dynamic reactions to system time/events 2. Subtle particle effects or weather animations 3. Integration with system notifications). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant event listeners that could cause memory leaks 2. Unnecessary rendering loops when static display would suffice 3. Excessive animations that drain system resources. Deduct 3 points for each redundancy found, and directly deduct 10 points if core performance is significantly affected by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (separating animation logic/rendering/interaction handling), performance optimization techniques, and resource management. Deduct 5 points if global state pollution is found; deduct 3 points if animation frames are not properly managed; deduct 5 points if the code uses excessive CPU/memory resources. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the desktop heart design meet professional aesthetic standards?", "description": "Evaluate whether the visual design follows good principles: 1) Harmonious color palette with proper contrast 2) Appropriate size that doesn't distract from work 3) Smooth edges and proper anti-aliasing. Deduct 3 points for harsh color combinations, 3 points for pixelated or jagged rendering, and 4 points for disproportionate or oversized elements. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the desktop heart optimized for system resources?", "description": "Judge whether the implementation is optimized for desktop integration: 1) CPU usage remains below 5% when idle 2) Memory footprint under 50MB 3) Proper cleanup on window close or refresh. Deduct 5 points for each resource leak identified, 3 points for noticeable system slowdown during animation, and 5 points for missing throttling/debouncing for intensive operations. The full score is 10 points.", "maxScore": 10}], "class": "Other-Graphics Programming", "difficulty": "medium"}
{"index": 757, "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure the code you provide is executable for demonstration. Develop a Flutter app that can measure the actual distance between two points in an image through taking a photo.", "checklist": [{"id": 0, "title": "Is the core image capture functionality properly implemented?", "description": "Check whether the code properly integrates Flutter's camera API to capture high-quality images, with proper permissions handling, preview display, and image storage. The implementation should include error handling for camera unavailability scenarios. Score 0 if camera functionality is missing, 5 if basic functionality exists but with issues, and 10 if fully implemented with proper error handling and optimization for different device capabilities.", "maxScore": 10}, {"id": 1, "title": "Is the distance measurement algorithm accurate and efficient?", "description": "Evaluate whether the app uses an appropriate algorithm for calculating real-world distances from image pixels. Check if it implements either a reference object method (comparing to known-size objects) or camera parameters-based calculation (using focal length and sensor data). The algorithm should account for perspective distortion. Deduct 5 points if calculations are mathematically unsound, 3 points if the method requires complex manual calibration, and 2 points if accuracy significantly deteriorates at different distances. The full score is 10 points.", "maxScore": 10}, {"id": 2, "title": "Is the calibration system well-designed and user-friendly?", "description": "Assess the calibration mechanism that establishes the pixel-to-real-world conversion ratio. An effective system should guide users through a simple calibration process (e.g., placing a reference object of known dimensions), store calibration data, and allow recalibration. Deduct 3 points for each missing component: guided calibration UI, persistent calibration storage, or recalibration option. The full score is 10 points.", "maxScore": 10}, {"id": 3, "title": "Does the point selection interface provide precise control?", "description": "Review the interface for selecting measurement points on the image. Evaluate the precision controls (e.g., zooming capability for pixel-level selection, draggable points with visual feedback, undo/redo functionality). The interface should handle edge cases like selecting points near the image boundaries. Deduct 3 points for each missing precision feature and 5 points if points cannot be adjusted after initial placement. The full score is 10 points.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as low-light conditions, blurry images, out-of-memory errors, permission denials, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. AR visualization of measurements 2. Automatic detection of common objects for reference 3. Batch measurement of multiple distances 4. 3D depth estimation using multiple angles). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple image processing libraries doing the same job) 2. Function modules unrelated to distance measurement (e.g., unnecessary social sharing features) 3. Fancy effects that affect performance (e.g., excessive animations slowing down the measurement process). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating UI/business logic/data layers using proper Flutter architecture patterns like BLoC, Provider, or Riverpod), unit test coverage, and build process automation. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the build process is not automated. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the overall design follows Flutter Material/Cupertino design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows consistent principles) 3) Professional typography (readable font sizes, appropriate line heights). Deduct 3 points for each cluttered screen layout, 5 points for inconsistent UI elements, and 5 points for poor accessibility features (e.g., small touch targets, low contrast). The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction smooth and seamless?", "description": "Judge whether the app performance meets high standards: 1) Responsive UI with no frame drops during transitions 2) Camera preview renders at 30+ FPS 3) Image processing calculations don't block the main UI thread. Deduct 5 points for visible stuttering during point selection, 3 points for delayed feedback when adjusting measurements, and 5 points for ANR (Application Not Responding) events during image processing. The full score is 10 points.", "maxScore": 10}], "class": "Other-Mobile Measurement App", "difficulty": "hard"}
{"index": 649, "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure that the code you generate is executable whenever possible. Build a network security scanner that can detect common website security vulnerabilities such as XSS, CSRF, SQL injection, and other risks. Scanning results should be displayed by severity level (high, medium, low risk) and provide detailed vulnerability descriptions and remediation suggestions. The scanner should support scan history records and scheduled automatic scanning functionality.", "checklist": [{"id": 0, "title": "Is the core vulnerability detection engine fully implemented?", "description": "Review whether the code accurately implements detection algorithms for XSS, CSRF, SQL injection, and other common vulnerabilities. Check if the scanner includes proper payload injection, response analysis, and pattern matching mechanisms. Score 0 if core detection logic is missing, 5 if only basic vulnerability checks are implemented, and 10 if comprehensive detection covers all major OWASP Top 10 vulnerabilities with accurate identification.", "maxScore": 10}, {"id": 1, "title": "Is the network scanning and crawling mechanism properly designed?", "description": "Evaluate whether the implementation includes efficient web crawling with proper HTTP request handling, cookie management, and session tracking. Check for rate limiting, concurrent request management, and robots.txt compliance. Deduct 5 points if no rate limiting is implemented, and 3 points if the scanner doesn't handle JavaScript-rendered content. The full score is 10 points.", "maxScore": 10}, {"id": 2, "title": "Is the severity classification and risk assessment system accurate?", "description": "Check whether the code implements a comprehensive risk scoring algorithm that properly categorizes vulnerabilities into high, medium, and low severity levels based on CVSS standards or similar frameworks. Evaluate if the assessment considers exploitability, impact, and environmental factors. Deduct 5 points if severity levels are arbitrarily assigned without proper scoring methodology. The full score is 10 points.", "maxScore": 10}, {"id": 3, "title": "Are scan history and scheduled scanning features fully functional?", "description": "Verify whether the system includes persistent storage for scan results, historical data comparison, and trend analysis. Check if scheduled scanning supports cron-like configurations, proper job queuing, and failure recovery mechanisms. Deduct 5 points if data persistence is not implemented, and 3 points if the scheduling system lacks error handling. Give 10 points if fully implemented with comprehensive reporting capabilities.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as network timeouts, malformed responses, target server errors, rate limiting, etc.) and provide appropriate error handling and recovery mechanisms. Code with strong robustness should effectively handle edge cases including DNS resolution failures, SSL certificate issues, and unexpected server responses, giving 10 points. If robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes advanced features that enhance security scanning capabilities (e.g., 1. Machine learning-based anomaly detection 2. Interactive vulnerability exploitation proof-of-concept 3. Integration with threat intelligence feeds 4. Automated penetration testing workflows). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar scanning functions (e.g., multiple XSS detection engines coexisting) 2. Function modules unrelated to security scanning (e.g., built-in web server for non-scanning purposes) 3. Resource-intensive features that slow down scanning (e.g., unnecessary GUI animations during scanning). Deduct 3 points for each redundancy found, and directly deduct 10 points if core scanning functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating scanning engine/reporting/scheduling components), security considerations in code design, and proper configuration management. Deduct 5 points if sensitive data is hardcoded or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if no input validation or output sanitization is implemented. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional security tool design standards?", "description": "Evaluate whether the dashboard design follows security industry standards: 1) Clear severity color coding (red for high, yellow for medium, green for low risk) 2) Proper data visualization with charts and graphs 3) Professional layout with adequate whitespace and readable typography (body font ≥ 14px, line height ≥ 1.5). Deduct 3 points for each confusing visual element, 5 points for poor color contrast affecting readability, and 5 points for cluttered information presentation. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the scanning workflow and user interaction smooth and intuitive?", "description": "Judge whether the scanning process provides clear user feedback: 1) Real-time scanning progress indicators 2) Responsive controls with feedback delay ≤ 100ms 3) Clear navigation between scan results and detailed vulnerability information 4) Intuitive export and reporting functions. Deduct 5 points for each operation without proper feedback, 3 points for confusing navigation flow, and 5 points for hard-to-access critical functions like vulnerability details or remediation guides. The full score is 10 points.", "maxScore": 10}], "class": "Other-Security Tools", "difficulty": "medium"}
{"index": 1079, "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure the generated code is executable when possible. Create a web-based RPG game featuring a lone warrior wandering through a post-apocalyptic world. The game mechanics should include real-time combat from a top-down perspective, with the character gaining experience and leveling up after defeating enemies. During their journey, the player will acquire numerous treasures. The art style should be realistic.", "checklist": [{"id": 0, "title": "Is the core RPG character system fully implemented?", "description": "Review whether the code accurately implements the character attributes (health, experience, level, attack/defense stats), progression system, and realistic character rendering. Check if the level-up mechanics include stat improvements and provide visual feedback. Score 0 if the core character system is missing, 5 if only basic attributes are implemented, and 10 if the complete progression system with balanced difficulty curves is present.", "maxScore": 10}, {"id": 1, "title": "Is the top-down real-time combat system properly implemented?", "description": "Evaluate the combat system implementation including hitbox detection, damage calculation based on character stats, combat animations, and player control responsiveness. Check if the system includes attack cooldowns, dodge/block mechanics, and combat feedback effects. Deduct 5 points if hit detection is inaccurate, and 3 points if combat animations don't match actions. The full score is 10 points.", "maxScore": 10}, {"id": 2, "title": "Is the post-apocalyptic world environment well-designed?", "description": "Assess whether the game includes a properly rendered post-apocalyptic environment with appropriate visual elements (ruins, wasteland, etc.), obstacle collision detection, and interactive objects. Check if the world has distinct areas/zones with varying challenges. Deduct 5 points if the environment lacks thematic consistency, and 3 points if collision detection is buggy. The full score is 10 points.", "maxScore": 10}, {"id": 3, "title": "Is the treasure and inventory system complete?", "description": "Examine whether the code implements a functional inventory system with diverse treasures/items that have different effects, proper item categorization, and item usage mechanics. Check if treasures appear at appropriate intervals and if there's a balanced reward system. Deduct 5 points if the inventory UI is dysfunctional, and 3 points if item effects aren't implemented. The full score is 10 points.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as invalid player inputs, asset loading failures, browser compatibility issues, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Dynamic weather system affecting gameplay 2. Moral choice system affecting story outcomes 3. Procedurally generated environments for replayability). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple inventory systems coexisting) 2. Function modules unrelated to a post-apocalyptic RPG (e.g., a built-in social media feed) 3. Graphics effects that severely impact performance (e.g., excessive particle systems). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating game logic/view/input handling layers), asset loading optimization, and performance considerations for web environments. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if there's no optimization for mobile/desktop differences. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the realistic art style meet professional standards?", "description": "Evaluate whether the visuals achieve the required realistic style: 1) Consistent lighting and shadow effects 2) Appropriate texture resolution and detail 3) Cohesive post-apocalyptic aesthetic across all elements. Deduct 3 points for inconsistent art styles between characters and environment, 5 points for low-quality textures in prominent areas, and 5 points for animations that break immersion. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the game performance and responsiveness optimized?", "description": "Judge whether the game runs smoothly in a browser environment: 1) Maintains consistent 30+ FPS during combat 2) Input response time under 100ms 3) Efficient asset loading with appropriate preloading strategy. Deduct 5 points for each noticeable frame rate drop during standard gameplay, 3 points for input lag over 200ms, and 5 points if the game causes browser crashes when testing on mid-range devices. The full score is 10 points.", "maxScore": 10}], "class": "Game Development-Role-Playing", "difficulty": "hard"}
{"index": 10, "question": "You are a code expert. Please use your professional knowledge to provide accurate and professional responses. Make sure the generated code is executable for demonstration purposes. I'd like to make a JS simulation of a sphere where the universe of Conway's Game of Life is unfolding, multicolor, lots of small squares, on a black background.", "checklist": [{"id": 0, "title": "Is Conway's Game of Life algorithm correctly implemented?", "description": "Review whether the code accurately implements Conway's Game of Life rules: 1) Live cells with 2-3 neighbors survive 2) Dead cells with exactly 3 neighbors become alive 3) All other cells die or remain dead. Check if the algorithm uses proper neighbor counting for spherical topology (handling pole singularities and longitude wrapping). Score 0 if core rules are missing, 5 if basic rules work but topology is incorrect, 10 if fully implemented with proper spherical neighbor calculation.", "maxScore": 10}, {"id": 1, "title": "Is the spherical 3D visualization properly rendered?", "description": "Evaluate whether the sphere rendering uses appropriate 3D graphics (WebGL/Three.js) with correct UV mapping for cellular automata grid projection. Check if the sphere maintains consistent cell size across surface, handles texture distortion at poles, and implements proper camera controls (rotation, zoom). Deduct 5 points if using 2D approximation instead of true 3D sphere, 3 points if pole distortion is severe. Full score requires smooth sphere with uniform cell distribution.", "maxScore": 10}, {"id": 2, "title": "Are multicolor visual effects and animations implemented effectively?", "description": "Check whether the visualization includes dynamic color systems: 1) Different colors for cell states/ages 2) Smooth color transitions during state changes 3) Visually appealing color palette against black background. Evaluate animation smoothness (60fps target) and visual clarity of individual cells. Deduct 5 points if colors are static or harsh, 3 points if animation stutters or cells are hard to distinguish. Requires color coding system and smooth real-time updates.", "maxScore": 10}, {"id": 3, "title": "Is the grid resolution and performance optimization adequate?", "description": "Assess whether the implementation supports 'lots of small squares' (minimum 100x50 grid resolution) while maintaining smooth performance. Check for optimization techniques like efficient neighbor calculation, WebGL batching, or delta-based updates. Evaluate if the system can handle multiple generations without performance degradation. Deduct 5 points if grid resolution is too low (<50x25), 5 points if frame rate drops below 30fps, 3 points if memory usage grows unbounded over time.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as WebGL context loss, browser compatibility issues, extreme zoom levels, invalid initial patterns, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should gracefully degrade on older browsers and handle edge cases effectively, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Interactive seeding by clicking on sphere 2. Multiple preset patterns (gliders, oscillators) adapted for spherical topology 3. Speed controls and generation counter 4. Cell age visualization with color gradients 5. Export/import pattern functionality). Add 2 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple rendering pipelines coexisting) 2. Function modules unrelated to Game of Life simulation (e.g., built-in audio player) 3. Fancy effects that severely impact performance (e.g., excessive particle systems, complex shaders). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core simulation performance is compromised by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating game logic/rendering/input handling), code organization, and maintainability. Check for proper separation of concerns between Game of Life engine and 3D visualization. Deduct 5 points if global state pollution is found or no clear architecture; deduct 5 points if the code duplication rate is too high (over 30%); deduct 3 points if hardcoded magic numbers are excessive. The full score requires clean, well-structured code with clear separation of responsibilities.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the overall design follows modern 3D visualization principles: 1) High contrast multicolor cells against pure black background for optimal visibility 2) Appropriate cell size ensuring individual squares are distinguishable 3) Professional color palette with sufficient variety but visual harmony 4) Clean UI controls if present. Deduct 3 points for poor color choices that reduce visibility, 5 points if cells are too small/large to distinguish effectively, 5 points for cluttered or unprofessional visual appearance.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction smooth and seamless?", "description": "Judge whether the 3D interaction and animation conform to user expectations: 1) Smooth sphere rotation with mouse/touch controls 2) Responsive zoom without breaking cell visibility 3) Consistent animation timing for Game of Life generations 4) Immediate visual feedback for any interactive elements. Deduct 5 points for laggy or jerky sphere manipulation, 3 points for inconsistent animation timing, 5 points for unresponsive controls or poor camera behavior. Full score requires fluid 60fps 3D interaction.", "maxScore": 10}], "class": "Simulation & Modeling-Mathematical Abstraction", "difficulty": "medium"}
{"index": 657, "question": "You are a code expert. Please utilize your professional knowledge to generate accurate, expert responses. Pay attention to ensuring that the generated code is executable for demonstration. Create an academic conference submission system that supports PDF paper uploads and automatically checks format standards (pages, font, margins). Provide double-blind review mode (automatically removing author information) and support submission progress tracking on PC/mobile devices. Include plagiarism detection status indicators (integrated with Turnitin).", "checklist": [{"id": 0, "title": "Is the PDF upload and format validation system fully implemented?", "description": "Review whether the code implements a complete PDF upload system with format validation functionalities including page count verification, font detection, and margin measurement. Score 0 if uploading is not implemented, 5 if only basic PDF uploading works without validation, and 10 if all format validations are correctly implemented with appropriate error handling and user feedback.", "maxScore": 10}, {"id": 1, "title": "Is the double-blind review mode properly implemented?", "description": "Evaluate whether the system can automatically detect and remove author information from submitted PDFs and metadata. Check for watermarking or other techniques to track submissions anonymously. Deduct 5 points if author information is only removed from metadata but not from the PDF content, and 3 points if the anonymization process is not reversible for administrators. The full score is 10 points.", "maxScore": 10}, {"id": 2, "title": "Is the submission tracking functionality cross-platform compatible?", "description": "Check whether the tracking system works seamlessly on both PC and mobile devices with responsive design principles. Verify if real-time status updates are implemented and if the interface adapts appropriately to different screen sizes. Deduct 3 points for non-responsive designs, 5 points if mobile experience is significantly degraded, and 5 points if real-time updates require manual refresh. The full score is 10 points.", "maxScore": 10}, {"id": 3, "title": "Is the Turnitin plagiarism detection integration implemented effectively?", "description": "Assess whether the code includes proper API integration with Turnitin or similar plagiarism detection services, with appropriate status indicators and result visualization. Check for proper error handling if the service is unavailable and queueing mechanisms for large volumes. Deduct 5 points if only mock integration is provided, and 3 points if results are not clearly visualized. The full score is 10 points.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as corrupted PDFs, network interruptions, session timeouts, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. AI-based format suggestion engine 2. Automated citation validation 3. Interactive submission workflow with progress visualization). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple file validation systems coexisting) 2. Function modules unrelated to academic submission (e.g., extensive social sharing features) 3. Fancy effects that affect performance (e.g., heavy animations on status pages). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating storage/validation/UI layers), unit test coverage, and build process automation. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the build process is not automated. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching appropriate for academic contexts (professional, understated palette) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for inappropriate color combinations, and 5 points for chaotic text-image layout. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction smooth and seamless?", "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Upload feedback with clear progress indicators 2) Transition animation duration controlled between 300-500ms 3) Clear visual focus guidance for multi-step submission process. Deduct 5 points for each operation without feedback, 3 points for jarring state transitions, and 5 points for confusing navigation in the submission workflow. The full score is 10 points.", "maxScore": 10}], "class": "Management Systems-Frontend/Backend Platforms", "difficulty": "medium"}
{"index": 1218, "question": "You are a code expert, please use your professional knowledge to generate accurate and professional responses. Make sure that the code you generate is executable when possible. Create a software similar to Anki using PySide6, but without the spaced repetition scheduling - only include options for random, sequential, or reverse order.", "checklist": [{"id": 0, "title": "Is the core flashcard review functionality implemented?", "description": "Review whether the code includes the essential flashcard functions: adding cards, viewing cards, flipping/revealing answers, and marking cards as correct/incorrect. The implementation should handle different card types (text, images) and support basic styling. Score 0 if there's no functional review system, 5 if only basic text cards are supported, and 10 if it includes multiple card types with proper navigation.", "maxScore": 10}, {"id": 1, "title": "Are the three required card ordering modes correctly implemented?", "description": "Check if the application properly implements random, sequential, and reverse order card review modes. The random mode should use a proper randomization algorithm (not pseudo-random patterns), sequential should maintain deck order, and reverse should correctly invert the sequence. Deduct 3 points if any mode is missing, 5 points if the randomization has obvious patterns, and 3 points if mode switching causes state issues. The full score is 10 points.", "maxScore": 10}, {"id": 2, "title": "Is the card management system complete?", "description": "Evaluate if the code provides comprehensive card management features including creating decks, adding/editing/deleting cards, organizing cards into categories/decks, and importing/exporting functionality. Deduct 5 points if editing capabilities are missing, 3 points if there's no export/import function, and 5 points if deck organization is insufficient. The full score is 10 points.", "maxScore": 10}, {"id": 3, "title": "Is PySide6 utilized properly and effectively?", "description": "Assess whether the implementation uses PySide6 components appropriately - proper use of widgets (QLabel, QPushButton, etc.), layouts (QVBoxLayout, QGridLayout, etc.), signals/slots mechanism for event handling, and style sheets for visual customization. Deduct 5 points for using direct Tkinter or other frameworks instead of PySide6, 3 points for poor widget hierarchy, and 3 points for not utilizing Qt's signal-slot mechanism. The full score is 10 points.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as invalid card formats, database corruption, file permission issues, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Card statistics and progress tracking 2. Custom card templates or formatting 3. Light/dark mode support). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple ways to view statistics) 2. Function modules unrelated to flashcard review (e.g., a built-in calculator) 3. Fancy effects that affect performance (e.g., excessive animations). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating card logic/UI/data persistence layers), unit test coverage, and build process automation. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the build process is not automated. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction smooth and seamless?", "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Click feedback delay ≤ 100ms 2) Transition animation duration controlled between 300-500ms 3) Clear visual focus guidance. Deduct 5 points for each operation without feedback, 3 points for visual after-images during transitions, and 5 points for hard-to-find key function buttons. The full score is 10 points.", "maxScore": 10}], "class": "Web Applications-Education/Learning", "difficulty": "easy"}
{"index": 90, "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure the generated code is executable for demonstration.\nPlease help me implement the following requirement using code. Create a camera taking a photo with a shutter using SVG code.", "checklist": [{"id": 0, "title": "Is the SVG camera structure accurately implemented?", "description": "Review whether the code accurately implements the camera body structure through SVG elements, including essential components like camera body, lens, viewfinder, and flash. The structure should be proportionally correct and visually recognizable as a camera. Score 0 if basic camera shape is missing, 5 if only basic rectangular body is implemented, and 10 if all major camera components are detailed and proportionally accurate.", "maxScore": 10}, {"id": 1, "title": "Is the shutter mechanism fully functional?", "description": "Check whether the shutter animation is implemented with realistic behavior, including shutter blade movement, opening/closing sequence, and proper timing. The shutter should have visual feedback that mimics real camera operation. Deduct 5 points if shutter animation is too simplistic, and 3 points if timing feels unnatural. Full score requires smooth, realistic shutter blade animation with proper easing functions.", "maxScore": 10}, {"id": 2, "title": "Is the photo-taking interaction complete?", "description": "Evaluate whether the photo-taking process includes complete user interaction flow: shutter button press, camera shake effect, flash animation, and capture confirmation. The interaction should feel responsive and provide clear visual feedback. Deduct 5 points if missing flash effect, 3 points if no camera shake simulation, and 2 points if shutter button lacks proper hover/active states. Full implementation scores 10 points.", "maxScore": 10}, {"id": 3, "title": "Are the visual effects and animations polished?", "description": "Check whether the code includes polished visual effects such as lens reflection, proper lighting gradients, shadow effects, and smooth transitions. The camera should have realistic material textures and professional visual appeal. Deduct 5 points if effects look flat or amateur, 3 points if gradients and shadows are poorly implemented, and 2 points if lens lacks realistic reflection effects. Full score requires professional-grade visual polish.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as rapid clicking, browser compatibility issues, animation interruptions, etc.) and provide stable performance across different scenarios. Code with strong robustness should effectively handle edge cases and maintain smooth operation. Give 10 points for excellent error handling, 5 points for average robustness, and 0 points if no exception handling is present.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Multiple camera angles or perspectives 2. Realistic sound effect integration 3. Photo preview/gallery feature 4. Different camera models/styles 5. Zoom functionality). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple animation triggers for same effect) 2. Function modules unrelated to camera operation (e.g., built-in games or irrelevant widgets) 3. Overly complex effects that affect performance (e.g., excessive particle systems or heavy filters). Deduct 3 points for each redundancy found, and directly deduct 10 points if core camera functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review code organization, SVG structure cleanliness, CSS/JavaScript separation, and reusability. Check for proper use of SVG groups, clean DOM structure, and maintainable code patterns. Deduct 5 points if SVG structure is chaotic or lacks proper grouping; deduct 5 points if inline styles are overused instead of CSS classes; deduct 5 points if code lacks modularity and reusability. Full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching with realistic camera colors (blacks, silvers, grays) 2) Proper proportions and realistic scaling 3) Professional visual hierarchy and clean composition. Deduct 3 points for each unrealistic color choice, 5 points for poor proportional relationships, and 5 points for cluttered or unprofessional visual presentation. Full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction smooth and seamless?", "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Button press feedback delay ≤ 100ms 2) Shutter animation duration feels natural (typically 200-400ms) 3) Clear visual focus and interaction states 4) Smooth transitions without jarring movements. Deduct 5 points for each sluggish interaction, 3 points for unnatural animation timing, and 5 points for unclear interaction feedback. Full score is 10 points.", "maxScore": 10}], "class": "SVG Generation-SVG Images", "difficulty": "hard"}
{"index": 1027, "question": "You are a code expert, please use your professional knowledge to generate accurate and professional responses. Make sure that the generated code is executable for demonstration. Help me write a web-based vocabulary learning program that allows importing words from external sources, with a beautiful and eye-catching interface.", "checklist": [{"id": 0, "title": "Is the word importing mechanism fully implemented?", "description": "Review whether the code properly implements mechanisms for importing vocabulary from multiple external sources (e.g., file upload, API integration, copy-paste). Check if it handles different formats (CSV, TXT, JSON) and provides validation for imported data. Score 0 if importing is not implemented, 5 if only basic single-format importing exists, and 10 if comprehensive multi-source importing with validation is included.", "maxScore": 10}, {"id": 1, "title": "Is the vocabulary storage and management system well-designed?", "description": "Evaluate the data structure design for vocabulary storage. Check if it includes proper organization (categories, tags, difficulty levels), search functionality, sorting options, and persistent storage (localStorage, IndexedDB). Deduct 3 points if there's no search function, 3 points if persistent storage is missing, and 4 points if the data structure doesn't support word categorization. The full score is 10 points.", "maxScore": 10}, {"id": 2, "title": "Are effective learning methods and review algorithms implemented?", "description": "Check if the application implements spaced repetition algorithms (like Leitner system or SuperMemo), progress tracking, and adaptive learning paths. Assess if the review schedules adjust based on user performance. Deduct 5 points if no spaced repetition is implemented, 3 points if progress tracking is missing, and 2 points if there's no adaptivity in the learning sequence. The full score is 10 points.", "maxScore": 10}, {"id": 3, "title": "Is the user interaction for vocabulary learning engaging?", "description": "Evaluate whether the code includes multiple learning modes (e.g., flashcards, quizzes, matching games) and provides meaningful feedback for learners. Check if different memory reinforcement techniques are used and if there's variety in the practice methods. Score 0 if only basic word display exists, 5 if there's one interactive mode with feedback, and 10 if multiple engaging learning methods are implemented.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as invalid imports, browser storage limitations, network issues during API calls, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the learning experience (e.g., 1. Visual mnemonics for vocabulary 2. Audio pronunciation integration 3. Gamification elements with rewards/streaks 4. Social sharing of progress). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple overlapping storage mechanisms) 2. Function modules unrelated to vocabulary learning 3. Fancy effects that affect loading performance and distract from learning. Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating data/view/controller layers), component reusability, and code maintainability. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if there's no error handling or input validation. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Typography hierarchy (clear distinction between headings and content). Deduct 3 points for each cluttered section, 5 points for inconsistent design patterns, and 5 points for poor responsiveness on different screen sizes. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction smooth and seamless?", "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Click feedback delay ≤ 100ms 2) Transition animation duration controlled between 300-500ms 3) Clear visual feedback for learning progress. Deduct 5 points for each operation without feedback, 3 points for jarring transitions between learning activities, and 5 points for confusing navigation patterns. The full score is 10 points.", "maxScore": 10}], "class": "Web Applications-Education/Learning", "difficulty": "medium"}
{"index": 1010, "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Be careful to ensure that the generated code is executable for display. Plot the X and Y values on a chart control named GoldenCutChart, and draw a trend line for these points. The x-axis title should be \"Mechanical Drilling Speed m/h\" and the y-axis title should be \"Single Drill Bit Footage m\".", "checklist": [{"id": 0, "title": "Is the chart properly initialized with correct structure?", "description": "Examine whether the code initializes a chart with proper canvas/SVG elements, sets up dimensions correctly, and includes appropriate margins. The chart should have a defined container with proper styling. Deduct 5 points if responsive design is missing, 3 points if the chart lacks proper sizing attributes, and 5 points if basic structure is incomplete.", "maxScore": 10}, {"id": 1, "title": "Are the X and Y axes correctly implemented with proper titles?", "description": "Verify that axes are properly scaled, labeled with \"Mechanical Drilling Speed m/h\" for X-axis and \"Single Drill Bit Footage m\" for Y-axis. Check if font size, style, and positioning of titles are appropriate. Deduct 3 points for missing/incorrect titles, 2 points for poorly scaled axes, and 3 points for improper tick formatting.", "maxScore": 10}, {"id": 2, "title": "Is the data visualization (points) correctly implemented?", "description": "Evaluate whether data points are properly plotted with appropriate markers (circles, squares, etc.), sizes, and colors. Check if the points are correctly positioned based on X and Y coordinates. Deduct 5 points if points are missing or incorrectly plotted, 3 points for poor marker choice/styling, and 2 points for missing hover effects.", "maxScore": 10}, {"id": 3, "title": "Is the trend line properly calculated and displayed?", "description": "Assess whether a proper algorithm (linear regression, etc.) is used to calculate the trend line, and whether it's correctly rendered on the chart. Check if the trend line color/style differs from data points for clarity. Deduct 5 points if the trend line calculation is incorrect, 3 points if styling is poor, and 5 points if the trend line is missing.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as empty data sets, outliers, different screen sizes, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Interactive tooltips showing exact values 2. Animation when loading data 3. Zoom/pan functionality for exploring data). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar visualization functions 2. Function modules unrelated to the chart (e.g., unnecessary UI elements) 3. Fancy effects that affect performance (e.g., excessive animations). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating data processing/visualization/interaction layers), code reusability, and implementation elegance. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the code lacks comments or is poorly organized. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the chart follows modern visualization principles: 1) Harmonious color scheme (no more than 3 primary colors) 2) Proper spacing and alignment (consistent margins and padding) 3) Professional typography (clear, readable font sizes and styles). Deduct 3 points for poor color choices, 3 points for inconsistent spacing, and 4 points for unprofessional typography. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction smooth and seamless?", "description": "Judge whether the dynamic effects conform to human perception: 1) Responsive hover/click interactions with feedback ≤ 100ms 2) Smooth transitions when updating data or resizing 3) Clear focus states for interactive elements. Deduct 4 points for laggy interactions, 3 points for abrupt transitions, and 3 points for confusing interactive elements. The full score is 10 points.", "maxScore": 10}], "class": "Data Science-Data Visualization Dashboards", "difficulty": "easy"}
{"index": 1178, "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Be sure to ensure that the code you generate can be executed and displayed. Generate a source code for a card-style, left-right distributed waterfall flow mini-program.", "checklist": [{"id": 0, "title": "Is the waterfall flow layout correctly implemented?", "description": "Review whether the code accurately implements a left-right distributed waterfall layout where cards dynamically fill columns based on height. Check if items are properly assigned to the shortest column first. Score 0 if the layout is not implemented, 5 if it's basic but has alignment issues, and 10 if it handles dynamic content heights perfectly with proper column balancing.", "maxScore": 10}, {"id": 1, "title": "Is the card component properly designed?", "description": "Evaluate the card component structure, including content containers, image handling, text formatting, and responsive design. Check if cards handle various content types (images, text, etc.) with proper aspect ratios and formatting. Deduct 3 points if images aren't optimized, 3 points if text overflow isn't handled, and 3 points if cards lack proper padding/margins. Full score is 10 points.", "maxScore": 10}, {"id": 2, "title": "Is the infinite scrolling mechanism implemented?", "description": "Check whether the code includes efficient lazy loading with intersection observers or scroll events for continuous content loading. Evaluate if it implements proper thresholds to trigger loading before reaching the bottom and includes loading indicators. Deduct 5 points for missing loading states, 5 points for performance bottlenecks during scrolling. Full score is 10 points.", "maxScore": 10}, {"id": 3, "title": "Are mini-program specific features properly utilized?", "description": "Assess whether the implementation leverages mini-program specific capabilities (like wx:for, setData optimizations for WeChat, or equivalent for other platforms). Check for platform adaptation code and proper component lifecycle management. Deduct 3 points for each missed optimization opportunity, 5 points if no platform-specific features are used at all. Full score is 10 points.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as network errors when loading images, varying screen sizes, empty data sets, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Card animations on appearance 2. Pull-to-refresh with custom animations 3. Card interaction effects like swipe actions). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant calculation of column heights 2. Unnecessary rerendering of the entire waterfall when only appending items 3. Heavy animations that affect scrolling performance. Deduct 3 points for each redundancy found, and directly deduct 10 points if the core waterfall functionality is compromised by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating waterfall layout logic from data fetching and rendering), reusability of components, and code organization. Deduct 5 points if global state pollution is found; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if there's no separation between business logic and UI components. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the card design follows modern design principles: 1) Consistent card styling with proper shadow depth 2) Proper content padding within cards (following the 8px or 16px grid) 3) Balanced negative space between cards. Deduct 3 points for inconsistent card sizes, 5 points for poor typography hierarchy, and 5 points for improper image handling (stretching/distortion). The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction smooth and seamless?", "description": "Judge whether the scrolling performance and card loading animations conform to standards: 1) Smooth 60fps scrolling without jank 2) Graceful card appearance animations (fade/slide) under 300ms 3) No layout shifts when new content loads. Deduct 5 points for each visible frame drop during scrolling, 3 points for abrupt content appearances, and 5 points for content jumps during loading. The full score is 10 points.", "maxScore": 10}], "class": "Other-Mini-Program Development", "difficulty": "medium"}
{"index": 885, "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Be sure to provide executable code when possible. Help me develop a React app that is compatible with both Android and iOS.", "checklist": [{"id": 0, "title": "Is the React Native cross-platform framework properly implemented?", "description": "Review whether the code correctly uses React Native components and APIs that are compatible with both Android and iOS platforms. Check if platform-specific code is properly separated using Platform.OS or platform-specific file extensions (.android.js, .ios.js). Score 0 if using web-only React components, 5 if basic cross-platform components are used but lacks platform optimization, and 10 if comprehensive platform-specific adaptations are implemented with proper fallback mechanisms.", "maxScore": 10}, {"id": 1, "title": "Are native device features and permissions properly integrated?", "description": "Evaluate whether the app correctly implements native device capabilities (camera, GPS, push notifications, file system access) with proper permission handling for both platforms. Check if the code includes runtime permission requests for Android 6+ and iOS privacy descriptions. Deduct 5 points if permissions are not properly requested, and 3 points if there's no graceful degradation when permissions are denied. The full score is 10 points.", "maxScore": 10}, {"id": 2, "title": "Is the navigation and routing system cross-platform compatible?", "description": "Check whether the navigation implementation (React Navigation or similar) properly handles platform-specific navigation patterns - Android back button behavior, iOS swipe gestures, and platform-appropriate transitions. Evaluate if deep linking works on both platforms and if the navigation state is properly managed. Deduct 5 points if platform-specific navigation behaviors are not handled, and 3 points if deep linking is incomplete. The full score is 10 points.", "maxScore": 10}, {"id": 3, "title": "Is the build and deployment pipeline configured for both platforms?", "description": "Review whether the project includes proper build configurations for both Android (gradle files, signing configs) and iOS (Xcode project, provisioning profiles). Check if automated build scripts, environment-specific configurations, and continuous integration/deployment are set up. Deduct 5 points if build configurations are incomplete for either platform, and 5 points if no automated deployment pipeline exists. The full score is 10 points.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as network failures, device orientation changes, app backgrounding/foregrounding, memory warnings, etc.) and provide friendly error boundaries or recovery mechanisms. Code with strong robustness should effectively handle these mobile-specific edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes impressive features that enhance the mobile experience (e.g., 1. Advanced gesture recognition 2. Offline-first data synchronization 3. Adaptive UI based on device capabilities 4. Integration with platform-specific features like Siri Shortcuts or Android Widgets). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant platform-specific implementations (e.g., duplicate navigation logic for iOS/Android) 2. Unnecessary third-party libraries that increase bundle size 3. Over-engineered animations that impact performance on lower-end devices. Deduct 3 points for each redundancy found, and directly deduct 10 points if the core mobile functionality is interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular architecture (proper separation of business logic, UI components, and platform-specific code), TypeScript usage, testing setup (unit tests, integration tests, E2E tests), and code organization. Deduct 5 points if there's poor state management or missing type definitions; deduct 5 points if test coverage is below 70%; deduct 5 points if the project structure doesn't follow React Native best practices. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface design meet mobile platform standards?", "description": "Evaluate whether the UI follows platform-specific design guidelines (Material Design for Android, Human Interface Guidelines for iOS): 1) Appropriate touch target sizes (minimum 44pt for iOS, 48dp for Android) 2) Platform-consistent navigation patterns and visual elements 3) Proper handling of different screen densities and safe areas. Deduct 3 points for each non-platform-compliant UI element, 5 points for poor touch accessibility, and 5 points for inconsistent visual hierarchy. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the mobile interaction smooth and performant?", "description": "Judge whether the app performance meets mobile standards: 1) App startup time ≤ 3 seconds 2) 60fps scrolling and animations with no frame drops 3) Proper memory management without leaks 4) Responsive touch interactions with appropriate haptic feedback. Deduct 5 points for each performance bottleneck identified, 3 points for janky animations or slow transitions, and 5 points for poor touch responsiveness. The full score is 10 points.", "maxScore": 10}], "class": "Other-Mobile App Development", "difficulty": "medium"}
{"index": 272, "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Be sure to provide executable code examples whenever possible. I am referring to AI-integrated frontend development scaffolding tools like Vue and React.", "checklist": [{"id": 0, "title": "Is the AI integration framework clearly defined and properly implemented?", "description": "Check if the code defines a clear integration pattern for AI services with frontend frameworks. Score 0 if no integration architecture is defined, 5 if basic API calls are implemented without proper state management, and 10 if a comprehensive pattern (e.g., middleware, hooks, composables) is established that handles API calls, response processing, error states and loading indicators. The integration should follow the idiomatic patterns of the chosen framework (Vue/React).", "maxScore": 10}, {"id": 1, "title": "Are the AI service connections properly abstracted and reusable?", "description": "Evaluate if the code properly abstracts AI service connections through service layers or custom hooks/composables. The abstraction should handle authentication, rate limiting, request formatting, and response normalization. Deduct 3 points if authentication is hardcoded, 3 points if there's no error handling strategy, and 2 points if response parsing is inconsistent. The implementation should enable reusability across components. The full score is 10 points.", "maxScore": 10}, {"id": 2, "title": "Does the scaffolding include proper state management for AI operations?", "description": "Review the state management implementation for AI operations, checking for proper handling of loading states, error states, partial results, and caching strategies. For Vue, look for Pinia/Vuex integration or composable patterns; for React, check for Context API, Redux, or custom hooks. Deduct 3 points if loading states are missing, 3 points for inadequate error handling, and 4 points if no caching/memoization strategy exists. The full score is 10 points.", "maxScore": 10}, {"id": 3, "title": "Is there a comprehensive set of AI-enhanced UI components?", "description": "Assess the implementation of AI-enhanced UI components such as predictive inputs, content generation tools, recommendation systems, or intelligent forms. Score 0 if no AI-enhanced components exist, 5 if basic components are implemented but lack customization options, and 10 if the code includes a diverse set of polished, reusable AI components with proper documentation and examples. Components should follow the design system of the chosen framework.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as API failures, rate limiting, token expiration, malformed AI responses, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Real-time feedback during AI generation 2. Explainable AI visualizations 3. Progressive AI enhancement based on user interaction patterns). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar AI integrations (e.g., multiple implementations of the same capability) 2. Function modules unrelated to the core AI integration (e.g., unnecessary analytics) 3. Heavyweight dependencies that could affect performance (e.g., including full ML libraries in the frontend). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating AI service/UI components/application logic), unit test coverage for AI integrations, and build process optimization. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the build process doesn't handle AI service environment variables securely. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the AI-integrated components follow modern design principles: 1) Consistent visual language with the rest of the application 2) Clear indication of AI-generated vs. user content 3) Professional loading and error states for AI operations. Deduct 3 points for inconsistent AI component styling, 5 points for confusing AI-generated content presentation, and 5 points for jarring transitions between AI and non-AI elements. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction with AI features smooth and seamless?", "description": "Judge whether the AI interaction patterns conform to human perception characteristics: 1) Progressive feedback during long-running AI operations 2) Appropriate throttling/debouncing of AI requests 3) Clear visual indication of when AI is processing input. Deduct 5 points for each AI operation without feedback, 3 points for jarring UI updates when AI responses arrive, and 5 points for AI features that block the UI thread. The full score is 10 points.", "maxScore": 10}], "class": "Other-Frontend Development Tools", "difficulty": "hard"}
{"index": 81, "question": "You are a code expert, please utilize your professional knowledge to generate accurate and professional responses. Be sure to generate executable code when possible. Please help me implement this SVG image using code. Play video games with a Nintendo controller and icons by hour for minimal recreation.", "checklist": [{"id": 0, "title": "Is the Nintendo controller accurately rendered in SVG?", "description": "Check if the SVG code properly renders a recognizable Nintendo controller with accurate proportions, buttons (D-pad, A/B buttons, Start/Select), and characteristic shape. Score 0 if the controller is unrecognizable, 5 if basic shape is present but details are missing, and 10 if the controller is detailed and visually accurate.", "maxScore": 10}, {"id": 1, "title": "Are the game icons by hour implemented correctly?", "description": "Evaluate whether the code implements distinct game icons that change by hour as requested. Each icon should be recognizable and thematically appropriate. Deduct 5 points if icons don't change by hour programmatically, 3 points if fewer than 4 different icons are implemented. Give full points if at least 8 distinct icons are available with hour-based logic.", "maxScore": 10}, {"id": 2, "title": "Is the time functionality properly implemented?", "description": "Check whether the code correctly retrieves the current hour and uses it to determine which game icon to display. The implementation should handle all 24 hours appropriately and update without requiring page refresh. Deduct 5 points if static time is used, 3 points if the hour detection has bugs. Full points require accurate time detection with smooth transitions.", "maxScore": 10}, {"id": 3, "title": "Is the 'minimal recreation' design aesthetic maintained?", "description": "Assess whether the design follows minimalist principles with clean lines, appropriate negative space, and restrained color palette. The visual elements should be simplified but recognizable. Deduct 5 points for unnecessary visual complexity, 3 points for overcrowded elements. The full 10 points requires elegant simplicity while maintaining clarity.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as browser compatibility issues, SVG rendering problems, time retrieval errors) and provide fallbacks or error handling. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Controller button animations when clicked 2. Smooth transitions between hour changes 3. Interactive elements that respond to user input). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant SVG elements or paths that could be optimized 2. Unnecessary JavaScript functions or variables 3. Excessive styling or animations that don't contribute to the minimal aesthetic. Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating rendering/logic/styling), code reusability, and maintainability. Deduct 5 points if global namespace pollution is found; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if SVG paths are not optimized for performance. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper proportions and alignment of SVG elements 3) Professional use of space and balance. Deduct 3 points for each poorly aligned element, 5 points for clashing colors, and 5 points for imbalanced composition. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction smooth and seamless?", "description": "Judge whether any dynamic effects conform to human perception characteristics: 1) Visual feedback for time changes ≤ 100ms 2) Transition animation duration controlled between 300-500ms 3) Clear visual indication of current hour. Deduct 5 points if hour changes have no visual feedback, 3 points for jarring transitions, and 5 points for confusing temporal indicators. The full score is 10 points.", "maxScore": 10}], "class": "SVG Generation-SVG Icons/Logos", "difficulty": "hard"}
{"index": 1022, "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure the code you generate is executable for display purposes. Create a homepage for an electronic product that includes product introduction, driver downloads, and after-sales service.", "checklist": [{"id": 0, "title": "Is the product introduction section comprehensively implemented?", "description": "Review whether the code includes complete product showcase functionality through HTML/CSS/JavaScript, including product image carousel, detailed specifications table, feature highlights, and comparison charts. Score 0 if only basic text description is provided, 5 if product images and basic specs are included, and 10 if interactive product demos, 360-degree views, or video presentations are fully implemented with responsive design.", "maxScore": 10}, {"id": 1, "title": "Is the driver download functionality properly structured?", "description": "Check whether the download section includes automatic OS detection, version compatibility checking, download progress tracking, and file integrity verification. The implementation should support categorized downloads (by product model/OS/version) with search and filter capabilities. Deduct 5 points if no automatic OS detection, 3 points if missing download progress indication, and 2 points if no file verification mechanism. Full score requires secure download links with bandwidth optimization.", "maxScore": 10}, {"id": 2, "title": "Is the after-sales service system well-designed and functional?", "description": "Evaluate whether the service section includes multiple contact methods (live chat, ticket system, FAQ search), warranty status checker, and service request forms with file upload capability. Should implement real-time chat integration or callback request system. Deduct 5 points if only static contact information is provided, 3 points if missing interactive support features, and 2 points if no warranty/service status tracking functionality.", "maxScore": 10}, {"id": 3, "title": "Is the complete navigation and information architecture constructed?", "description": "Check whether the code includes intuitive site navigation, breadcrumb trails, internal search functionality, and logical information hierarchy. Should implement smooth scrolling between sections, anchor links, and mobile-responsive navigation menu. Deduct 5 points if navigation structure is confusing, 3 points if missing search functionality, and 2 points if mobile navigation is poorly implemented. Give 10 points if includes advanced features like predictive search or personalized content recommendations.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as broken image links, failed downloads, network timeouts, invalid form submissions, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should include form validation, graceful degradation for unsupported browsers, and proper error handling for AJAX requests, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance user experience (e.g., 1. AR product visualization 2. AI-powered troubleshooting assistant 3. Interactive product configurator 4. Real-time system compatibility checker 5. Community forum integration). Add 3 points for each practical innovative feature implemented (maximum 10 points). Features should be functional, not just decorative.", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple contact forms with same purpose) 2. Feature bloat unrelated to electronic products (e.g., built-in games or social media feeds) 3. Excessive animations that slow down page performance (e.g., unnecessary parallax effects on every section). Deduct 3 points for each redundancy found, and directly deduct 10 points if core functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating content/presentation/behavior layers), semantic HTML structure, CSS organization (using methodologies like BEM), and JavaScript best practices. Deduct 5 points if inline styles are extensively used or HTML lacks semantic structure; deduct 3 points if CSS is not organized or lacks vendor prefixes; deduct 2 points if JavaScript lacks proper event handling or memory leak prevention. The full score requires clean, maintainable code with proper documentation.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the overall design follows modern web design principles: 1) Professional color scheme matching brand identity (consistent with tech industry standards) 2) Proper typography hierarchy (headings, body text, captions with appropriate contrast ratios ≥4.5:1) 3) Consistent spacing and grid system (following 8px baseline grid) 4) High-quality product imagery with proper optimization. Deduct 3 points for poor visual hierarchy, 5 points for accessibility issues (color contrast, font sizes), and 5 points for unprofessional or inconsistent branding. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction smooth and seamless?", "description": "Judge whether the interactive elements conform to user experience best practices: 1) Page load time ≤ 3 seconds with progressive loading 2) Smooth transitions between sections (300-500ms duration) 3) Responsive hover states and click feedback ≤ 100ms 4) Intuitive form interactions with real-time validation 5) Mobile touch interactions optimized for finger navigation. Deduct 5 points for slow page loading, 3 points for missing interaction feedback, 3 points for poor mobile touch experience, and 2 points for jerky animations or transitions. The full score is 10 points.", "maxScore": 10}], "class": "Web Applications-Business Website", "difficulty": "medium"}
{"index": 1460, "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure that the code you generate is executable for demonstration purposes. Develop a computer keyboard using uni-app.", "checklist": [{"id": 0, "title": "Is the basic keyboard UI layout correctly implemented?", "description": "Check whether the keyboard layout follows standard QWERTY design with proper key spacing and row alignment. Verify if all standard keys (letters, numbers, function keys) are present and properly sized. Score 0 if basic keyboard structure is missing, 5 if layout exists but has alignment issues, and 10 if the layout is professional and follows standard keyboard conventions.", "maxScore": 10}, {"id": 1, "title": "Is the keyboard event handling system properly implemented?", "description": "Evaluate whether key press/release events are correctly captured and processed. Check if the code handles multi-touch scenarios and prevents ghost touches. The implementation should include visual feedback on key press. Deduct 5 points if key events don't trigger appropriate actions, and 3 points if the code doesn't handle simultaneous key presses. Full score is 10 points.", "maxScore": 10}, {"id": 2, "title": "Are special keyboard features implemented?", "description": "Review implementation of modifier keys (Shift, Ctrl, Alt), toggle keys (Caps Lock, Num Lock), and special function keys. Check if the keyboard can switch between different layouts (e.g., alphabetic, numeric, symbol). Deduct 5 points if modifier keys don't change keyboard state properly, and 3 points if layout switching is buggy. Full score is 10 points.", "maxScore": 10}, {"id": 3, "title": "Is the uni-app cross-platform compatibility addressed?", "description": "Assess whether the code utilizes uni-app framework properly to ensure compatibility across multiple platforms (iOS, Android, H5, etc.). Check if platform-specific APIs are conditionally used when necessary. Deduct 5 points if the code only works on one platform, 3 points if there are minor platform-specific issues. Full score is 10 points.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as rapid tapping, long-press operations, screen orientation changes, etc.) and provide friendly error recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Haptic feedback 2. Swipe typing capability 3. Custom theme options 4. Predictive text/auto-complete). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple event handlers for the same action) 2. Function modules unrelated to keyboard functionality (e.g., unnecessary animations) 3. Fancy effects that affect performance (e.g., complex animations that slow down key response). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating UI layout/event handling/state management), component reusability, and proper use of uni-app best practices. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if uni-app components are not properly leveraged. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the overall design follows modern keyboard design principles: 1) Consistent key sizes and spacing 2) Clear visual differentiation between key groups 3) Professional color scheme with good contrast for readability 4) Proper use of shadows and highlights for visual depth. Deduct 3 points for each visual inconsistency, 5 points for poor color contrast that affects usability, and 5 points for unprofessional appearance. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction smooth and seamless?", "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Key press visual feedback delay ≤ 50ms 2) Smooth animations for layout transitions 3) Proper haptic/audio feedback when available. Deduct 5 points for each key press without feedback, 3 points for laggy animations during typing, and 5 points for unresponsive interfaces during fast typing. The full score is 10 points.", "maxScore": 10}], "class": "Utility Tools-Daily Office Tasks", "difficulty": "easy"}
{"index": 1630, "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Be sure to ensure that the code you generate is executable for demonstration purposes. Implement an editor similar to Microsoft Word in Vue.", "checklist": [{"id": 0, "title": "Is the core text editing functionality fully implemented?", "description": "Review whether the code implements essential text editing features using Vue: text input/deletion, cursor positioning, selection, copy/paste, and undo/redo. Check if contentEditable is properly utilized or if a custom implementation handles key events. Score 0 if basic text editing is missing, 5 if only simple text entry works, and 10 if all standard editing operations are fully implemented.", "maxScore": 10}, {"id": 1, "title": "Are the formatting capabilities comprehensive?", "description": "Evaluate the text formatting features: font styles (bold, italic, underline), font family/size selection, text alignment, paragraph spacing, bullet/numbered lists, and indentation. Verify that formatting is preserved when copying or saving content. Deduct 2 points for each missing core formatting feature. The full score is 10 points.", "maxScore": 10}, {"id": 2, "title": "Is document structure management properly implemented?", "description": "Check if the editor supports document structure features like headings, sections, page breaks, headers/footers, and tables. Assess whether the document model maintains a proper hierarchical structure rather than just styling text. Deduct 3 points if headings/sections are missing, 3 points if page management is absent, and 4 points if table support is not implemented. The full score is 10 points.", "maxScore": 10}, {"id": 3, "title": "Are file operations and document state management properly handled?", "description": "Review implementation of new document creation, opening existing documents, saving (with appropriate formats like .docx or HTML), auto-save functionality, and document state tracking. Check if the editor prompts users about unsaved changes. Deduct 3 points if save/load is missing, 3 points without auto-save, and 4 points without document state management. The full score is 10 points.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code handles common edge cases (large documents, special characters, pasting from external sources, browser compatibility issues). Test if the editor prevents data loss during unexpected operations or crashes. Code with strong robustness should effectively handle these scenarios, giving 10 points. If robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Real-time collaboration 2. AI-powered writing suggestions 3. Voice-to-text input 4. Advanced find/replace with regex 5. Accessibility features like screen reader support). Add 2 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functionality (e.g., multiple text selection mechanisms) 2. Function modules unrelated to word processing (e.g., built-in games or unrelated tools) 3. Fancy effects that affect performance (excessive animations or transitions). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review Vue component architecture (proper use of props/events/slots), state management approach, code reusability, and build process. Check for adherence to Vue best practices and performance optimization techniques. Deduct 3 points for improper component design, 3 points for inefficient state management, and 4 points if the code has poor maintainability. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the UI follows Microsoft Word-like design principles: 1) Clean, organized toolbar/ribbon interface 2) Proper use of icons and tooltips 3) Consistent spacing and alignment 4) Professional color scheme similar to Microsoft Office. Deduct 3 points for cluttered toolbars, 3 points for inconsistent visual language, and 4 points for poor overall layout resemblance to a professional word processor. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction smooth and seamless?", "description": "Judge whether the editor provides smooth interactions: 1) Responsive typing with no perceptible lag 2) Smooth cursor movement and selection 3) Immediate visual feedback for formatting changes 4) Clean transitions between different view modes. Deduct 3 points for typing lag, 2 points for jerky scrolling/selection, 3 points for delayed formatting feedback, and 2 points for abrupt view transitions. The full score is 10 points.", "maxScore": 10}], "class": "Other-Document Editor", "difficulty": "medium"}
{"index": 303, "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure the code you generate is executable for demonstration. Now, start creating a capsule page according to your design concept:\n\nUse a step-by-step design, for example:\nInput title and description.\nUpload images or videos.\nSet opening time (supporting date and time picker).\nAdd tags (optional).\n\nRich text editor:\nSupport text formatting (bold, italic, underline, etc.).\nSupport inserting images, videos, emoticons, etc.\n\nAnimation effects:\nAdd a \"capsule sealed\" animation effect (such as capsule closing, time-lapse animation) after the user completes creation.", "checklist": [{"id": 0, "title": "Is the step-by-step capsule creation design fully implemented?", "description": "Review whether the code correctly implements all required steps (title/description input, image/video upload, date/time picker for opening time, optional tags). Score 0 if the core steps are missing, 5 if basic functionality is implemented but lacks proper field validation, 10 if all steps are fully implemented with appropriate user guidance and input validation.", "maxScore": 10}, {"id": 1, "title": "Is the rich text editor implemented with all required features?", "description": "Evaluate if the editor includes text formatting (bold, italic, underline), media insertion capabilities (images, videos), and emoticon support. Check for proper toolbar implementation, keyboard shortcuts, and formatting preservation. Score 3 for basic text formatting only, 7 for formatting plus media support, and 10 for complete implementation including emoticons and proper state management.", "maxScore": 10}, {"id": 2, "title": "Is the 'capsule sealed' animation effect properly implemented?", "description": "Assess whether the animation effect is triggered after user completes creation, provides visual feedback that enhances the capsule creation experience, and uses modern animation techniques (CSS animations, SVG animations, or JavaScript libraries like GSAP). Score 0 if animation is missing, 5 if basic animation exists but lacks polish, and 10 if animation is smooth, thematically appropriate, and enhances the user experience.", "maxScore": 10}, {"id": 3, "title": "Is the media handling implementation robust and user-friendly?", "description": "Verify if the code handles image/video uploads properly, including file type validation, size limits, preview functionality, progress indicators, and error handling. Check if the implementation supports multiple file formats and provides options for cropping/editing. Score 3 for basic upload, 7 for upload with previews and validation, 10 for complete media management with editing capabilities.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as invalid inputs, network issues during upload, browser compatibility issues) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Preview of how the capsule will appear when opened 2. Social sharing integration 3. Customizable capsule themes/templates). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple ways to insert the same type of media) 2. Function modules unrelated to the capsule creation (e.g., unrelated settings or features) 3. Fancy effects that affect performance (e.g., excessive animations that slow down the interface). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating UI components, validation logic, and state management), unit test coverage, and build process automation. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the build process is not automated. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction smooth and seamless?", "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Click feedback delay ≤ 100ms 2) Transition animation duration controlled between 300-500ms 3) Clear visual focus guidance. Deduct 5 points for each operation without feedback, 3 points for visual after-images during step transitions, and 5 points for hard-to-find key function buttons. The full score is 10 points.", "maxScore": 10}], "class": "Web Applications-Other", "difficulty": "easy"}
{"index": 1805, "question": "You are a code expert, please use your professional knowledge to generate accurate, professional responses. Ensure that the generated code is executable for display. Help me write a web page code that can compare multiple sets of numbers, list the frequency of each number in order with color markers, and include a function to shuffle the numbers and then reorder them.", "checklist": [{"id": 0, "title": "Is the number comparison system fully implemented?", "description": "Evaluate whether the code provides a complete mechanism to input and compare multiple sets of numbers. Check if it allows users to input/define multiple datasets or import data from external sources. Score 0 if comparison functionality is missing, 5 if basic comparison is implemented but with limitations, and 10 if the system handles arbitrary numbers of datasets with proper validation.", "maxScore": 10}, {"id": 1, "title": "Is the frequency calculation and ordering function implemented correctly?", "description": "Examine the algorithm that calculates the frequency of each number and orders them. Verify the algorithm's correctness through edge cases (empty arrays, duplicate values, very large/small numbers). Deduct 3 points if the frequency calculation is incorrect, 4 points if ordering doesn't work properly, and 3 points if edge cases aren't handled. The full score is 10 points.", "maxScore": 10}, {"id": 2, "title": "Are color markers implemented effectively for visual representation?", "description": "Assess the color marker implementation for representing frequencies. Evaluate whether the color scheme is visually informative (e.g., heat map style), accessible (sufficient contrast ratio ≥4.5:1), and properly conveys data intensity. Deduct 5 points if colors don't correlate with frequency values, 3 points if the color scheme is confusing or inaccessible, and 2 points if there's no legend explaining the color mapping. The full score is 10 points.", "maxScore": 10}, {"id": 3, "title": "Is the shuffle and reorder functionality implemented effectively?", "description": "Review the shuffle algorithm implementation (preferably Fisher-Yates or equivalent) and the reordering mechanism. Verify that shuffling is truly random and the reordering process works consistently. Check for animation transitions between states. Deduct 4 points for biased shuffle algorithms, 3 points for inconsistent reordering, and 3 points if there's no visual feedback during state transitions. The full score is 10 points.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as non-numeric inputs, extremely large datasets, browser compatibility issues, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Interactive visualization options 2. Data export/import capabilities 3. Statistical analysis of number patterns). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple sorting algorithms) 2. Function modules unrelated to number comparison (e.g., unrelated data visualization) 3. Fancy effects that affect performance (e.g., excessive animations). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating logic/view layers), code organization, and performance optimization. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if there are no performance considerations for large datasets. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors plus their shades) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction smooth and seamless?", "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Click feedback delay ≤ 100ms 2) Transition animation duration controlled between 300-500ms 3) Clear visual focus guidance. Deduct 5 points for each operation without feedback, 3 points for visual lag during data reordering, and 5 points for hard-to-find key function buttons. The full score is 10 points.", "maxScore": 10}], "class": "Data Science-Statistical Analysis", "difficulty": "easy"}
{"index": 1620, "question": "You are a code expert, please use your professional knowledge to generate accurate and professional responses. Try to ensure that the generated code is executable for display. I want a game about building a sect, with a fictional background, avoiding fantasy, blood, horror, urgent choices, and focusing more on character development. I am the new sect master (16 years old, unmarried), with a family that includes my mother and a minor sibling (brother or sister). The game mainly focuses on recruiting disciples and expanding the sect storyline.\n\nResponse settings: For each round, update the time and character information in the main interface in real-time, wrap all information in separate pseudo code blocks, use asterisks for prompts, quotation marks for dialogues, add emoji expressions, use tree diagrams to show character relationship networks, and ensure code blocks fit mobile display dimensions. Reply \"next month\" to advance to the next month, reply \"restart\" to regenerate character information.", "checklist": [{"id": 0, "title": "Is the sect building game foundation completely implemented?", "description": "Check if the code implements the core game mechanics including time progression system, character attribute tracking, and sect management features. The implementation should handle the player as a 16-year-old sect master with family relationships (mother and sibling). Score 0 if core game loop is missing, 5 if basic mechanics exist but lack depth, 10 if comprehensive sect building mechanics are implemented with proper character relationships.", "maxScore": 10}, {"id": 1, "title": "Is the disciple recruitment and character development system implemented?", "description": "Evaluate the disciple recruitment mechanism, character attribute growth system, and relationship development features. Check if characters have unique personalities, backgrounds, and development paths. Disciples should have their own motivations and growth trajectories. Deduct 5 points if characters lack distinct personalities, 3 points if growth mechanics are simplistic or linear, and 5 points if there's no meaningful character interaction system.", "maxScore": 10}, {"id": 2, "title": "Is the time progression and event system properly implemented?", "description": "Review the 'next month' functionality that advances game time and triggers appropriate events. Check if the system includes random events, scheduled storylines, and consequences of previous choices. Event probability should be balanced, with event chains that build on previous player decisions. Deduct 5 points if time progression is buggy, 3 points if events are too repetitive or disconnect from context, and 5 points if there's no state persistence between time jumps.", "maxScore": 10}, {"id": 3, "title": "Is the character relationship network visualization properly implemented?", "description": "Assess the tree diagram implementation for character relationship networks. The visualization should be clear, interactive, and update dynamically as relationships evolve. Check if the relationships show hierarchy, loyalty, affection and other relevant metrics between sect master, family members, and disciples. Deduct 5 points if the visualization is static, 5 points if relationships aren't properly tracked in the data model, and 8 points if the tree diagram is unreadable or doesn't render properly on mobile.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as invalid user inputs, edge cases in character interactions, corrupt game state) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Dynamic story generation based on character traits 2. Procedurally generated sect challenges 3. Complex faction dynamics with rival sects). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple character creation systems) 2. Function modules unrelated to sect building (e.g., unnecessary mini-games) 3. Fancy effects that affect performance (e.g., excessive animations). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating game logic/view/data management layers), code organization, and maintainability. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if there's no clear separation between presentation and game logic. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional formatting of pseudo code blocks, asterisks for prompts, and quotation marks for dialogues. Deduct 3 points for each crowded visual element, 5 points for inconsistent emoji usage, and 5 points for poor mobile display optimization. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the storytelling and narrative design compelling and appropriate?", "description": "Judge whether the narrative avoids fantasy, blood, horror, and urgent choices as specified, while focusing on character development. Evaluate if the storytelling provides meaningful choices, avoids clichés, and creates an engaging progression for the young sect master. Deduct 5 points for inappropriate content, 3 points for shallow character development, and 5 points for restrictive or railroaded storytelling without player agency. The full score is 10 points.", "maxScore": 10}], "class": "Game Development-Role-Playing", "difficulty": "medium"}
{"index": 941, "question": "You are a code expert. Please use your professional knowledge to generate accurate and expert responses. Make sure the generated code is executable for demonstration. Create a language synthesis tool using HTML that allows selection of multiple voices for speech synthesis!!! (No application files needed)", "checklist": [{"id": 0, "title": "Voice selection implementation", "description": "Evaluate whether the code provides a comprehensive voice selection interface that allows users to select from all available system voices. Check if the voices are properly categorized by language and if there's a preview option. Score 0 if voice selection is missing, 5 if only basic voice listing is implemented, 10 if full voice selection with filtering and categorization is included.", "maxScore": 10}, {"id": 1, "title": "Speech synthesis core functionality", "description": "Review whether the code correctly implements the Web Speech API's SpeechSynthesis interface, including proper initialization, utterance creation, and event handling. Check if the synthesis can be started, paused, resumed, and stopped. Deduct 5 points if pitch/rate controls are missing, and 3 points if volume control is not implemented. The full score is 10 points.", "maxScore": 10}, {"id": 2, "title": "Text input and processing capabilities", "description": "Assess the text input mechanism, checking if it supports multiple paragraphs, handles special characters, and includes options for text preprocessing (like normalization or phonetic adjustments). Check if the implementation allows users to save or load text. Deduct 3 points if there's no character count, 3 points if special characters cause issues, and 5 points if long text handling is problematic. The full score is 10 points.", "maxScore": 10}, {"id": 3, "title": "Voice parameter customization", "description": "Evaluate the implementation of advanced voice parameter controls such as pitch, rate, volume and any additional SSML support. Check if parameters can be adjusted in real-time and if there are presets for common scenarios. Deduct 5 points if adjustments don't take effect immediately, and 5 points if the range of adjustments is too limited. The full score is 10 points.", "maxScore": 10}, {"id": 4, "title": "Code robustness", "description": "Evaluate whether the code can handle common abnormal situations (such as unavailable voices, browser compatibility issues, API failures, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Innovative features", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Real-time visualization of speech waveforms 2. Export options for synthesized speech 3. Voice effect filters). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Redundant features", "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple speech engines coexisting) 2. Function modules unrelated to speech synthesis (e.g., a built-in music player) 3. Fancy effects that affect performance (e.g., excessive animations). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Engineering quality", "description": "Review modular design (such as separating UI/speech API/state management layers), proper error handling, and cross-browser compatibility. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if browser compatibility issues are not addressed. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Interface vision", "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Dynamic interaction", "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Voice selection and playback response delay ≤ 100ms 2) Visual feedback during speech synthesis 3) Clear indication of active voice and synthesis state. Deduct 5 points for each operation without feedback, 3 points for laggy transitions between voices, and 5 points for unclear indication of the current synthesis state. The full score is 10 points.", "maxScore": 10}], "class": "Utility Tools-Daily Office Tasks", "difficulty": "medium"}
{"index": 799, "question": "You are a code expert, please use your professional knowledge to generate accurate and professional responses. Pay attention to ensuring that the generated code is executable. I am not a programmer, and I would like to use a large language model to write a simple calculator app. Is this possible?", "checklist": [{"id": 0, "title": "Is the core calculator functionality fully implemented?", "description": "Review whether the calculator can correctly perform basic arithmetic operations (addition, subtraction, multiplication, division). Check for proper order of operations (PEMDAS), decimal handling, and error prevention for division by zero. Score 0 if calculations are incorrect, 5 if basic operations work but with edge case issues, and 10 if all operations work flawlessly with proper error handling.", "maxScore": 10}, {"id": 1, "title": "Is the user interface properly implemented?", "description": "Assess the quality of the calculator UI implementation, including proper button layout, input display area, and visual feedback for button presses. Check if the calculator has a clear display for both input and output. Deduct 5 points if the layout is confusing or inconsistent, and 3 points if visual feedback is missing. The full score is 10 points.", "maxScore": 10}, {"id": 2, "title": "Does the calculator handle user input correctly?", "description": "Evaluate how well the application processes user interactions, including handling consecutive operations, clearing inputs, and managing decimal inputs. Check if the calculator prevents invalid input sequences. Deduct 5 points if it allows impossible mathematical expressions, and 3 points if it doesn't provide input validation. The full score is 10 points.", "maxScore": 10}, {"id": 3, "title": "Is the implementation beginner-friendly?", "description": "Assess if the code is well-commented and structured in a way that a non-programmer can understand and modify it. Check if there are clear explanations of how to run the code and how different parts work. Score 0 if no explanations exist, 5 if basic comments are present but insufficient, and 10 if comprehensive guidance is provided.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as invalid inputs, unexpected user behavior, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Memory functions 2. History of calculations 3. Theme switching or customization). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple ways to clear input) 2. Function modules unrelated to a calculator (e.g., unnecessary animations) 3. Overly complex code for simple operations. Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating UI/logic layers), code organization, and maintainability. Deduct 5 points if global state is poorly managed; deduct 5 points if the code is difficult to extend or modify; deduct 5 points if there's no clear structure or organization. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction smooth and seamless?", "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Click feedback delay ≤ 100ms 2) Transition animation duration controlled between 300-500ms 3) Clear visual focus guidance. Deduct 5 points for each operation without feedback, 3 points for visual after-images during fast input sequences, and 5 points for hard-to-find key function buttons. The full score is 10 points.", "maxScore": 10}], "class": "Utility Tools-Calculation Tools", "difficulty": "easy"}
{"index": 1608, "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Be sure to ensure the generated code is executable and demonstrable. Help me write a software for analyzing grain and oil futures on a six-month cycle that can obtain real-time trading information and policies for domestic grain and oil products. The data should be sourced from the National Grain Trade Center and GrainOil Duoduo. Ideally, it should integrate with AI large models. Please write all the code for the entire project.", "checklist": [{"id": 0, "title": "Is the data acquisition system fully implemented?", "description": "Review whether the code accurately implements web scraping or API integration with the National Grain Trade Center and GrainOil Duoduo. Check for proper authentication handling, rate limiting, error handling during data fetching, and data storage mechanisms. Score 0 if no data acquisition is implemented, 5 if only basic scraping without error handling is present, and 10 if robust data acquisition with fallback mechanisms and comprehensive error handling is included.", "maxScore": 10}, {"id": 1, "title": "Is the six-month cycle futures analysis functionality properly implemented?", "description": "Evaluate whether the code includes time series analysis algorithms appropriate for six-month cycle futures analysis (e.g., seasonal decomposition, cyclical pattern detection, trend analysis). Check for implementation of statistical methods like moving averages, ARIMA models, or other forecasting techniques. Deduct 5 points if only basic charting without actual cycle analysis is implemented, and 3 points if the analysis lacks statistical validation. The full score is 10 points.", "maxScore": 10}, {"id": 2, "title": "Is real-time trading information processing implemented?", "description": "Check whether the code includes functionality to process and update real-time trading data, including websocket connections or frequent API polling, data transformation pipelines, and real-time visualization updates. Verify if price alerts, threshold notifications, or other real-time features are included. Deduct 5 points if data refresh rate is inadequate for trading decisions (>1 minute delay), and 5 points if there's no mechanism to handle network interruptions. The full score is 10 points.", "maxScore": 10}, {"id": 3, "title": "Is the policy analysis integration with AI large models implemented?", "description": "Assess whether the code effectively integrates with AI large models (e.g., GPT, BERT) for policy analysis, including proper API usage, prompt engineering for financial analysis, and context handling. Check if results from AI models are properly integrated into the analysis workflow. Deduct 5 points if AI integration is superficial with no domain-specific tuning, and 5 points if there's no evaluation mechanism for AI-generated insights. The full score is 10 points.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as network failures, API changes, malformed data, missing values in time series) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. AI-driven anomaly detection for market movements 2. Natural language query interface for market data 3. Custom alert system with multiple notification channels). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar analysis functions (e.g., multiple trend detection algorithms without clear purpose) 2. Function modules unrelated to futures analysis (e.g., general financial calculators not specific to grain/oil) 3. Fancy visualizations that affect performance without adding analytical value. Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating data acquisition/analysis/visualization layers), unit test coverage, and build process automation. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the build process is not automated. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional financial software standards?", "description": "Evaluate whether the overall design follows professional financial software design principles: 1) Color scheme appropriate for financial data (clear differentiation between positive/negative trends, alerts) 2) Proper layout of multiple data panels without overwhelming the user 3) Professional typography for financial data presentation (clear hierarchy, readable numbers). Deduct 3 points for each crowded dashboard panel, 5 points for confusing trend visualization color schemes, and 5 points for poor information hierarchy. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction smooth and responsive for trading analysis?", "description": "Judge whether the dynamic effects support effective financial analysis: 1) Chart interaction response ≤ 200ms 2) Smooth transitions between different timeframes and analysis views 3) Intuitive filtering and comparison tools. Deduct 5 points if data filtering causes significant lag, 3 points for jumpy transitions between analysis views, and 5 points for hidden or complex access to critical trading information. The full score is 10 points.", "maxScore": 10}], "class": "Data Science-Predictive Modeling", "difficulty": "hard"}
{"index": 61, "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure the code you generate is executable.\n\nPlease implement a real-time chat system using HTML and JavaScript.\n\n**Task**: Create a real-time chat system where players can chat and communicate with other players in the game.\n\n**Hint**: Use WebSocket or other real-time communication technologies to implement the chat functionality, and set up a chat interface with message filtering.\n\nInclude comments in your code so other developers can understand your implementation process.", "checklist": [{"id": 0, "title": "Is the real-time chat system fully implemented?", "description": "Review whether the code implements a complete chat system with message sending and receiving functionality. Check if the interface includes message input, display area, and send button. Score 0 if core chat functionality is missing, 5 if basic messaging works but lacks real-time updates, and 10 if messages appear instantly without page refresh.", "maxScore": 10}, {"id": 1, "title": "Is the WebSocket or real-time communication implementation correct?", "description": "Verify if WebSocket or alternative real-time technologies (e.g., Socket.io, Server-Sent Events) are properly implemented. Check connection establishment, message handling, reconnection logic, and error handling. Deduct 5 points if the connection isn't maintained properly, 3 points if reconnection logic is missing, and 2 points if there's no error handling. The full score is 10 points.", "maxScore": 10}, {"id": 2, "title": "Is the message filtering functionality implemented?", "description": "Examine whether the code includes message filtering capabilities such as profanity filters, spam prevention, or content moderation. Check if users can filter messages by type/sender. Deduct 5 points if no filtering exists, 3 points if basic filtering lacks customization options. Give 10 points if comprehensive filtering with multiple options is implemented.", "maxScore": 10}, {"id": 3, "title": "Is the chat interface user-friendly and functional?", "description": "Evaluate if the chat interface includes essential elements like message history, timestamps, user identification, and message status indicators. Check for features like message formatting, emoji support, or file sharing. Deduct 3 points for each missing essential element, and award up to 10 points for a complete, intuitive interface.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as network disconnections, message delivery failures, invalid inputs, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Message reactions/emojis 2. Read receipts 3. Typing indicators 4. Voice/video messaging 5. Chat rooms/channels). Add 2 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple message sending logics) 2. Function modules unrelated to chat (e.g., a built-in game within the chat) 3. Fancy effects that affect performance (e.g., excessive animations). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating UI/network/message handling layers), code organization, comment quality, and variable naming. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if comments are insufficient or misleading. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction smooth and seamless?", "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Message sending feedback delay ≤ 100ms 2) New message notification animation duration controlled between 300-500ms 3) Clear visual focus guidance. Deduct 5 points for operations without feedback, 3 points for messages appearing without smooth transitions, and 5 points for hard-to-find key function buttons. The full score is 10 points.", "maxScore": 10}], "class": "Game Development-Casual", "difficulty": "easy"}
{"index": 1488, "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Be sure to provide executable code demonstrations when possible. Offer detailed solutions and code that implement both backend and frontend using Python.", "checklist": [{"id": 0, "title": "Is the Python backend architecture properly implemented?", "description": "Review whether the code includes a well-structured backend framework (Flask/Django/FastAPI) with proper routing, middleware, database integration, and API endpoints. Check for implementation of authentication, session management, and data validation. Score 0 if no backend framework is used, 5 if basic routing is implemented without proper structure, and 10 if a complete MVC/MVT pattern with proper separation of concerns is implemented.", "maxScore": 10}, {"id": 1, "title": "Is the frontend-backend integration seamless?", "description": "Evaluate whether the Python backend properly serves frontend assets and provides RESTful/GraphQL APIs. Check for proper HTTP status codes, JSON response formatting, CORS handling, and error propagation from backend to frontend. Deduct 5 points if API responses lack proper error handling, 3 points if CORS is not configured, and 2 points if HTTP status codes are inconsistent. Full score is 10 points.", "maxScore": 10}, {"id": 2, "title": "Is the data persistence and database integration robust?", "description": "Check whether the Python backend implements proper database operations using ORM (SQLAlchemy/Django ORM) or raw SQL with connection pooling. Evaluate migration scripts, data validation, transaction handling, and backup mechanisms. Deduct 5 points if no ORM is used without justification, 3 points if database connections are not properly managed, and 2 points if no data validation is implemented. Full score is 10 points.", "maxScore": 10}, {"id": 3, "title": "Are Python best practices and performance optimizations implemented?", "description": "Assess whether the code follows Python PEP 8 standards, implements proper async/await patterns where needed, uses appropriate data structures, and includes caching mechanisms. Check for memory management, query optimization, and scalability considerations. Deduct 5 points if no async patterns are used for I/O operations, 3 points if inefficient algorithms are used, and 2 points if PEP 8 standards are not followed. Full score is 10 points.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as database connection failures, invalid user input, file system errors, network timeouts, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should include try-catch blocks, input validation, logging, and graceful degradation. Give 10 points if fully implemented with comprehensive exception handling, 5 points if basic error handling exists, and 0 points if no exceptions are handled.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Real-time data streaming with WebSockets 2. AI-powered recommendations or automation 3. Advanced data visualization with interactive charts 4. Progressive Web App features). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple authentication systems coexisting) 2. Function modules unrelated to the core purpose 3. Over-engineered solutions that add unnecessary complexity. Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (proper package structure, separation of models/views/controllers), unit test coverage, virtual environment setup, requirements.txt, and deployment configuration. Deduct 5 points if no package structure is implemented; deduct 5 points if code duplication rate exceeds 30%; deduct 5 points if no dependency management or testing framework is included. Full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times) 4) Responsive design implementation. Deduct 3 points for each crowded visual element, 5 points for glaring color combinations, and 5 points for chaotic text-image layout. Full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction smooth and seamless?", "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Click feedback delay ≤ 100ms 2) Transition animation duration controlled between 300-500ms 3) Clear visual focus guidance 4) Loading states for async operations 5) Form validation feedback. Deduct 5 points for each operation without feedback, 3 points for visual after-images during interactions, and 5 points for hard-to-find key function buttons. Full score is 10 points.", "maxScore": 10}], "class": "Other-Programming Consultation", "difficulty": "medium"}
{"index": 1678, "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure the generated code is executable for display. Help me create a fun number connection game from 1 to 1000, where all points are marked, and when connected in numerical order, they form an animal image. The game should include 100 different animal shapes to choose from, with all code integrated into a single webpage.", "checklist": [{"id": 0, "title": "Is the core numerical connection game mechanics fully implemented?", "description": "Review whether the code accurately implements the connection of points from 1 to 1000 in numerical order. Check if the points are properly marked with numbers, if the game validates correct connections, and if there's visual feedback when points are connected. Score 0 if the core connection logic is not implemented, 5 if only basic connections work, and 10 if fully implemented with validation and visual feedback.", "maxScore": 10}, {"id": 1, "title": "Are 100 different animal shapes properly implemented and selectable?", "description": "Evaluate whether the code genuinely includes 100 different animal shapes with distinct point distributions. Check if each animal is uniquely identifiable and if the selection mechanism works properly. Deduct 1 point for every 10 animals missing from the required 100. Deduct 5 points if the animals are too similar or indistinguishable. The full score is 10 points.", "maxScore": 10}, {"id": 2, "title": "Is the coordinate system and point distribution implementation effective?", "description": "Check if the points are distributed in a way that clearly forms the animal shape when connected. Points should be positioned strategically to make the animal recognizable during gameplay. Evaluate if the 1000 points are distributed with appropriate density (not too sparse in important details, not too dense in simple areas). Deduct 5 points if animal shapes are unrecognizable, and 3 points if point density is poorly managed. The full score is 10 points.", "maxScore": 10}, {"id": 3, "title": "Is the game progression and user interface properly designed?", "description": "Assess whether the game provides clear guidance on which number to connect next, progress tracking, completion indication, and reset functionality. Check if the interface allows for easy navigation between different animal options. Deduct 3 points if the next number to connect isn't clearly indicated, 3 points if progress isn't tracked, and 4 points if there's no completion feedback or reset option. The full score is 10 points.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as incorrect connections, rapid clicking, resizing the browser window, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Progressive difficulty levels 2. Timed challenges 3. Partial image reveals as hints 4. Animation when completing an animal). Add 2.5 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple ways to select animals) 2. Function modules unrelated to the number connection game (e.g., unnecessary mini-games) 3. Fancy effects that affect performance (e.g., excessive animations that slow down point connections). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating game logic/view/data layers), code organization, and performance optimization for handling 1000 points. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if rendering optimization is poor (slow performance with 1000 points). The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction smooth and seamless?", "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Point connection feedback delay ≤ 100ms 2) Transition animation duration controlled between 300-500ms 3) Clear visual guidance for the next number. Deduct 5 points if connecting points lacks feedback, 3 points for laggy animations when many points are connected, and 5 points for unclear number identification. The full score is 10 points.", "maxScore": 10}], "class": "Game Development-Puzzle", "difficulty": "hard"}
{"index": 765, "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure the code you generate is executable for demonstration purposes. Help me create a parkour game where the character is Wong Ka Kui (Beyond's lead vocalist), controlled by the A, W, S, D keys, in HTML format.", "checklist": [{"id": 0, "title": "Is the basic parkour game mechanics fully implemented?", "description": "Review whether the code implements core parkour mechanics including: character movement, jumping mechanism, obstacle generation and collision detection. Score 0 if the character cannot move, 5 if only basic left-right movement exists, and 10 if complete parkour mechanics (including jumping, dodging, and progressive difficulty) are implemented.", "maxScore": 10}, {"id": 1, "title": "Is the Wong Ka Kui character properly implemented and designed?", "description": "Check whether the Wong Ka Kui character is visually recognizable (either through sprites or CSS design), has appropriate animations for different actions (running, jumping, falling), and maintains the iconic elements associated with the Beyond vocalist. Deduct 5 points if the character lacks recognizable features, 3 points if animations are missing, and 2 points if proportions are significantly distorted. The full score is 10 points.", "maxScore": 10}, {"id": 2, "title": "Is the A, W, S, D key control system properly implemented?", "description": "Evaluate whether the WASD key controls are responsive (≤100ms delay), intuitive (W for jump, A/D for left/right movement, S for ducking/sliding), and handle edge cases like multiple key presses. Check for keyboard event listeners and proper key mapping. Deduct 5 points if controls are unresponsive or laggy, and 5 points if key combinations aren't handled properly. The full score is 10 points.", "maxScore": 10}, {"id": 3, "title": "Is the game environment and obstacle system well-designed?", "description": "Assess whether the game includes varied obstacles that spawn progressively, a scoring system that tracks the player's progress, and background elements that create an engaging parkour environment. Deduct 3 points for monotonous obstacles, 3 points for missing score tracking, and 4 points if the difficulty doesn't increase over time. The full score is 10 points.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as rapid key presses, browser resizing, performance issues on slower devices, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Beyond music integration 2. Special power-ups related to Wong Ka Kui or Beyond 3. Easter eggs from Beyond's music history). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple collision detection systems) 2. Function modules unrelated to the parkour game (e.g., unnecessary menus or settings) 3. Fancy effects that affect performance (e.g., excessive particles or animations). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating game logic/rendering/input handling), code organization, and maintainability. Deduct 5 points if global state pollution is found or if game functions are not encapsulated properly; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the code lacks comments or documentation. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the overall design follows modern game design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout of game elements (score display, character, obstacles) 3) Professional font system for game text (instructions, score, game over). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction smooth and seamless?", "description": "Judge whether the game's dynamic effects conform to human perception characteristics: 1) Character responds to controls within 100ms 2) Animation transitions are smooth (60fps target) 3) Collision feedback is clear and precise. Deduct 5 points if controls feel unresponsive, 3 points for jerky animations or frame drops, and 5 points for unclear collision boundaries or feedback. The full score is 10 points.", "maxScore": 10}], "class": "Game Development-Action/Rhythm", "difficulty": "medium"}
{"index": 1639, "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure the generated code is executable for demonstration purposes. Provide sample code for using Rete.js in Vue 3, using the setup script syntax sugar.", "checklist": [{"id": 0, "title": "Is Rete.js core integration properly implemented?", "description": "Review whether the code correctly integrates Rete.js with Vue 3 setup syntax, including proper engine initialization, area plugin configuration, and connection plugin setup. Check if the node editor instance is properly created and mounted to DOM elements. Score 0 if core Rete engine is not initialized, 5 if only basic editor is created without plugins, and 10 if complete integration with all essential plugins (Area, Connection, Render) is implemented.", "maxScore": 10}, {"id": 1, "title": "Are custom nodes and sockets correctly defined and functional?", "description": "Evaluate whether custom node types are properly defined with input/output sockets, control elements, and data processing logic. Check if nodes can be added to the editor, connected properly, and execute their intended functions. Deduct 5 points if socket connections don't work, 3 points if node controls are non-functional. Full score requires at least 2-3 different node types with proper socket definitions and working connections.", "maxScore": 10}, {"id": 2, "title": "Is Vue 3 reactivity system properly integrated with Rete.js?", "description": "Check whether Vue 3's composition API (ref, reactive, computed) is correctly used to manage Rete.js state and provide reactive updates. Evaluate if changes in Vue components properly sync with Rete editor state and vice versa. Deduct 5 points if reactivity is broken or causes memory leaks, 3 points if state synchronization is inconsistent. Full score requires seamless two-way data binding between Vue and Rete.", "maxScore": 10}, {"id": 3, "title": "Is the data flow processing engine implemented with proper execution logic?", "description": "Assess whether the node graph can execute properly with data flowing through connections, including proper input validation, data transformation, and output generation. Check if the execution order respects node dependencies and handles circular references. Deduct 5 points if execution logic is missing, 3 points if data types are not properly validated. Full score requires complete data processing pipeline with error handling.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as invalid node connections, missing dependencies, component lifecycle issues, memory leaks from Rete instances, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should effectively handle edge cases and provide proper cleanup on component unmount, giving 10 points. If robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Custom node templates with drag-and-drop palette 2. Real-time preview of node execution results 3. Serialization/deserialization of node graphs 4. Minimap or zoom controls 5. Undo/redo functionality). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple editor initialization logic) 2. Function modules unrelated to Rete.js demonstration (e.g., unnecessary UI components) 3. Overly complex examples that obscure the core Rete.js usage patterns. Deduct 3 points for each redundancy found, and directly deduct 10 points if the core Rete.js demonstration is interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating node definitions, editor configuration, and Vue components), proper TypeScript usage if applicable, and Vue 3 best practices compliance. Deduct 5 points if global state pollution is found or composition API patterns are misused; deduct 5 points if code structure is poorly organized; deduct 5 points if dependencies are not properly managed. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching for nodes and connections (no more than 3 primary colors) 2) Proper layout spacing (node editor container and controls follow consistent spacing) 3) Professional typography (readable node labels, proper font hierarchy). Deduct 3 points for each visually crowded element, 5 points for clashing color combinations, and 5 points for poor visual hierarchy. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction smooth and seamless?", "description": "Judge whether the node editor interactions conform to user expectations: 1) Node dragging responsiveness ≤ 16ms for 60fps 2) Connection creation with smooth bezier curves and visual feedback 3) Hover states and selection feedback are immediate and clear 4) Zoom and pan operations are fluid. Deduct 5 points for each laggy interaction, 3 points for poor visual feedback during operations, and 5 points for confusing interaction patterns. The full score is 10 points.", "maxScore": 10}], "class": "Mermaid Flowcharts-Logic Flowcharts", "difficulty": "hard"}
{"index": 1762, "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure the code you generate is executable. \n\nRow 1: 0, 0, 6, 0, 8, 0, 2, 4, 0\nRow 2: 5, 0, 2, 0, 0, 6, 0, 0, 0\nRow 3: 4, 0, 0, 0, 0, 0, 0, 3, 6\nRow 4: 0, 4, 0, 8, 0, 1, 0, 0, 0\nRow 5: 7, 0, 0, 0, 0, 0, 0, 0, 2\nRow 6: 0, 0, 0, 4, 0, 5, 0, 8, 0\nRow 7: 6, 1, 0, 0, 0, 0, 0, 0, 4\nRow 8: 0, 0, 0, 1, 0, 0, 5, 0, 8\nRow 9: 0, 5, 7, 0, 6, 0, 9, 0, 0\n\nThe number 0 represents blank spaces.\nPlease generate JavaScript code embedded in HTML to solve this Sudoku puzzle.", "checklist": [{"id": 0, "title": "Is the Sudoku solver algorithm correctly implemented?", "description": "Evaluate whether the algorithm (backtracking, constraint propagation, etc.) correctly solves the given puzzle. Check if all Sudoku rules are enforced: each row, column, and 3x3 grid contains digits 1-9 without repetition. Award 0 points if the solver doesn't work, 5 points if it works but with inefficient algorithm (e.g., brute force without optimizations), and 10 points if it implements an efficient algorithm with proper constraint checking.", "maxScore": 10}, {"id": 1, "title": "Is the initial Sudoku grid properly represented and displayed?", "description": "Check if the provided initial Sudoku grid (with the specific numbers in the question) is correctly displayed in the UI. Verify that the grid structure maintains 9x9 format with clearly visible 3x3 subgrids. Award 0 points if the grid is incorrect, 5 points if partially implemented with visual issues, and 10 points for perfect representation with appropriate styling.", "maxScore": 10}, {"id": 2, "title": "Does the solution provide visual feedback during the solving process?", "description": "Assess whether the solution visualizes the solving process (e.g., step-by-step animation, highlighting cells being considered, showing backtracking). Award 0 points for no visualization, 5 points for basic changes only at the end, and 10 points for comprehensive visualization with speed control or step-by-step options.", "maxScore": 10}, {"id": 3, "title": "Is user interaction implemented for manual solving assistance?", "description": "Evaluate whether the implementation allows user interaction such as manually entering numbers, requesting hints, or controlling the solving process (start/pause/resume/step). Award 0 points for no interaction, 5 points for basic controls, and 10 points for comprehensive interaction including validation of user inputs against Sudoku rules.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle edge cases (invalid inputs, unsolvable puzzles, multiple solutions). Check for appropriate error handling and user feedback. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Multiple solving algorithms with comparison 2. Performance statistics of solving time/steps 3. Mobile-responsive design 4. Dark mode toggle). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple solving algorithms without clear purpose) 2. Function modules unrelated to Sudoku solving (e.g., unnecessary animations) 3. Fancy effects that affect performance (e.g., excessive DOM manipulations). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating UI logic from solving algorithm), code organization, and maintainability. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if there's no clear separation of concerns. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction smooth and seamless?", "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Cell highlighting and number updates occur without visual lag 2) Transition animations when displaying solutions are controlled between 300-500ms 3) Clear visual distinction between original numbers and solved numbers. Deduct 5 points for each operation without feedback, 3 points for visual jarring during fast solving, and 5 points for confusing visual states. The full score is 10 points.", "maxScore": 10}], "class": "Game Development-Puzzle", "difficulty": "easy"}
{"index": 1221, "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional replies. Make sure any code you generate is executable and functional. Help me write a small stock selection program with the condition: stocks that have broken through their yearly moving average within the last 7 days.", "checklist": [{"id": 0, "title": "Is the stock data source integration properly implemented?", "description": "Check if the code includes reliable API connections (Yahoo Finance, Alpha Vantage, etc.) with proper error handling. Verify if the data fetching includes necessary authentication, rate limiting management, and handling of network failures. Score 0 if no data source is specified, 5 if basic APIs are used without error handling, 10 if comprehensive data retrieval with fallback mechanisms is implemented.", "maxScore": 10}, {"id": 1, "title": "Is the yearly moving average calculation correct?", "description": "Verify the yearly moving average calculation methodology (standard 250 or 252 trading days). Check if the formula properly handles weekends/holidays and data gaps. Ensure the calculation doesn't suffer from look-ahead bias. Score 0 if calculation is mathematically incorrect, 5 if basic calculation is present but edge cases aren't handled, 10 if implementation is statistically sound.", "maxScore": 10}, {"id": 2, "title": "Is the breakthrough detection algorithm properly implemented?", "description": "Assess the breakthrough definition - verify if the code checks both price crossing above the moving average and the timing within the 7-day window. Check if the algorithm handles false signals (e.g., requiring confirmation over multiple periods). Deduct 5 points if the algorithm doesn't handle price gaps, and 3 points if it doesn't account for volatility. The full score is 10 points.", "maxScore": 10}, {"id": 3, "title": "Does the program include adequate screening parameters and filters?", "description": "Evaluate if the program allows filtering by market capitalization, sector, trading volume, or other relevant metrics beyond just the moving average breakthrough. Check if parameters are configurable by users. Score 3 points for each useful filter implemented (volume threshold, sector selection, volatility filter), up to 10 points.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as missing data points, API failures, invalid inputs, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Visualization of breakthrough patterns 2. Historical backtest capabilities 3. Alert system for new breakthroughs 4. Integration with fundamental data). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar screening methods 2. Function modules unrelated to stock selection 3. Computationally expensive operations that don't contribute to the core functionality. Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating data retrieval/analysis/presentation layers), unit test coverage, and build process automation. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the build process is not automated. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching for stock charts (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction smooth and seamless?", "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Data refresh/update delay ≤ 500ms 2) Transition animation duration controlled between 300-500ms 3) Clear visual focus on breakthrough stocks. Deduct 5 points for each operation without feedback, 3 points for visual after-images during rapid data updates, and 5 points for hard-to-find key function buttons. The full score is 10 points.", "maxScore": 10}], "class": "Data Science-Statistical Analysis", "difficulty": "medium"}
{"index": 1501, "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure the code you provide is executable when possible. Write a Four Pillars (BaZi) charting software that only displays the Four Pillars and Decennial Cycles.", "checklist": [{"id": 0, "title": "Is the Four Pillars (BaZi) chart calculation correctly implemented?", "description": "Check whether the code accurately calculates the Four Pillars (year, month, day, hour) based on date and time input. Verify that the Heavenly Stems and Earthly Branches are correctly assigned according to traditional Chinese calendar calculations. Score 0 if core calculation logic is missing, 5 if basic pillar formation exists with minor errors, and 10 if calculations fully comply with traditional BaZi principles including solar calendar adjustments.", "maxScore": 10}, {"id": 1, "title": "Are the Decennial Cycles (Luck Pillars) correctly calculated?", "description": "Evaluate whether the code properly determines the Decennial Cycles (Da Yun) based on the Four Pillars chart. Check for accurate implementation of starting age calculation, cycle transitions, and proper sequencing of Heavenly Stems and Earthly Branches in the luck pillars. Deduct 5 points if the starting point of luck pillars is incorrect, 3 points if the cycle progression direction (forward/reverse based on gender) is wrong. The full score is 10 points.", "maxScore": 10}, {"id": 2, "title": "Does the software handle various calendar systems and time conversions properly?", "description": "Verify that the software can convert between solar (Gregorian) and lunar calendars accurately, handling leap months and time zone differences correctly. Check if the software properly accounts for historical calendar changes and different date formats. Deduct 5 points if lunar-solar conversion has errors, 3 points if time zone handling is missing, and 2 points if historical dates (before 1900) are not supported. The full score is 10 points.", "maxScore": 10}, {"id": 3, "title": "Is the visual representation of the Four Pillars chart clear and traditional?", "description": "Assess whether the chart follows traditional BaZi visualization standards with clear distinction between Heavenly Stems and Earthly Branches. Check if Chinese characters are properly displayed with their corresponding elements (Five Elements) appropriately color-coded. Deduct 3 points if elements aren't color-coded, 5 points if the traditional layout isn't followed, and 2 points if the relationship between pillars isn't visually clear. The full score is 10 points.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as invalid dates, future dates, dates before the supported calendar system, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Visual representation of the Five Elements balance 2. Interactive element clash/combination highlights 3. Simplified explanations of chart significance). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Features beyond the scope of Four Pillars and Decennial Cycles (e.g., detailed fortune interpretation) 2. Unnecessary calculation methods that complicate the codebase 3. Fancy effects that affect performance without adding value to the core functionality. Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating calculation logic/view/data models), unit test coverage, and build process automation. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the build process is not automated. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the overall design follows modern design principles while respecting traditional BaZi aesthetics: 1) Harmonious color matching (using traditional Five Elements colors appropriately) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (clear rendering of both Chinese characters and numerals). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction smooth and seamless?", "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Click feedback delay ≤ 100ms 2) Transition animation duration controlled between 300-500ms 3) Clear visual focus guidance when switching between chart views or date inputs. Deduct 5 points for each operation without feedback, 3 points for visual after-images during transitions, and 5 points for hard-to-find key function buttons. The full score is 10 points.", "maxScore": 10}], "class": "Other-Astrology/Divination Software", "difficulty": "hard"}
{"index": 321, "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure the code you provide is executable whenever possible. I am a frontend developer, and I need to develop a customizable recruitment poster application where users can design their own poster templates and export them as vector files. How can this be implemented using Vue and SVG?", "checklist": [{"id": 0, "title": "Is the core SVG poster generation system fully implemented?", "description": "Check whether the code effectively implements an SVG-based poster generation system that allows for dynamic customization. Score 0 if there's no SVG generation code, 5 if basic SVG elements are rendered without proper customization, and 10 if the system provides a comprehensive API for creating, modifying, and styling SVG elements in the poster context.", "maxScore": 10}, {"id": 1, "title": "Does the Vue implementation provide a robust component architecture for the editor?", "description": "Evaluate the Vue component architecture. Check if components are properly segregated (e.g., canvas component, toolbar component, property panel component), if they use proper prop validation, emit proper events, and if the state management is appropriate for this use case (Vuex/Pinia for complex state, component state for local concerns). Deduct 3 points for monolithic components, 3 points for prop-drilling beyond 2 levels, and 4 points if reactive data isn't properly utilized.", "maxScore": 10}, {"id": 2, "title": "Is the template management system properly implemented?", "description": "Verify if users can save, load, and manage poster templates. Check if templates are serialized in a proper format (JSON), if the system handles template versioning, and if predefined templates are available as starting points. Deduct 5 points if template saving is not implemented, 3 points if there's no way to categorize templates, and 2 points if template previews aren't generated.", "maxScore": 10}, {"id": 3, "title": "Is the vector file export functionality correctly implemented?", "description": "Examine if the system can export designs in vector formats (SVG, AI, EPS, or PDF). Check if the export preserves all visual elements, layers, and effects. Verify if text remains editable in the exported files. Deduct 5 points if only raster export is available, 5 points if vector export loses fidelity, and 5 points if user isn't given export options (size, format, quality).", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as invalid SVG data, failed exports, browser compatibility issues) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Real-time collaborative editing 2. AI-assisted design recommendations 3. Advanced SVG filters and effects 4. Integration with design asset libraries). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple ways to edit the same property) 2. Function modules unrelated to poster design (e.g., a built-in image editor when simple crop/resize would suffice) 3. Fancy effects that affect performance (e.g., excessive animations). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating editor logic/view/data layers), unit test coverage, and build process automation. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the build process is not automated. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction smooth and seamless?", "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Click feedback delay ≤ 100ms 2) Transition animation duration controlled between 300-500ms 3) Clear visual focus guidance. Deduct 5 points for each operation without feedback, 3 points for visual after-images during fast sliding, and 5 points for hard-to-find key function buttons. The full score is 10 points.", "maxScore": 10}], "class": "SVG Generation-SVG Posters", "difficulty": "medium"}
{"index": 1490, "question": "You are a code expert. Please utilize your professional knowledge to generate accurate and professional responses. Make sure the code you generate is executable whenever possible. This includes webpage addresses, plugin loading, AI-based code node implementation workflow according to specific goals (task breakdowns including loading, extraction, parsing, storage, etc.), execution and debugging.", "checklist": [{"id": 0, "title": "Is the code execution context properly defined and implemented?", "description": "Evaluate whether the code clearly defines its execution environment (browser, Node.js, specific frameworks) with appropriate initialization. Check if dependencies are explicitly declared with version control. Verify if the execution flow is clearly structured with proper entry points. Score 0 if execution context is undefined, 5 if basic context is provided but lacks configuration details, and 10 if comprehensive environment setup with fallback mechanisms is included.", "maxScore": 10}, {"id": 1, "title": "Is the AI-based code workflow properly structured with clear task breakdowns?", "description": "Assess whether the code implements a complete AI workflow with clearly defined stages (loading, extraction, parsing, storage). Check if each stage has appropriate error handling and progress monitoring. Validate that the workflow components are loosely coupled for maintainability. Deduct 5 points if key stages are missing, 3 points if the workflow lacks proper transitions between stages, and 2 points if success/failure states aren't clearly defined. The full score is 10 points.", "maxScore": 10}, {"id": 2, "title": "Are data loading and extraction mechanisms effectively implemented?", "description": "Review the implementation of data acquisition processes, including external API calls, file system operations, or web scraping techniques. Verify support for different data formats (JSON, CSV, XML) and asynchronous loading patterns. Check for rate limiting, caching, and retry mechanisms. Score 0 if loading functionality is absent, 5 if basic loading exists without optimization, and 10 if comprehensive data acquisition with fallback strategies is implemented.", "maxScore": 10}, {"id": 3, "title": "Is the parsing and storage logic comprehensive and efficient?", "description": "Evaluate data parsing algorithms for accuracy and efficiency. Check for proper data validation, normalization, and transformation processes. Verify if storage mechanisms include appropriate indexing, query optimization, and data persistence strategies. Deduct 5 points if parsing logic contains edge case vulnerabilities, 3 points if storage doesn't implement proper transaction handling, and 2 points if data integrity checks are missing. The full score is 10 points.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code handles common exceptions and edge cases (network failures, malformed inputs, resource limitations) with appropriate error recovery mechanisms. Check for input validation, defensive programming practices, and graceful degradation. Look for diagnostic logging and monitoring capabilities. Deduct 3 points for each unhandled error scenario, 5 points for absence of timeout mechanisms, and 5 points if error messages aren't user-friendly. The full score is 10 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Adaptive algorithm selection based on data characteristics 2. Progressive loading with visual feedback 3. Context-aware error suggestions). Evaluate implementation quality and practical utility of innovative features. Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Duplicate implementation of similar functionality (e.g., multiple HTTP client wrappers) 2. Unnecessary processing steps that don't contribute to the core workflow 3. Over-engineered solutions for simple problems. Deduct 3 points for each redundancy found, and directly deduct 10 points if core functionality is obscured by unnecessary complexity.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design, separation of concerns, and adherence to design patterns. Check for consistent naming conventions, code documentation, and test coverage. Evaluate configuration management and environment separation. Deduct 5 points if global state is mismanaged, 5 points if the code duplication rate exceeds 30%, and 5 points if there's no automated testing strategy. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface design meet professional standards?", "description": "Evaluate whether any UI components follow modern design principles: 1) Consistent visual hierarchy with proper use of whitespace 2) Responsive design that adapts to different screen sizes 3) Accessibility compliance (WCAG standards, proper contrast ratios, screen reader support). Deduct 3 points for inconsistent visual patterns, 5 points for non-responsive layouts, and 5 points for major accessibility violations. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the execution and debugging experience well-designed?", "description": "Judge the quality of runtime feedback and debugging capabilities: 1) Informative progress indicators for long-running operations 2) Meaningful error messages with actionable suggestions 3) Integrated debugging tools or hooks for external monitoring. Deduct 5 points for silent failures without explanation, 3 points for ambiguous progress states, and 5 points for absence of debugging entry points. The full score is 10 points.", "maxScore": 10}], "class": "Other-Software Development", "difficulty": "medium"}
{"index": 1329, "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Be careful to ensure that the code you generate is executable and can be demonstrated. Create a WeChat Mini Program that functions as a library management system.", "checklist": [{"id": 0, "title": "Is the core library management functionality fully implemented?", "description": "Review whether the code implements essential library functions including book cataloging, user management, borrowing/returning processes, and search functionality. Score 0 if core functionality is missing, 5 if only basic operations are implemented, and 10 if the system includes advanced features like reservation, fine calculation, and due date notifications.", "maxScore": 10}, {"id": 1, "title": "Is the Mini Program architecture properly structured for WeChat environment?", "description": "Check whether the code follows WeChat Mini Program architecture conventions with appropriate page structure (WXML, WXSS, JS, JSON files), correct App and Page lifecycle management, and proper use of WeChat APIs. Deduct 5 points if the project structure doesn't follow WeChat standards, 3 points if lifecycle events are improperly handled. The full score is 10 points.", "maxScore": 10}, {"id": 2, "title": "Is the data persistence and synchronization mechanism properly implemented?", "description": "Evaluate whether the code utilizes appropriate storage methods (cloud database, local storage, caching) for different data requirements. Verify if data synchronization between local and cloud is correctly implemented with conflict resolution strategies. Deduct 5 points if offline capability is missing, 3 points if data validation is inadequate. The full score is 10 points.", "maxScore": 10}, {"id": 3, "title": "Is the WeChat user authentication and authorization properly integrated?", "description": "Assess implementation of WeChat login, OpenID usage, and proper permission handling for user information access. Check if the application handles different user roles (admin, librarian, regular user) correctly. Deduct 5 points for insecure authentication, 3 points for missing role-based access control. The full score is 10 points.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as network interruption, invalid input, missing book information, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Book recommendation based on borrowing history 2. Barcode/QR code scanning for quick checkout 3. Social sharing of reading lists). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple user profile systems coexisting) 2. Function modules unrelated to library management (e.g., a built-in game) 3. Fancy effects that affect performance (e.g., excessive animations that slow down the interface). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating data/service/UI layers), component reusability, and code maintainability. Deduct 5 points if global state is poorly managed; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if naming conventions are inconsistent or unclear. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the overall design follows WeChat design language and principles: 1) Consistent with WeChat UI components and style 2) Proper layout spacing and information hierarchy 3) Professional typography with appropriate font sizes. Deduct 3 points for inconsistent UI elements, 5 points for cluttered information layout, and 5 points for poor readability. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction smooth and seamless?", "description": "Judge whether the dynamic effects conform to WeChat Mini Program standards and user expectations: 1) Responsive touch feedback 2) Smooth page transitions and loading states 3) Clear visual indicators for system status. Deduct 5 points for laggy interactions, 3 points for missing loading indicators during data fetching, and 5 points for confusing navigation patterns. The full score is 10 points.", "maxScore": 10}], "class": "Management Systems-Frontend/Backend Platforms", "difficulty": "medium"}
{"index": 792, "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Be sure to ensure that the generated code is executable for demonstration. Create a movie project in my \"E:\\graduation project\\movie website system\" folder, first implementing login, registration, and homepage functionality. We'll handle the data later. I need a very complete process.", "checklist": [{"id": 0, "title": "Is the project structure properly set up?", "description": "Check if the project follows a standard structure with clear separation of concerns (frontend/backend directories, assets, components, etc.). The structure should be located in 'E:\\graduation project\\movie website system'. Verify if appropriate build tools or frameworks are initialized (like React, Vue, Angular for frontend; Node.js, Spring, Django for backend). Score 0 if there is no clear structure, 5 if basic structure exists but lacks organization, and 10 for a comprehensive, industry-standard architecture.", "maxScore": 10}, {"id": 1, "title": "Is the authentication system fully implemented?", "description": "Evaluate the implementation of login and registration functionality. Check for proper form validation (email format, password strength, required fields), secure password handling (hashing, not storing plaintext), session/token management, and user feedback mechanisms. Deduct 3 points if form validation is missing, 4 points if password security is inadequate, and 3 points if user feedback is poor. The full score is 10 points.", "maxScore": 10}, {"id": 2, "title": "Is the homepage design comprehensive and functional?", "description": "Assess whether the homepage includes essential movie website elements: featured movies carousel, categorized movie listings, search functionality, and navigation to other sections. Check if data placeholders are properly implemented for future integration. Deduct 3 points if the layout is incomplete, 4 points if navigation is missing or broken, and 3 points if there are no data placeholders. The full score is 10 points.", "maxScore": 10}, {"id": 3, "title": "Is the front-end responsive and mobile-friendly?", "description": "Verify if the application uses responsive design principles for different screen sizes (desktop, tablet, mobile). Check if media queries are properly implemented, if flexible grid systems are used, and if touch interfaces are considered. Score 0 if not responsive at all, 5 if partially responsive with issues, and 10 if fully responsive across devices.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as invalid form inputs, authentication failures, network errors, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Dark/light mode toggle 2. Animated transitions between pages 3. Personalized user greetings 4. Remember-me functionality). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple authentication methods without clear purpose) 2. Function modules unrelated to the movie website (e.g., unnecessary social media features) 3. Fancy effects that affect performance (e.g., excessive animations). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating UI/logic/data layers), code reusability, naming conventions, and build process setup. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the build process is not automated. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction smooth and seamless?", "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Click feedback delay ≤ 100ms 2) Transition animation duration controlled between 300-500ms 3) Clear visual focus guidance. Deduct 5 points for each operation without feedback, 3 points for visual after-images during fast sliding, and 5 points for hard-to-find key function buttons. The full score is 10 points.", "maxScore": 10}], "class": "Web Applications-Entertainment Platform", "difficulty": "easy"}
{"index": 446, "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure the code you generate is executable for display. Could you help me write a Vue 2 personal page for a smart agricultural marketplace system? This should be the user profile page that includes favorite items, order history, nickname and avatar, as well as a personal bio.", "checklist": [{"id": 0, "title": "Is the Vue 2 profile page component structure properly implemented?", "description": "Review whether the component structure follows Vue 2 best practices with proper separation of concerns. Check if single-file components (.vue files) are used with appropriate template, script, and style sections. Components should be modular and reusable. Score 0 if minimal Vue integration is implemented, 5 if basic Vue structure is present but with improper organization, and 10 if the component architecture is fully compliant with Vue 2 standards including props validation, lifecycle hooks, and proper data/computed property usage.", "maxScore": 10}, {"id": 1, "title": "Is the user profile data management properly implemented?", "description": "Evaluate how user profile data (nickname, avatar, bio) is fetched, displayed, and updated. Check for proper Vuex store integration or API service implementation. The code should handle loading states, error conditions, and successful data retrieval. Deduct 5 points if there's no error handling, 3 points if loading states aren't managed properly, and 3 points if data persistence isn't implemented. The full score is 10 points.", "maxScore": 10}, {"id": 2, "title": "Is the favorite items section fully functional?", "description": "Examine the implementation of the favorite agricultural items section. Verify if it includes listing, pagination, filtering options, and the ability to add/remove items from favorites. Check if item cards display appropriate information (image, name, price, availability). Deduct 3 points if pagination is missing, 3 points if there's no add/remove functionality, and 4 points if the display lacks essential agricultural product information. The full score is 10 points.", "maxScore": 10}, {"id": 3, "title": "Is the order history implementation complete and agriculture-specific?", "description": "Assess the order history implementation for agricultural products. Check if it includes order status tracking, delivery estimation (particularly important for fresh produce), sorting/filtering options, and order details with agricultural-specific information (harvest dates, origin farm, etc.). Deduct 3 points if order status tracking is missing, 3 points if agricultural-specific information is absent, and 4 points if sorting/filtering is not implemented. The full score is 10 points.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as network interruption, API failures, invalid user input, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the agricultural marketplace experience (e.g., 1. Seasonal product highlighting 2. Farm-to-table tracking visualization 3. Harvest calendar integration 4. Weather-based recommendations). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple ways to edit profile) 2. Function modules unrelated to an agricultural marketplace (e.g., social media features not tied to farm products) 3. Fancy effects that affect performance (e.g., excessive animations on produce listings). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating API services, Vue components, and state management), unit test coverage, and build process optimization. Deduct 5 points if global state pollution is found or Vue best practices are not followed; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the build process is not optimized for production. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards for an agricultural marketplace?", "description": "Evaluate whether the overall design follows modern design principles while being appropriate for an agricultural context: 1) Nature-inspired color palette (earthy tones, greens) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times) 4) Agricultural imagery and iconography. Deduct 3 points for each crowded visual element, 5 points for inconsistent color schemes, and 5 points for chaotic text-image layout. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction smooth and seamless?", "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Click feedback delay ≤ 100ms 2) Transition animation duration controlled between 300-500ms 3) Clear visual focus guidance, especially for agricultural product selection. Deduct 5 points for each operation without feedback, 3 points for visual after-images during fast sliding, and 5 points for hard-to-find key function buttons. The full score is 10 points.", "maxScore": 10}], "class": "Web Applications-Online Shopping", "difficulty": "hard"}
{"index": 1653, "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure the code you provide is executable whenever possible. I need to implement an AI conversation page using Vue, which should support WeChat Work login integration and API requests to a Spring Boot backend. How can this be implemented? Please provide detailed code and explanations.", "checklist": [{"id": 0, "title": "Is the Vue.js project structure properly organized?", "description": "Evaluate whether the code follows Vue.js best practices with a clear separation of components, views, services, and store modules. Check for proper use of Vue CLI scaffolding, clear folder structure (src/components, src/views, src/services, src/store), and appropriate naming conventions. Score 0 if the structure is chaotic, 5 if basic organization exists, and 10 if it follows industry-standard project architecture with reusable components.", "maxScore": 10}, {"id": 1, "title": "Is the WeChat Work login integration implemented correctly?", "description": "Review the implementation of WeChat Work SDK integration, including proper OAuth flow, QR code authentication, handling of callback URLs, token storage, and refresh mechanisms. Check for proper error handling during login failures. Deduct 5 points if the login flow is incomplete, 3 points if security best practices are not followed (such as insecure token storage), and 3 points if the integration lacks proper session management. The full score is 10 points.", "maxScore": 10}, {"id": 2, "title": "Is the AI conversation interface properly implemented?", "description": "Assess whether the conversation UI includes essential features: message history display, input area with submit functionality, loading indicators, and proper message formatting (user vs AI messages). Check for proper handling of conversation state, including message threading and context preservation. Deduct 5 points if the basic chat interface is missing key components, 3 points if message history isn't preserved properly, and 3 points if the UI doesn't clearly distinguish between user and AI messages. The full score is 10 points.", "maxScore": 10}, {"id": 3, "title": "Is the Spring Boot API integration complete and secure?", "description": "Evaluate the implementation of API services for communicating with the Spring Boot backend, including proper authentication header handling, request/response interceptors, error handling, and retry mechanisms. Check for proper data transformation between frontend and backend. Deduct 5 points for missing authentication, 3 points for inadequate error handling, and 3 points for lack of request cancellation or duplicate request prevention. The full score is 10 points.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as API failures, network interruptions, authentication errors, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Real-time typing indicators 2. Message read receipts 3. Voice input capability 4. Markdown rendering for AI responses 5. Message reactions). Add 2 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple HTTP client configurations) 2. Function modules unrelated to the chat application (e.g., unnecessary third-party plugins) 3. Fancy effects that affect performance (e.g., excessive animations or transitions). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating UI components/API services/state management), proper use of Vue composition API or options API, proper TypeScript usage if applicable, and test coverage. Deduct 5 points if global state pollution is found or Vue best practices are not followed; deduct 3 points if the code duplication rate is high; deduct 3 points if there are no unit tests. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction smooth and seamless?", "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Click feedback delay ≤ 100ms 2) Transition animation duration controlled between 300-500ms 3) Clear visual focus guidance. Deduct 5 points for each operation without feedback, 3 points for visual after-images during fast scrolling through chat history, and 5 points for hard-to-find key function buttons. The full score is 10 points.", "maxScore": 10}], "class": "Web Applications-Communication", "difficulty": "medium"}
{"index": 1510, "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure the code you provide is executable for demonstration. Help me write a Tetris mini-game, the kind that can be edited using a text document on a computer.", "checklist": [{"id": 0, "title": "Is the core Tetris gameplay fully implemented?", "description": "Evaluate whether the code implements all essential Tetris mechanics: 1) Seven standard tetromino shapes, 2) Rotation system, 3) Line clearing with scoring, 4) Level progression with increasing speed. Deduct 5 points if rotation near walls/other pieces isn't handled properly (wall kicks), 3 points if line clearing animations are missing, and 5 points if level progression is absent.", "maxScore": 10}, {"id": 1, "title": "Are all standard Tetris controls implemented?", "description": "Check for implementation of standard controls: 1) Left/right movement, 2) Rotation (clockwise/counterclockwise), 3) Soft drop, 4) Hard drop, 5) Hold piece functionality, 6) Next piece preview. Deduct 2 points for each missing control feature. Score 0 if movement and rotation aren't implemented.", "maxScore": 10}, {"id": 2, "title": "Is the game board correctly rendered in text format?", "description": "Assess whether the code can properly render the game state in ASCII/text format with clear representation of: 1) Active tetromino, 2) Placed blocks, 3) Game boundaries, 4) Score/level information. Score 10 for crisp, readable rendering that works in standard console/text environment, 5 for basic but unclear rendering, 0 if board rendering is broken or unreadable.", "maxScore": 10}, {"id": 3, "title": "Is the game loop implementation properly structured?", "description": "Evaluate the quality of the game loop implementation: 1) Consistent frame rate/timing management, 2) Input handling without blocking, 3) Update-render separation, 4) Proper game state transitions (start, play, pause, game over). Deduct 5 points if timing is inconsistent causing gameplay issues, 3 points if input handling blocks rendering, 5 points if game states aren't properly managed.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as invalid inputs, out-of-bounds conditions, unexpected termination) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Ghost piece showing where tetromino will land, 2. Multiple difficulty modes, 3. High score tracking across sessions). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple collision detection methods) 2. Function modules unrelated to Tetris gameplay (e.g., unnecessary mini-games) 3. Fancy features that complicate a text-based implementation (e.g., complex animations that break text rendering). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating game logic/rendering/input handling), clear function organization, and code readability. Deduct 5 points if global state is excessively used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if there's no clear separation between game mechanics and rendering. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Is the text-based interface clearly structured and easy to understand?", "description": "Evaluate whether the text interface follows good design principles: 1) Consistent character usage for different elements, 2) Clear boundaries and spacing, 3) Readable game information layout. Deduct 3 points for confusing character choices, 5 points for cramped layouts that make gameplay difficult, and 5 points for important game information being difficult to locate. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the game responsive and performant in a text environment?", "description": "Judge whether the implementation works well within text environment constraints: 1) Acceptable refresh rate without excessive flickering, 2) Responsive controls without noticeable input lag, 3) Efficient clearing and redrawing that works on standard terminals. Deduct 5 points for screen flickering that hinders gameplay, 3 points for delayed input response, and 5 points for rendering approaches that would fail on basic terminals. The full score is 10 points.", "maxScore": 10}], "class": "Game Development-Puzzle", "difficulty": "hard"}
{"index": 616, "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Ensure that the code you produce is executable when possible. Please design an image comparison tool that allows users to upload two images for visual comparison. The tool needs to support multiple comparison modes: 1) Slide comparison (drag the middle divider to view before and after comparison); 2) Transparency comparison (adjust the transparency of the top image); 3) Flip comparison (click to quickly switch between the two images); 4) Side-by-side comparison. Also provide synchronized zoom and pan functions to ensure that corresponding areas of both images can be precisely compared. This is suitable for designers comparing before and after design modifications or photographers comparing photos before and after processing.", "checklist": [{"id": 0, "title": "Is the image upload and display functionality fully implemented?", "description": "Review whether the code properly handles image upload (supporting common formats like JPG, PNG, WebP), validates file types/sizes, and correctly displays the images with proper error handling. Check if images are properly scaled to fit the viewport initially while preserving aspect ratios.0 points if image upload is not implemented; 5 points if basic upload works but lacks validation or proper error handling; 10 points for complete implementation with proper validation, error handling, and responsive display.", "maxScore": 10}, {"id": 1, "title": "Are all four comparison modes correctly implemented?", "description": "Verify that all required comparison modes function properly: 1) Slide comparison with draggable divider, 2) Transparency adjustment with smooth opacity control, 3) Flip comparison with clean toggling, and 4) Side-by-side view with consistent alignment. Each mode should handle image differences gracefully.Deduct 2.5 points for each missing or poorly implemented comparison mode. Full 10 points requires all four modes to be fully functional with smooth transitions between modes.", "maxScore": 10}, {"id": 2, "title": "Is the synchronized zoom and pan functionality implemented effectively?", "description": "Evaluate whether zoom and pan functions maintain perfect synchronization between images across all comparison modes. Check if zoom controls are intuitive (mouse wheel, pinch gesture, or UI controls), if pan works with mouse drag or touch gestures, and if the zoomed area remains properly aligned between images.0 points if zoom/pan is not implemented; 5 points if basic functionality exists but synchronization issues occur; 10 points if zoom/pan works flawlessly with proper event handling and maintains perfect alignment between images.", "maxScore": 10}, {"id": 3, "title": "Is the UI for switching between comparison modes intuitive and accessible?", "description": "Assess the implementation of mode switching UI: clearly labeled buttons/controls, visual indicators for active mode, smooth transitions between modes, and keyboard shortcuts for accessibility. Mode switching should preserve the current zoom/pan position.Deduct 3 points if mode switching is confusing or lacks visual feedback; deduct 2 points if transitions between modes are jarring; deduct 2 points if keyboard accessibility is missing. Full 10 points for intuitive, accessible controls with smooth transitions.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as invalid image files, extremely large/small images, browser compatibility issues, touch vs mouse input) and provide friendly error prompts or recovery mechanisms. Check if the tool degrades gracefully when features aren't supported.Evaluate whether the code can handle common abnormal situations (such as out-of-bounds input, network interruption, user operation errors, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Image histogram comparison, 2. Hotspot detection highlighting differences, 3. Image metadata display, 4. History of previous comparisons, 5. Integration with common design tools).Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple zoom controls with overlapping functionality) 2. Function modules unrelated to image comparison (e.g., unrelated editing tools) 3. Fancy effects that affect performance (e.g., unnecessary animations that slow rendering).Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating UI logic/image processing/event handling layers), code reusability, performance optimization for large images, and browser compatibility considerations. Check for proper memory management when handling multiple images.Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if image rendering optimization is poor (causing lag with larger images). The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times) 4) Clear visual distinction between control elements and image display area.Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction smooth and seamless?", "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Image loading shows clear progress indicators 2) Slide divider moves smoothly with cursor/touch 3) Opacity changes render without stuttering 4) Zoom/pan operates at 60fps without jank 5) Mode transitions use appropriate easing.Deduct 5 points for each operation without feedback, 3 points for visual stuttering during interactions, and 5 points for hard-to-find key function buttons. The full score is 10 points.", "maxScore": 10}], "class": "Multimedia Editing-Image Editing", "difficulty": "medium"}
{"index": 1340, "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure the generated code is executable whenever possible. Now, let's implement specific functionality: for file management, implement current directory display and modification, current directory tree view, and provide file editing, modification, deletion, and download functions. For database management, implement database type selection like MySQL/PostgreSQL, etc., and provide various input fields for database connection. After successful connection, enable database operations. For system shell, implement an interactive command-line terminal that can execute system commands.", "checklist": [{"id": 0, "title": "Is the file management system fully implemented?", "description": "Review whether the code accurately implements directory navigation, tree view display, and file operations through HTML/JavaScript. Check if it includes file upload/download functionality, file editing capabilities, and proper file type handling (text files, images, etc.). Score 0 if core file operations are not implemented, 5 if only basic file listing is implemented, and 10 if all file management features including editing, deletion, and download are fully functional.", "maxScore": 10}, {"id": 1, "title": "Is the database management functionality properly implemented?", "description": "Check whether the database connection system supports multiple database types (MySQL/PostgreSQL/SQLite), implements secure connection parameter handling, and provides query execution capabilities. Evaluate if it includes connection pooling, error handling for failed connections, and proper SQL query interface. Deduct 5 points if connection security is compromised, and 3 points if database type switching is not seamless. The full score is 10 points.", "maxScore": 10}, {"id": 2, "title": "Is the interactive command-line terminal fully functional?", "description": "Evaluate whether the terminal implementation provides real-time command execution, proper output display, and command history functionality. Check if it handles both synchronous and asynchronous commands correctly, implements command auto-completion, and provides proper error handling for invalid commands. Deduct 5 points if command execution blocks the UI, and 3 points if terminal output formatting is poor. The full score is 10 points.", "maxScore": 10}, {"id": 3, "title": "Is the system security and permission management properly designed?", "description": "Check whether the code implements proper access control for file operations, secure database credential handling, and command execution restrictions. Evaluate if it includes user authentication, file permission validation, and prevents dangerous command execution. Deduct 5 points if sensitive operations lack authorization checks, and 5 points if database credentials are stored insecurely. Give 10 points if comprehensive security measures are implemented.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as file access errors, database connection failures, command execution timeouts, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Real-time file preview with syntax highlighting 2. Database query result visualization 3. Terminal command suggestions with AI assistance 4. Integrated file diff viewer). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple file deletion methods coexisting) 2. Function modules unrelated to system management (e.g., built-in games or entertainment features) 3. Fancy effects that affect performance (e.g., excessive animations during file operations). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating file management/database/terminal modules), error handling consistency, and configuration management. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if configuration is hardcoded without environment variables. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching for different modules (no more than 3 primary colors) 2) Proper layout spacing with clear module separation (element spacing follows the 8px multiple principle) 3) Professional font system for code display (monospace fonts for terminal/code, body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction smooth and seamless?", "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) File operation feedback delay ≤ 100ms 2) Database query progress indicators with proper loading states 3) Terminal command execution with real-time output streaming 4) Clear visual focus guidance between different management modules. Deduct 5 points for each operation without feedback, 3 points for blocking UI during long operations, and 5 points for hard-to-find navigation between modules. The full score is 10 points.", "maxScore": 10}], "class": "Management Systems-Frontend/Backend Platforms", "difficulty": "easy"}
{"index": 1390, "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure the code you provide is executable for demonstration. Implement frontend display of financial data reports in Python.", "checklist": [{"id": 0, "title": "Does the code implement effective financial data visualization?", "description": "Review whether the code effectively uses visualization libraries (like Matplotlib, Plotly, Bokeh, or Dash) to display financial data through appropriate chart types (line charts for time series, bar charts for comparisons, pie charts for distributions). Score 0 if no visualizations are implemented, 5 if basic charts are created without customization, and 10 if comprehensive visualizations with proper financial indicators are created.", "maxScore": 10}, {"id": 1, "title": "Is there proper data handling and preprocessing for financial reports?", "description": "Evaluate whether the code includes proper financial data handling (using Pandas, NumPy), including cleaning missing values, handling outliers, normalizing data, and calculating financial metrics (e.g., moving averages, volatility, returns). Deduct 3 points if data validation is missing, 3 points if no financial calculations are performed, and 4 points if the preprocessing pipeline is incomplete. The full score is 10 points.", "maxScore": 10}, {"id": 2, "title": "Is there an interactive dashboard or report interface?", "description": "Check whether the code implements an interactive frontend (using Dash, Streamlit, Flask with JavaScript, or similar) that allows users to filter data, select time periods, drill down into details, and customize the financial report view. Deduct 5 points if no interactivity is implemented, 3 points if only basic filters exist, and 2 points if the interface lacks responsiveness. The full score is 10 points.", "maxScore": 10}, {"id": 3, "title": "Are appropriate financial metrics and KPIs displayed?", "description": "Assess whether the code calculates and displays relevant financial metrics (ROI, P/E ratio, EBITDA, cash flow analysis, risk metrics like Beta or Sharpe ratio). Deduct 3 points for each missing essential financial metric category, and award full 10 points only if comprehensive metrics with explanations are provided for financial decision-making.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as missing data, API failures, invalid user inputs, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. AI-powered trend predictions 2. PDF export with customizable templates 3. Alert system for threshold violations). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar chart types or calculations 2. Function modules unrelated to financial reporting 3. Excessive animations or visual elements that distract from financial insights. Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating data processing/visualization/interface layers), unit test coverage, and build process automation. Deduct 5 points if global variables are overused or design patterns are not applied; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the build process is not automated or documented. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the financial dashboard follows professional design principles: 1) Financial industry color scheme (conservative palette with highlight colors for alerts) 2) Proper layout spacing with clear hierarchy of information 3) Consistent typography that prioritizes readability (especially for numbers and tables). Deduct 3 points for each cluttered data visualization, 5 points for inappropriate color schemes in financial contexts, and 5 points for poor information hierarchy. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction smooth and seamless?", "description": "Judge whether the dynamic effects enhance financial data understanding: 1) Chart transitions that maintain context 2) Fast data filtering response (≤ 500ms) 3) Clear visual cues for data comparisons and trends. Deduct 5 points for lagging data updates, 3 points for confusing transitions between different views, and 5 points for difficult navigation between different financial metrics or time periods. The full score is 10 points.", "maxScore": 10}], "class": "Data Science-Data Visualization Dashboards", "difficulty": "medium"}
{"index": 628, "question": "You are a code expert, please use your professional knowledge to generate accurate and professional responses. Make sure the generated code is executable whenever possible. Develop a knowledge base management system where users can upload knowledge article files (supporting md, html formats) and add categories and tags to articles; knowledge base administrators (username: knowledgemgr, password: knowpass) can log into the system, manage knowledge articles, organize them by category or tag, and set access permissions for articles.", "checklist": [{"id": 0, "title": "Is the basic knowledge base architecture properly implemented?", "description": "Review whether the code establishes a complete knowledge base system with proper model structure for articles, categories, tags, and users. Check if the data models include necessary fields (title, content, author, timestamps, format type) and relationships. Score 0 if core data models are missing, 5 if basic models exist but lack key relationships, and 10 if a complete data architecture with proper relationships is implemented.", "maxScore": 10}, {"id": 1, "title": "Is the file upload functionality fully implemented?", "description": "Evaluate whether the system handles md and html file uploads correctly with proper validation, sanitization, and storage. Check if the code includes content type verification, file size limitations, and security measures against malicious uploads. Deduct 3 points if format validation is missing, 3 points if no security measures against XSS attacks are implemented, and 4 points if the upload process lacks error handling. The full score is 10 points.", "maxScore": 10}, {"id": 2, "title": "Are the category and tag management systems functioning correctly?", "description": "Check whether the code enables adding, editing, and deleting categories and tags, as well as assigning them to articles. The system should support hierarchical categories, batch operations, and article filtering by categories/tags. Deduct 3 points if hierarchical categories are not supported, 3 points if batch operations are missing, and 4 points if filtering functionality is incomplete. The full score is 10 points.", "maxScore": 10}, {"id": 3, "title": "Is the authentication and permission system properly implemented?", "description": "Review whether the code implements secure login functionality for administrators (username: knowledgemgr, password: knowpass), proper session management, and granular access control for articles. Check for password hashing, CSRF protection, and role-based permissions. Deduct 5 points if password security is weak, 3 points if session management is flawed, and 2 points if the permission system doesn't support article-level access control. The full score is 10 points.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as invalid uploads, authentication failures, concurrent access issues, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Full-text search with highlighting 2. Article version history tracking 3. Collaborative editing 4. AI-powered article recommendations). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple user management systems) 2. Function modules unrelated to knowledge base management (e.g., social networking features) 3. Fancy effects that affect performance (e.g., excessive animations). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating data/service/controller layers), unit test coverage, and build process automation. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the build process is not automated. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction smooth and seamless?", "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Click feedback delay ≤ 100ms 2) Transition animation duration controlled between 300-500ms 3) Clear visual focus guidance. Deduct 5 points for each operation without feedback, 3 points for visual after-images during fast sliding, and 5 points for hard-to-find key function buttons. The full score is 10 points.", "maxScore": 10}], "class": "Management Systems-Frontend/Backend Platforms", "difficulty": "hard"}
{"index": 662, "question": "You are a code expert, please use your professional knowledge to generate accurate and professional responses. Take care to ensure that the code you generate is executable for display. Develop a video timeline marking tool that allows users to add bookmark tags on the video timeline, attach text notes and thumbnails to each bookmark, support quick navigation through bookmarks, and export project files containing all marking information.", "checklist": [{"id": 0, "title": "Is the video player functionality properly implemented?", "description": "Evaluate whether the code creates a functional HTML5 video player that includes standard controls (play/pause, volume, fullscreen) and implements a custom timeline with proper event handling. The player should support common video formats (MP4, WebM) and handle video loading errors gracefully. Score 0 if no functional video player exists, 5 if only basic playback works, and 10 for a complete implementation with error handling.", "maxScore": 10}, {"id": 1, "title": "Is the bookmark tagging system fully implemented?", "description": "Check if the code allows users to create, edit, and delete bookmarks at specific timestamps on the video timeline. Bookmarks should be visually displayed on the timeline with proper positioning according to their timestamps. Deduct 5 points if bookmark creation is buggy, 3 points if bookmark positioning is inaccurate, and 2 points if editing functionality is incomplete. The full score is 10 points.", "maxScore": 10}, {"id": 2, "title": "Are text notes and thumbnails properly attached to bookmarks?", "description": "Assess whether the code implements functionality to add text notes to bookmarks and automatically generates thumbnails for each bookmark. Notes should be editable and thumbnails should accurately represent the video frame at the bookmark timestamp. Deduct 5 points if thumbnails aren't generated or are of poor quality, and 5 points if text note functionality is missing or incomplete. The full score is 10 points.", "maxScore": 10}, {"id": 3, "title": "Is bookmark navigation and project export functionality implemented?", "description": "Verify if the code implements quick navigation between bookmarks (clicking on a bookmark should seek the video to that timestamp) and allows exporting/importing project files containing all marking information (timestamps, notes, thumbnails). Deduct 5 points if navigation is not smooth or has bugs, and 5 points if export/import functionality is missing or incomplete. The full score is 10 points.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as unsupported video formats, large video files, concurrent bookmark operations, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Keyboard shortcuts for efficient marking 2. Color-coding for different types of bookmarks 3. Timeline zooming for precision marking). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple ways to create bookmarks that confuse users) 2. Function modules unrelated to video marking (e.g., unnecessary social sharing features) 3. Fancy effects that affect performance (e.g., excessive animations that slow down the interface). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating video player/bookmark management/UI components), unit test coverage, and build process automation. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the build process is not automated. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction smooth and seamless?", "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Bookmark creation response delay ≤ 100ms 2) Transition animations when navigating between bookmarks controlled between 200-400ms 3) Clear visual indication of current bookmark and playback position. Deduct 5 points for each operation without feedback, 3 points for jerky timeline scrolling, and 5 points for confusing navigation between bookmarks. The full score is 10 points.", "maxScore": 10}], "class": "Multimedia Editing-Video Production", "difficulty": "easy"}
{"index": 440, "question": "You are a code expert. Please utilize your professional knowledge to generate accurate and professional responses. Make sure the generated code is executable when possible. Generate an SPFx+Vue project.", "checklist": [{"id": 0, "title": "Is the SPFx project foundation correctly established?", "description": "Review if the code sets up a proper SPFx project structure with the required configurations (package-solution.json, config folder, etc.). Check if the proper SPFx version is specified and if the gulpfile.js includes all necessary build tasks. Score 0 if no SPFx structure exists, 5 if basic structure exists but with configuration errors, and 10 if a complete and valid SPFx project foundation is implemented.", "maxScore": 10}, {"id": 1, "title": "Is Vue properly integrated into the SPFx framework?", "description": "Evaluate whether the Vue integration follows best practices: 1) Proper webpack configuration for Vue SFC support 2) Vue component registration within SPFx web parts 3) Lifecycle management between SPFx and Vue instances. Deduct 5 points if Vue is loaded as an external script instead of webpack integration, 3 points if prop passing between SPFx and Vue is improperly handled, and 5 points if Vue devtools integration is missing. The full score is 10 points.", "maxScore": 10}, {"id": 2, "title": "Is the SPFx web part configuration properly implemented?", "description": "Check whether the web part implements property panes correctly, including property types, validation, groups, and custom controls. Verify the manifest.json file properly defines the web part capabilities and permissions. Deduct 3 points for missing localization, 5 points for incorrect property persistence, and 5 points if SharePoint context is not properly utilized. The full score is 10 points.", "maxScore": 10}, {"id": 3, "title": "Does the project demonstrate proper Vue component architecture?", "description": "Assess whether the Vue components follow the single responsibility principle, implement proper parent-child communication (props down, events up), and utilize Vue features appropriately (Vuex for state management, Vue Router if needed, computed properties, watchers, etc.). Deduct 5 points for monolithic components, 3 points for prop drilling beyond 3 levels, and 5 points if component reusability is poor. The full score is 10 points.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as network errors when fetching data from SharePoint, permission issues, browser compatibility problems, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Integration with Microsoft Graph API 2. Responsive design for mobile SharePoint 3. Performance optimizations like code-splitting or lazy loading). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant dependencies not utilized in the project 2. Bloated node_modules with unnecessary packages 3. Inclusion of both Vue 2 and Vue 3 artifacts or multiple state management solutions. Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating services/components/models), TypeScript usage (instead of plain JavaScript), and deployment pipeline setup. Deduct 5 points if 'any' type is overused; deduct 5 points if no unit tests are present; deduct 5 points if SharePoint-specific best practices are ignored (like proper API versioning). The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the design follows SharePoint/Fluent UI design principles: 1) Consistent use of Office UI Fabric/Fluent UI components 2) Proper theme token usage for colors/spacing 3) Responsive design for different screen sizes. Deduct 3 points for each instance of custom styles contradicting Fluent UI guidelines, 5 points for not respecting user's SharePoint theme settings, and 5 points for accessibility issues (contrast, keyboard navigation). The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction smooth and seamless?", "description": "Judge whether the dynamic effects conform to SharePoint UX patterns: 1) Loading states for async operations 2) Proper transitions between views/states 3) Optimistic UI updates where appropriate. Deduct 5 points for each operation without loading indicators, 3 points for jarring/abrupt transitions, and 5 points for UI elements that don't react to user interaction within 200ms. The full score is 10 points.", "maxScore": 10}], "class": "Other-Development Framework Setup", "difficulty": "hard"}
{"index": 136, "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure the code you generate is executable for demonstration purposes.\n\nPlease use HTML and JavaScript to implement a Space Colony game, where players need to establish colonies in space.\nHint: Implement space environment and resource management.\nInclude comments in the code so that other developers can understand your implementation process.", "checklist": [{"id": 0, "title": "Is the space environment visualization properly implemented?", "description": "Review whether the code creates a visually appealing space environment with appropriate celestial bodies, stars, or other space elements using HTML5 Canvas/SVG/WebGL. Check if the environment has depth perception and proper scaling. Score 0 if there's no visual environment, 5 if it's basic/static, and 10 if it has dynamic elements with proper physics representation.", "maxScore": 10}, {"id": 1, "title": "Is the colony building system fully functional?", "description": "Evaluate whether players can place, upgrade, and manage different types of colony structures. Check if there are different building categories (like habitats, resource extractors, energy generators) with unique functions. Deduct 5 points if buildings lack visual differentiation, 3 points if upgrade paths aren't implemented. The full score is 10 points.", "maxScore": 10}, {"id": 2, "title": "Is the resource management system comprehensive?", "description": "Check whether the game implements a complete resource economy (oxygen, water, minerals, energy, food) with meaningful collection, storage, consumption, and conversion mechanics. Verify if resource constraints create meaningful gameplay decisions. Deduct 3 points if resource visualization is missing, 5 points if the resource system lacks balance or complexity. The full score is 10 points.", "maxScore": 10}, {"id": 3, "title": "Is the gameplay loop well-designed with clear progression?", "description": "Assess whether the code implements a satisfying gameplay loop with short-term goals and long-term colony development. Check if there are research systems, milestones or achievements to guide player progression. Deduct 5 points if there's no clear goal structure, 3 points if progression feels linear or lacks meaningful choices. The full score is 10 points.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as invalid inputs, runtime errors, edge cases in game mechanics) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Dynamic disasters like meteor showers or solar flares 2. Colonist needs and happiness systems 3. Procedural generation of space environments). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple resource tracking systems) 2. Function modules unrelated to space colonization (e.g., unnecessary mini-games) 3. Fancy effects that affect performance (e.g., excessive particle effects). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating game mechanics/view/data management layers), code organization, and maintainability. Evaluate quality of comments as specified in the requirements. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if comments are missing or unhelpful. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (space-appropriate palette with clear contrast) 2) Proper layout spacing (UI elements organized in logical groups with proper hierarchy) 3) Professional font system (readable fonts with good contrast against space backgrounds). Deduct 3 points for each crowded visual element, 5 points for poor color choices that harm readability, and 5 points for chaotic UI organization. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction smooth and seamless?", "description": "Judge whether the game interactions feel responsive and intuitive: 1) Building placement and selection feels precise 2) Resource management interfaces update smoothly 3) Clear visual feedback for all player actions. Deduct 5 points for laggy animations, 3 points for confusing interaction models, and 5 points for missing feedback on important game events. The full score is 10 points.", "maxScore": 10}], "class": "Game Development-Simulation/Management", "difficulty": "easy"}
{"index": 594, "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Be sure to ensure that the code you generate is executable when possible. Implement a printer management interface where users can view a list of currently connected printers, including printer names, models, and remaining paper quantity; administrators can add new printers, delete printers, or set a default printer.", "checklist": [{"id": 0, "title": "Is the printer list display functionality fully implemented?", "description": "Review if the code accurately displays all connected printers with their names, models, and remaining paper quantity. The display should be responsive and sortable. Score 0 if the core display logic is missing, 5 if only basic listing is implemented without sorting/filtering capabilities, and 10 if the interface includes advanced features like search, sorting, and pagination.", "maxScore": 10}, {"id": 1, "title": "Are the administrator functions (add, delete, set default) properly implemented?", "description": "Evaluate whether the code includes proper form validation for adding new printers (required fields, format validation), confirmation dialogs for deletion, and visual indication of the default printer. Deduct 3 points if form validation is missing, 3 points if there's no confirmation for destructive actions, and 3 points if the default printer setting doesn't have immediate visual feedback. The full score is 10 points.", "maxScore": 10}, {"id": 2, "title": "Is there proper authentication and authorization control?", "description": "Check if the code implements role-based access control that strictly separates administrator functions from regular user views. Evaluate whether proper authentication checks are in place before executing privileged operations. Deduct 5 points if admin functions are accessible to all users, and 5 points if there's no session validation or token-based security. The full score is 10 points.", "maxScore": 10}, {"id": 3, "title": "Is the printer status monitoring and refresh mechanism implemented?", "description": "Assess whether the code includes real-time or polling updates for printer status (particularly paper quantity). Check if there's a proper refresh mechanism (manual refresh button and/or automatic updates). Deduct 5 points if status updates require page reload, and 5 points if there's no visual indication when printer status changes. The full score is 10 points.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as network errors when fetching printer data, validation failures, disconnected printers, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Visual printer ink/toner levels 2. Print queue visualization 3. Printer usage statistics dashboard). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple ways to set default printers) 2. Function modules unrelated to printer management (e.g., a built-in calculator) 3. Fancy effects that affect performance (e.g., unnecessary animations). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating data/service/view layers), component reusability, and build process automation. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the build process is not automated. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction smooth and seamless?", "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Click feedback delay ≤ 100ms 2) Transition animation duration controlled between 300-500ms 3) Clear visual focus guidance for admin operations. Deduct 5 points for each operation without feedback, 3 points for sluggish transitions when adding/removing printers, and 5 points for hard-to-find key function buttons. The full score is 10 points.", "maxScore": 10}], "class": "Management Systems-Hardware Management", "difficulty": "easy"}
{"index": 1311, "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Be sure to ensure the generated code is executable for display. Help me generate a functional prototype according to the interface configuration content.\n\nFirst, select a menu for page configuration. Step one is to choose a layout template to determine the page layout and which specific components to include (components include: left tree, query area, tab area, button area, list area). Step two is to configure the basic information of the menu, such as whether to enable workflow. Step three is to configure the UI of each component - when there is a left tree, configure the left tree first; when there is a tab area, configure the tabs first. Tables and buttons under different tabs may vary. Step four is to implement rule connections - each component supports connecting rules.", "checklist": [{"id": 0, "title": "Is the menu page configuration system fully implemented?", "description": "Review whether the code accurately implements the four-step configuration process: layout template selection, basic menu information setup, component UI configuration, and rule connections. Check if all specified components (left tree, query area, tab area, button area, list area) are properly rendered and configurable. Score 0 if core configuration logic is missing, 5 if only basic template selection is implemented, and 10 if all configuration steps are fully functional with proper state management.", "maxScore": 10}, {"id": 1, "title": "Is the dynamic component rendering and layout system implemented?", "description": "Evaluate whether the layout template system can dynamically render different component combinations based on user selection. Check if the component positioning, sizing, and responsive behavior work correctly across different templates. Verify that component visibility and arrangement update in real-time during configuration. Deduct 5 points if layout breaks with certain component combinations, and 3 points if responsive behavior is inconsistent. Full score is 10 points.", "maxScore": 10}, {"id": 2, "title": "Is the component configuration management properly designed?", "description": "Check whether each component (left tree, query area, tab area, button area, list area) has a comprehensive configuration interface with proper validation. Evaluate if the hierarchical configuration logic (left tree first, then tabs, then tables/buttons under tabs) is correctly implemented with dependency management. Deduct 5 points if configuration data structure is poorly designed, and 3 points if component dependencies are not properly handled. Full score is 10 points.", "maxScore": 10}, {"id": 3, "title": "Is the rule connection system architected and workflow integration provided?", "description": "Assess whether the rule connection mechanism allows meaningful relationships between components with proper validation and conflict resolution. Check if workflow enablement affects the available rule types and component behaviors. Evaluate if rule connections persist correctly and can be visualized/edited. Deduct 5 points if rule validation is missing, and 3 points if workflow integration is superficial. Give 10 points if fully implemented with visual rule mapping.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as invalid configuration data, component loading failures, rule conflicts, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the configuration experience (e.g., 1. Visual drag-and-drop layout designer 2. Real-time preview with mock data 3. Configuration templates with import/export 4. Undo/redo configuration history). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar configuration functions (e.g., multiple component property panels) 2. Function modules unrelated to page configuration (e.g., built-in data analysis tools) 3. Fancy effects that affect configuration performance (e.g., heavy animations during component rendering). Deduct 3 points for each redundancy found, and directly deduct 10 points if core configuration functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating configuration logic/component rendering/state management), component reusability, and build process automation. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if configuration data serialization is not properly implemented. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the configuration interface follows modern design principles: 1) Harmonious color matching with clear visual hierarchy 2) Proper layout spacing following grid systems 3) Professional typography with clear form labels and help text 4) Consistent iconography and button styles. Deduct 3 points for each crowded configuration panel, 5 points for confusing visual hierarchy, and 5 points for inconsistent UI components. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the configuration interaction smooth and intuitive?", "description": "Judge whether the configuration workflow is intuitive and efficient: 1) Step-by-step guidance with clear progress indication 2) Immediate visual feedback for configuration changes 3) Smooth transitions between configuration steps 4) Context-sensitive help and validation messages. Deduct 5 points for each configuration step without proper feedback, 3 points for confusing navigation between steps, and 5 points for unintuitive component configuration interfaces. The full score is 10 points.", "maxScore": 10}], "class": "Management Systems-Frontend/Backend Platforms", "difficulty": "hard"}
{"index": 1047, "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure the code you provide is executable. Help me complete a program, a browser-based data post-processing software, with functions including data import, data processing, data statistics, and speed-based statistics.", "checklist": [{"id": 0, "title": "Is the data import functionality comprehensively implemented?", "description": "Review whether the code supports multiple data formats (CSV, JSON, XML, Excel) with proper file validation and parsing. Check if drag-and-drop upload, batch import, and large file chunked processing are implemented. Score 0 if only basic file reading is present, 5 if single format import works, and 10 if multiple formats with validation and error handling are fully supported.", "maxScore": 10}, {"id": 1, "title": "Is the data processing engine robust and feature-complete?", "description": "Evaluate whether the processing capabilities include data cleaning (null value handling, duplicate removal), transformation (filtering, sorting, grouping), and computation (aggregation, mathematical operations). Check for undo/redo functionality and processing history. Deduct 5 points if no data validation is present, 3 points if processing operations cannot be chained. Full score requires comprehensive processing pipeline with preview capabilities.", "maxScore": 10}, {"id": 2, "title": "Are comprehensive data statistics features implemented?", "description": "Check whether statistical analysis includes descriptive statistics (mean, median, mode, standard deviation), correlation analysis, and trend analysis. Verify if results are exportable and visualized through charts/graphs. Deduct 5 points if only basic calculations are present, 3 points if no visualization is provided. Full score requires advanced statistical functions with interactive charts.", "maxScore": 10}, {"id": 3, "title": "Is speed-based statistics functionality properly designed and implemented?", "description": "Evaluate whether the system can measure and analyze processing speeds, performance metrics, and throughput statistics. Check for real-time performance monitoring, benchmark comparisons, and performance optimization suggestions. Deduct 5 points if only basic timing is implemented, 3 points if no performance analytics dashboard is present. Full score requires comprehensive speed analysis with actionable insights.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as corrupted files, invalid data formats, memory limitations, browser compatibility issues) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should effectively handle edge cases including large dataset processing without crashes. Give 10 points if fully robust, 5 points if average, and 0 points if no exception handling.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Real-time data preview during processing 2. Smart data type detection and suggestions 3. Collaborative data sharing capabilities 4. Advanced visualization templates). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple data parsing logics coexisting) 2. Function modules unrelated to data processing (e.g., built-in games or social features) 3. Fancy effects that affect performance (e.g., excessive animations during data processing). Deduct 3 points for each redundancy found, and directly deduct 10 points if core functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating data processing/UI/storage layers), error handling coverage, and code organization. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if no proper data validation or sanitization is implemented. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times) 4) Clear data table presentation with proper contrast ratios. Deduct 3 points for each crowded visual element, 5 points for glaring color combinations, and 5 points for chaotic data layout. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction smooth and seamless?", "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) File upload feedback delay ≤ 100ms 2) Data processing progress indicators with smooth animations 3) Transition effects controlled between 300-500ms 4) Clear visual focus guidance during multi-step workflows. Deduct 5 points for each operation without feedback, 3 points for laggy data table scrolling, and 5 points for hard-to-find key function buttons. The full score is 10 points.", "maxScore": 10}], "class": "Data Science-Statistical Analysis", "difficulty": "hard"}
{"index": 568, "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Try to ensure the code you generate is executable.\n\n======== ROLE ========\nYou are an experienced code expert. You are provided with a software development requirement description and asked to generate project code based on these requirements. Strictly follow the rules to help users generate complete project code that is fully commented in simple, easy-to-understand language. Do not output anything else.\n\n======== OUTPUT RULES ========\n1. Always generate complete, runnable project code, ensuring the project is fully executable\n2. Ensure all code files you output are complete without omitting any code\n3. Carefully review and check all code before final output to evaluate its executability. If the code cannot be executed or contains errors, regenerate it\n4. If the requirements involve external API access or need to use user data (images, videos, audio, etc.), provide simulated data\n\n======== PROJECT REQUIREMENT DESCRIPTION ========\nCreate a front-end project for removing vocals from audio. Users can upload audio files containing vocals, and the program will attempt to remove the vocals. After processing, users can listen to and save the instrumental version of the audio.", "checklist": [{"id": 0, "title": "Is the audio file upload and processing system fully implemented?", "description": "Review whether the code accurately implements file upload functionality for audio files, validates file types/sizes, and provides appropriate feedback during the upload process. Check if error handling for invalid files is implemented. Score 0 if the upload functionality is missing, 5 if basic upload is implemented without validation, and 10 if complete with validation, progress indication, and error handling.", "maxScore": 10}, {"id": 1, "title": "Is the vocal removal algorithm correctly implemented?", "description": "Evaluate the implementation of the vocal removal algorithm. Check if it uses appropriate audio processing techniques (such as center channel elimination, frequency filtering, or machine learning approaches). Verify if the algorithm handles different audio formats and quality levels. Score 0 if no algorithm is implemented, 5 if a basic approach is used but with significant limitations, and 10 if a comprehensive solution with adjustable parameters is provided.", "maxScore": 10}, {"id": 2, "title": "Is the audio playback functionality complete and user-friendly?", "description": "Check if the code includes proper audio playback controls for both the original and processed audio. This should include play/pause, volume control, seeking capabilities, and display of current playback position/duration. Score 0 if playback is missing, 5 if basic playback is implemented but missing controls, and 10 if all expected features are present with visual feedback.", "maxScore": 10}, {"id": 3, "title": "Is the audio download/save functionality implemented correctly?", "description": "Review if the code allows users to save/download the processed instrumental audio in appropriate formats. Check if file naming conventions and metadata are handled properly. Score 0 if saving functionality is missing, 5 if basic download is implemented but with limitations, and 10 if the feature is complete with format options and proper metadata preservation.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as incompatible audio formats, large file sizes, browser compatibility issues, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Realtime visualization of audio waves/spectrum 2. Adjustable parameters for vocal isolation strength 3. Before/after comparison functionality). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple audio processing libraries doing the same work) 2. Function modules unrelated to audio processing (e.g., unnecessary social media integrations) 3. Fancy effects that affect performance (e.g., excessive animations that slow down audio processing). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating audio processing logic/UI/file handling), code reusability, and build process automation. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the build process is not automated. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction smooth and seamless?", "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Click feedback delay ≤ 100ms 2) Transition animation duration controlled between 300-500ms 3) Clear visual feedback during audio processing. Deduct 5 points for each operation without feedback, 3 points for laggy UI during audio processing, and 5 points for confusing processing state indicators. The full score is 10 points.", "maxScore": 10}], "class": "Multimedia Editing-Audio Editing", "difficulty": "medium"}
{"index": 259, "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure the generated code is executable for demonstration purposes. Implement Teamfight Tactics using HTML.", "checklist": [{"id": 0, "title": "Is the core game board and piece placement system implemented?", "description": "Check whether the HTML/CSS/JavaScript code accurately implements the hexagonal game board used in TFT, with correct grid alignment and piece placement. Verify if unit positioning logic is implemented, including bench positions and board positions. Score 0 if the hexagonal board isn't implemented, 5 if only basic positioning exists, and 10 if the complete board with proper unit dragging/positioning is fully functional.", "maxScore": 10}, {"id": 1, "title": "Is the champion/unit system properly implemented?", "description": "Evaluate if the code includes proper representation of champions with their attributes (cost, stars, traits, abilities), and if unit upgrading mechanics (combining 3 identical units) are implemented. Check if unit stats and abilities are displayed when selected. Deduct 3 points if champions lack proper traits/synergies, 5 points if unit upgrading is missing, and 3 points if unit stats display is incomplete. The full score is 10 points.", "maxScore": 10}, {"id": 2, "title": "Are team synergies and trait bonuses implemented?", "description": "Verify whether the code calculates and displays trait synergies based on active units on the board. Check if trait thresholds and corresponding bonuses are implemented correctly and visually indicated. Score 0 if synergies aren't implemented, 5 if basic trait counting exists but without effects, and 10 if complete synergy system with visual indicators and actual gameplay effects is implemented.", "maxScore": 10}, {"id": 3, "title": "Is the game economy and shop system implemented?", "description": "Check if the shop system allows purchasing units, refreshing the shop, and if the player economy (gold accumulation, interest system) is implemented. Verify if leveling up mechanics and shop odds based on player level work correctly. Deduct 3 points if gold interest isn't calculated, 5 points if shop probabilities don't change with levels, and 3 points if bench management is problematic. The full score is 10 points.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as invalid unit placements, attempting actions without sufficient gold, browser window resizing, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Visual combat simulations 2. Detailed damage/healing statistics 3. Item combination guide overlays). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple ways to calculate damage) 2. Function modules unrelated to TFT core gameplay (e.g., unnecessary social features) 3. Fancy effects that affect performance (e.g., excessive animations that slow down unit movement). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating game logic/view/data management layers), component reusability, and code organization. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if there's no clear separation between game mechanics and UI rendering. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching that reflects TFT's visual identity 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system with clear readability for unit stats and traits. Deduct 3 points for each crowded visual element, 5 points for inconsistent visual styles, and 5 points for poor information hierarchy. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction smooth and seamless?", "description": "Judge whether the dynamic effects conform to game requirements: 1) Responsive drag-and-drop for unit placement (≤ 50ms lag) 2) Clear visual feedback when performing actions (purchasing, combining units, activating synergies) 3) Intuitive UI for shop refreshes and unit management. Deduct 5 points for sluggish drag-and-drop mechanics, 3 points for unclear visual feedback on important actions, and 5 points for unintuitive gameplay controls. The full score is 10 points.", "maxScore": 10}], "class": "Game Development-Strategy", "difficulty": "hard"}
{"index": 1363, "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure the code you generate is executable for demonstration. I want to design a GUI for sensor calibration, such as camera intrinsic calibration, camera-to-LiDAR extrinsic calibration, and LiDAR-to-LiDAR calibration, with each task on a separate page.", "checklist": [{"id": 0, "title": "Is the multi-page GUI architecture implemented correctly?", "description": "Evaluate whether the code implements a clean multi-page architecture with separate pages for camera intrinsic calibration, camera-to-LiDAR extrinsic calibration, and LiDAR-to-LiDAR calibration. Check for proper navigation between pages, consistent layout framework, and state management across different calibration workflows. Score 0 if pages are not separated, 5 if basic page separation exists but with navigation issues, and 10 if a complete, smooth multi-page system is implemented.", "maxScore": 10}, {"id": 1, "title": "Is the camera intrinsic calibration functionality complete?", "description": "Review the implementation of camera intrinsic calibration features, including checkerboard pattern detection, multiple image collection interface, calibration parameter visualization, and reprojection error analysis. Check for essential operations like image upload/capture, automatic corner detection with visual feedback, and parameter output (focal length, principal point, distortion coefficients). Deduct 5 points if corner detection visualization is missing, 3 points if reprojection error analysis is absent, and 2 points if parameter export functionality is not provided. The full score is 10 points.", "maxScore": 10}, {"id": 2, "title": "Is the camera-to-LiDAR extrinsic calibration implementation comprehensive?", "description": "Assess the camera-to-LiDAR calibration functionality, including point cloud and image visualization, feature correspondence selection, transformation matrix computation, and calibration quality evaluation. Check for interactive point selection in both modalities, visualization of projection results, and optimization workflow. Deduct 5 points if real-time visualization of registration results is missing, 3 points if error metrics are not displayed, and 2 points if the workflow doesn't allow for refinement iterations. The full score is 10 points.", "maxScore": 10}, {"id": 3, "title": "Is the LiDAR-to-LiDAR calibration system properly implemented?", "description": "Evaluate the LiDAR-to-LiDAR calibration module, including point cloud loading and visualization, feature extraction for alignment, ICP or NDT algorithm implementation, and transformation validation. Check for interactive adjustment capabilities, multi-view visualization (top-down, side views), and quantitative alignment metrics. Deduct 5 points if point cloud visualization lacks proper controls (zoom, rotation, translation), 3 points if automatic alignment algorithms are missing, and 2 points if alignment quality metrics are not provided. The full score is 10 points.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as invalid image inputs, corrupt point cloud data, calibration failures, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the calibration experience (e.g., 1. Real-time calibration quality visualization 2. Automatic calibration target detection 3. Calibration history comparison 4. AR visualization of sensor alignment). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar calibration algorithms 2. Function modules unrelated to sensor calibration 3. Fancy visualization effects that adversely impact performance or usability. Deduct 3 points for each redundancy found, and directly deduct 10 points if the core calibration functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating calibration algorithms/UI/data processing layers), unit test coverage, and build process automation. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the build process is not automated. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching suitable for technical applications 2) Proper layout spacing with clear separation between visualization and control areas 3) Professional font system with clear labeling of technical parameters. Deduct 3 points for cluttered calibration controls, 5 points for poor contrast that makes data hard to read, and 5 points for inconsistent layout across different calibration pages. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction smooth and intuitive for technical users?", "description": "Judge whether the interface provides appropriate interaction for sensor calibration: 1) Clear visual feedback during calibration steps 2) Intuitive controls for point selection and adjustment 3) Responsive visualization updates after parameter changes. Deduct 5 points for calibration operations without visual feedback, 3 points for laggy point cloud rendering during interaction, and 5 points for unintuitive calibration workflow that would confuse technical users. The full score is 10 points.", "maxScore": 10}], "class": "Management Systems-Frontend/Backend Platforms", "difficulty": "hard"}
{"index": 1165, "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Be sure to provide executable code when possible. I am a programming novice and need to create a WeChat mini-program for online shopping. The content should include a changeable avatar at the top of the screen, the online store name below the avatar, and navigation options and product names further down.", "checklist": [{"id": 0, "title": "Is the WeChat mini-program structure and configuration correctly implemented?", "description": "Review whether the code includes proper app.json configuration with required pages, window settings, and tabBar navigation. Check if app.js contains valid lifecycle methods and global data management. Verify pages structure follows WeChat mini-program standards with .wxml, .wxss, .js, and .json files. Score 0 if basic mini-program structure is missing, 5 if only partial configuration is present, and 10 if complete standard structure is implemented with proper manifest configuration.", "maxScore": 10}, {"id": 1, "title": "Is the avatar change functionality fully operational?", "description": "Check whether the avatar change feature uses wx.chooseImage or wx.chooseMedia API correctly, includes image upload handling, and provides fallback for different image formats. Verify if the code handles image compression, local storage persistence, and error scenarios. Deduct 5 points if no image selection API is implemented, 3 points if image persistence is missing, and 2 points if error handling is inadequate. The full score is 10 points.", "maxScore": 10}, {"id": 2, "title": "Are the navigation and product display components properly structured?", "description": "Evaluate whether the navigation uses proper WeChat components (navigator, tabbar, or custom navigation) and product list implements scroll-view or list rendering with wx:for. Check if data binding follows MVVM pattern and includes proper event handling for user interactions. Deduct 5 points if navigation doesn't follow WeChat UI guidelines, 3 points if product list lacks proper data binding, and 2 points if click events are not properly handled. The full score is 10 points.", "maxScore": 10}, {"id": 3, "title": "Is the shopping cart and order management system implemented?", "description": "Check whether the code includes add-to-cart functionality, cart item management, quantity adjustment, and basic order processing. Verify if local storage (wx.setStorageSync) is used for cart persistence and if the shopping flow is complete from product selection to order confirmation. Deduct 5 points if cart functionality is missing, 3 points if data persistence is not implemented, and 2 points if order flow is incomplete. Give 10 points if fully functional shopping system is present.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as network failures, API errors, image loading failures, storage quota exceeded, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should include try-catch blocks, loading states, and graceful degradation, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that enhance user experience?", "description": "Check whether the code includes practical enhancements such as: 1. Product search and filtering 2. Favorites/wishlist functionality 3. User reviews and ratings 4. Share to WeChat moments 5. Scan QR code for products 6. Location-based store recommendations. Add 2 points for each well-implemented innovative feature (maximum 10 points). Features must be functional, not just UI mockups.", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple cart storage methods coexisting) 2. Function modules unrelated to shopping (e.g., built-in games or entertainment features) 3. Overly complex animations that affect mini-program performance (e.g., heavy 3D effects or excessive particle systems). Deduct 3 points for each redundancy found, and directly deduct 10 points if core shopping functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (separating components, utils, and services), proper use of WeChat mini-program best practices, and code organization. Check for component reusability, proper data flow management, and adherence to WeChat development guidelines. Deduct 5 points if global data pollution is found or components are not properly encapsulated; deduct 3 points if code duplication rate is high; deduct 2 points if WeChat-specific optimizations are missing. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface design meet WeChat mini-program design standards?", "description": "Evaluate whether the design follows WeChat Design Guidelines: 1) Consistent with WeChat native UI components and color scheme 2) Proper use of rpx units for responsive design 3) Clear visual hierarchy with appropriate spacing (following 8rpx grid system) 4) Readable typography (minimum 28rpx for body text) 5) Proper use of WeChat official icons. Deduct 3 points for each design inconsistency, 5 points for poor responsive behavior, and 2 points for accessibility issues. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the interaction smooth and follows WeChat mini-program UX patterns?", "description": "Judge whether interactions conform to WeChat mini-program standards: 1) Proper loading states and feedback (wx.showLoading, wx.showToast) 2) Smooth page transitions and navigation 3) Touch-friendly interactive elements (minimum 88rpx touch targets) 4) Proper use of WeChat native interactions (pull-to-refresh, reach-bottom loading). Deduct 5 points for each missing feedback mechanism, 3 points for slow or janky animations, and 2 points for poor touch responsiveness. The full score is 10 points.", "maxScore": 10}], "class": "Web Applications-Online Shopping", "difficulty": "easy"}
{"index": 1345, "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Be sure to ensure that the code you generate is executable. Help me write a locally launched computer application including both frontend and backend, implementing the following lottery logic: from numbers 1-200, draw two numbers from each group of ten, for a total of forty \"general benefit\" prizes, and additionally draw three third-place prizes, two second-place prizes, and one first-place prize.", "checklist": [{"id": 0, "title": "Lottery Core Algorithm Implementation", "description": "Evaluate the implementation of the core lottery drawing algorithm that correctly selects numbers according to the specified requirements: 40 'general benefit' prizes (two from each group of ten numbers 1-200), plus 3 third-place prizes, 2 second-place prizes, and 1 first-place prize.Check if the algorithm correctly implements: 1) Selection of exactly 2 numbers from each decade (1-10, 11-20, etc.) 2) No duplicates across all prize tiers 3) Clear distinction between general and special prizes. Score 0 if the core algorithm is missing, 5 if partially implemented with errors, and 10 if fully implemented with proper validation.", "maxScore": 10}, {"id": 1, "title": "Frontend-Backend Integration", "description": "Assess how well the frontend and backend components communicate and work together to provide a seamless lottery application.Check for: 1) Proper API endpoints for lottery operations 2) Appropriate data transfer format (JSON/XML) 3) Error handling for failed requests 4) Loading states during backend operations. Deduct 3 points for missing error handling, 3 points for no loading indicators, and 4 points if the integration is completely broken or missing. The full score is 10 points.", "maxScore": 10}, {"id": 2, "title": "Local Application Deployment", "description": "Evaluate how easily the application can be launched locally with clear setup instructions.Check if the solution includes: 1) Clear setup instructions 2) Dependency management (package.json, requirements.txt, etc.) 3) Configuration options for local environment 4) Single command startup process. Deduct 2 points for each missing component. Award full 10 points only if a novice developer could set up and run the application within 10 minutes.", "maxScore": 10}, {"id": 3, "title": "Lottery Result Visualization", "description": "Evaluate the visual presentation of the lottery results, including how clearly different prize tiers are displayed and distinguished.Check whether: 1) Results clearly distinguish between prize categories 2) Visual hierarchy emphasizes higher-value prizes 3) Animation or visual effects enhance the drawing experience 4) Results are easily readable and accessible. Deduct 2 points for each missing aspect. Give 10 points only if the visualization is both functional and engaging.", "maxScore": 10}, {"id": 4, "title": "Code Robustness", "description": "Evaluate whether the code can handle common abnormal situations and provide friendly error prompts or recovery mechanisms.Evaluate whether the code can handle: 1) Invalid inputs 2) Random number generation edge cases 3) User interaction errors 4) Server/client connection issues. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Innovative Features", "description": "Check whether the code includes surprise features that enhance the lottery experience.Check for features like: 1) Draw history tracking 2) Statistical analysis of past draws 3) Personalized 'lucky number' recommendations 4) Visual/audio feedback during drawing process. Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Redundant Features", "description": "Strictly check for unnecessary or redundant features that complicate the codebase without adding value.Check for three types of redundancy: 1) Multiple implementations of similar functions 2) Unrelated features that distract from the lottery purpose 3) Over-engineered solutions for simple requirements. Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Engineering Quality", "description": "Review code architecture, testing, and build processes for professional engineering standards.Review for: 1) Modular design separating lottery logic/UI/data layers 2) Unit test coverage of critical functions 3) Build process automation 4) Clean code principles. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the build process is not automated. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Interface Design Quality", "description": "Evaluate whether the overall UI design follows modern design principles and provides a professional look.Evaluate whether the design follows: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "User Interaction Quality", "description": "Judge whether the dynamic effects and user interactions are smooth, intuitive, and provide appropriate feedback.Judge whether interactions: 1) Provide feedback within 100ms of user actions 2) Include appropriate animations for lottery drawing (300-500ms duration) 3) Guide user focus to important elements 4) Make the lottery drawing process exciting. Deduct 5 points for each operation without feedback, 3 points for visual after-images during animations, and 5 points for hard-to-find key function buttons. The full score is 10 points.", "maxScore": 10}], "class": "Management Systems-Frontend/Backend Platforms", "difficulty": "easy"}
{"index": 826, "question": "You are a code expert, please use your professional knowledge to generate accurate, professional responses. Make sure the generated code is executable for demonstration. Implement Word document import with online editing in a Vue project, with the ability to save and then export it.", "checklist": [{"id": 0, "title": "Is the Word document import functionality fully implemented?", "description": "Review whether the code accurately implements Word document parsing through Vue.js components, including support for multiple formats (.docx, .doc), proper handling of document structure (paragraphs, tables, images, formatting), and preservation of original document styling. Score 0 if basic import is not working, 5 if only plain text import is supported, and 10 if complete document structure and formatting are preserved during import.", "maxScore": 10}, {"id": 1, "title": "Is the online editing system comprehensively functional?", "description": "Check whether the Vue-based editor includes essential editing features: rich text formatting (bold, italic, underline, font selection), paragraph alignment, list management, table insertion/editing, image handling, and undo/redo operations. Verify real-time content synchronization and cursor position management. Deduct 5 points if table editing is missing, 3 points if formatting toolbar is incomplete. The full score is 10 points.", "maxScore": 10}, {"id": 2, "title": "Is the document save mechanism properly designed with version control?", "description": "Evaluate whether the save functionality implements auto-save intervals (every 30-60 seconds), manual save triggers, and proper data persistence. Check for version history tracking, conflict resolution for concurrent edits, and data integrity validation. Deduct 5 points if auto-save is missing, 3 points if no version tracking exists. Verify that save operations handle network failures gracefully. The full score is 10 points.", "maxScore": 10}, {"id": 3, "title": "Is the document export functionality complete and accurate?", "description": "Check whether the code includes comprehensive export capabilities that maintain document fidelity when converting back to Word format. Verify support for multiple export formats (.docx, .pdf), preservation of formatting, images, tables, and document metadata. Evaluate export speed and file size optimization. Deduct 5 points if formatting is lost during export, 3 points if images are not properly embedded. Give 10 points if export maintains 100% visual fidelity.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as corrupted document files, network interruption during save/export, large file uploads, browser memory limitations, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Real-time collaborative editing with multiple cursors 2. Smart content suggestions and auto-complete 3. Document commenting and review system 4. Advanced search and replace with regex support 5. Template library integration). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple save mechanisms coexisting) 2. Function modules unrelated to document editing (e.g., built-in games or social features) 3. Fancy effects that affect performance (e.g., excessive animations during typing). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core document editing functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review Vue.js best practices implementation (proper component composition, Vuex/Pinia state management, router configuration), modular design separating document processing/editor/storage layers, TypeScript usage, unit test coverage, and build process automation. Deduct 5 points if Vue reactivity is misused or component lifecycle is not properly managed; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the build process is not automated. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the document editor interface follows modern design principles: 1) Clean toolbar design with intuitive icons 2) Proper document canvas layout with realistic paper appearance 3) Harmonious color scheme suitable for long reading sessions 4) Professional typography with appropriate font rendering 5) Responsive design for different screen sizes. Deduct 3 points for each cluttered interface element, 5 points for poor contrast ratios affecting readability, and 5 points for non-intuitive navigation. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction smooth and seamless?", "description": "Judge whether the editing experience conforms to user expectations: 1) Typing response delay ≤ 50ms with no input lag 2) Smooth scrolling performance even with large documents 3) Instant formatting application without flicker 4) Responsive toolbar interactions 5) Smooth import/export progress indicators. Deduct 5 points for each noticeable performance bottleneck, 3 points for choppy animations during editing, and 5 points for unresponsive UI elements during document processing. The full score is 10 points.", "maxScore": 10}], "class": "Management Systems-File Management", "difficulty": "medium"}
{"index": 415, "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Be sure to ensure that the code you generate can be executed and displayed. How can I add two menu items in Gradio, one for dynamically switching dark mode, and another for dynamically switching themes?", "checklist": [{"id": 0, "title": "Are the menu items correctly implemented in Gradio?", "description": "Review whether the code properly implements menu items using Gradio's API components. Check for correct use of gr.Dropdown, gr.Radio, or custom components for theme selection. Score 0 if no menu implementation, 5 if basic implementation without proper styling, 10 if fully implemented with proper Gradio component integration.", "maxScore": 10}, {"id": 1, "title": "Is the dark mode switching functionality working correctly?", "description": "Verify the dark mode toggle functionality works dynamically without page refresh. Check for proper event handling that applies CSS changes or theme classes. Examine if the implementation uses Gradio's built-in theme methods or custom JavaScript. Score 0 if not implemented, 5 if implemented but requires page refresh, 10 if fully dynamic with smooth transition effects.", "maxScore": 10}, {"id": 2, "title": "Is the theme switching functionality implemented properly?", "description": "Evaluate if multiple themes can be selected and applied dynamically. Check if the code includes proper theme definitions or uses Gradio's built-in themes. Verify the theme switcher updates all UI elements consistently. Score 0 if theme switching is missing, 5 if only basic theme changes work, 10 if comprehensive theme switching with consistent application across the interface.", "maxScore": 10}, {"id": 3, "title": "Is there proper state management for persistent theme preferences?", "description": "Check if the code maintains user theme preferences across sessions using local storage, cookies, or server-side storage. Verify if theme state is properly synchronized between client and server components. Score 0 if no state persistence, 5 if basic persistence without synchronization, 10 if complete persistence mechanism with proper synchronization.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as browser incompatibilities, CSS conflicts, theme application failures) and provide friendly error handling or fallback mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Theme preview thumbnails 2. Automatic time-based theme switching 3. Custom theme creation interface). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple theme switching methods) 2. Function modules unrelated to theming (e.g., unnecessary UI components) 3. Fancy effects that affect performance (e.g., excessive animations). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating UI logic from theme logic), code reusability, and maintainability. Deduct 5 points if global variable pollution is found or proper encapsulation is not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the code is not structured logically for easy maintenance. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the menu items follow modern design principles: 1) Visually distinguishable from other UI elements 2) Proper spacing and positioning in the interface 3) Professional typography and iconography. Deduct 3 points for poor visual hierarchy, 5 points for inconsistent styling with the rest of the interface, and 5 points for poor accessibility (e.g., low contrast). The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction smooth and seamless?", "description": "Judge whether the theme switching conforms to human perception characteristics: 1) Theme changes apply without visible flickering 2) Transition effects between themes are smooth (200-400ms) 3) Clear visual feedback when selecting themes. Deduct 5 points for jarring theme transitions, 3 points for delayed application of theme changes, and 5 points for lack of visual feedback during selection. The full score is 10 points.", "maxScore": 10}], "class": "Web Applications-Communication", "difficulty": "medium"}
{"index": 1595, "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure the generated code is executable. Create a web mini-game with a story progression where the protagonist Knight 77 rescues Prince Cloud. The journey starts in England, passes through Thailand, and finally reaches Beijing to rescue Prince Cloud, with an iPhone 16 Pro as the final reward.", "checklist": [{"id": 0, "title": "Is the story progression system fully implemented?", "description": "Review whether the code accurately implements a three-stage story progression (England → Thailand → Beijing) with clear narrative transitions, character dialogue systems, and quest objectives for Knight 77's rescue mission. Check if each location has unique story elements, environmental descriptions, and progression triggers. Score 0 if no story structure exists, 5 if only basic location transitions are implemented, and 10 if complete narrative flow with dialogue, objectives, and story coherence is fully developed.", "maxScore": 10}, {"id": 1, "title": "Are the game mechanics and player interactions properly designed?", "description": "Evaluate whether the mini-game includes engaging gameplay mechanics such as puzzle-solving, combat systems, inventory management, or skill challenges appropriate for a rescue adventure. Check for player input handling, character movement controls, and interactive elements within each geographic location. Deduct 5 points if core gameplay mechanics are missing, 3 points if player controls are unresponsive or unclear. Full score requires intuitive and engaging game mechanics that support the rescue narrative.", "maxScore": 10}, {"id": 2, "title": "Is the multi-location world design and progression system well-structured?", "description": "Assess whether each location (England, Thailand, Beijing) has distinct visual themes, unique challenges, and appropriate cultural elements. Check if the progression system includes unlock mechanisms, save/load functionality, and clear advancement criteria between locations. Deduct 5 points if locations lack distinctiveness, 3 points if progression feels arbitrary or unclear. Require location-specific assets, challenges, and seamless transitions between stages.", "maxScore": 10}, {"id": 3, "title": "Is the reward system and game completion mechanism properly implemented?", "description": "Review whether the game includes a comprehensive reward system leading to the iPhone 16 Pro finale, with intermediate rewards, achievement tracking, and satisfying completion sequences. Check if Prince Cloud rescue sequence is properly scripted with appropriate celebration/completion animations. Deduct 5 points if reward system is incomplete, 3 points if final sequence lacks polish. Full score requires engaging reward progression and memorable completion experience.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as invalid game states, save/load errors, asset loading failures, user input edge cases, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should effectively handle game state corruption, browser compatibility issues, and graceful degradation. Give 10 points if fully robust, 5 points if average robustness, and 0 points if no exception handling exists.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the gaming experience (e.g., 1. Mini-map navigation system 2. Cultural Easter eggs in each location 3. Dynamic weather/time effects 4. Achievement badge system 5. Sound effects and background music). Add 3 points for each practical innovative feature implemented that adds genuine value to the gameplay experience (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple save systems coexisting) 2. Function modules unrelated to the rescue adventure theme (e.g., unrelated mini-games) 3. Excessive animations that impact performance (e.g., overuse of particle effects). Deduct 3 points for each redundancy found, and directly deduct 10 points if core game flow is interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating game logic/rendering/audio/state management layers), code organization, and maintainability. Deduct 5 points if global state pollution is found or proper architectural patterns aren't used; deduct 5 points if code duplication rate is too high (over 30%); deduct 5 points if assets aren't properly organized or optimized. Full score requires clean, modular, and maintainable code structure.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the game UI follows modern design principles: 1) Harmonious color palette reflecting each location's theme 2) Consistent UI element spacing and sizing 3) Readable typography with appropriate contrast 4) Cultural authenticity in visual representation of England/Thailand/Beijing. Deduct 3 points for each visually cluttered interface element, 5 points for poor color harmony that strains eyes, and 5 points for inconsistent or unprofessional visual styling. Full score requires polished, themed visual design.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction smooth and seamless?", "description": "Judge whether the game interactions conform to user expectations: 1) Button/click feedback delay ≤ 100ms 2) Scene transition animations smooth and appropriately timed (300-500ms) 3) Clear visual feedback for all interactive elements 4) Smooth character movement and animation. Deduct 5 points for each unresponsive interaction, 3 points for jerky animations or transitions, and 5 points for unclear interactive affordances. Full score requires fluid, responsive, and intuitive interaction design.", "maxScore": 10}], "class": "Game Development-Adventure", "difficulty": "medium"}
{"index": 374, "question": "You are a code expert, please use your professional knowledge to generate accurate and professional responses. Make sure the code you provide is executable for demonstration. Implement a Java solution for Android that loads local soccer video files and generates a top-down view (sandbox view). Please provide complete code that is error-free.", "checklist": [{"id": 0, "title": "Is the Android video loading mechanism fully implemented?", "description": "Review whether the code correctly implements video file loading using MediaPlayer/ExoPlayer/VideoView with proper Android lifecycle management. Check if it includes file format validation (MP4/AVI/MOV), storage permission handling, and video metadata extraction. Score 0 if core video loading fails, 5 if only basic playback works without format validation, and 10 if all video formats are supported with proper error handling and metadata parsing.", "maxScore": 10}, {"id": 1, "title": "Is the top-down view transformation algorithm correctly implemented?", "description": "Evaluate whether the perspective transformation from standard soccer video to top-down sandbox view is mathematically accurate. Check if homography matrix calculation, field corner detection, and real-time frame processing are implemented. The algorithm should handle camera angle variations and field distortion correction. Deduct 5 points if transformation is inaccurate, 3 points if field boundaries are not properly detected. Full score requires smooth real-time processing at ≥24fps.", "maxScore": 10}, {"id": 2, "title": "Is the computer vision processing pipeline optimized for Android?", "description": "Check whether OpenCV or equivalent CV library integration is properly configured for Android with native NDK optimization. Evaluate if player/ball tracking, field line detection, and coordinate mapping are implemented efficiently. Verify GPU acceleration usage and memory management for video processing. Deduct 5 points if processing causes UI freezing, 3 points if memory leaks are detected during continuous playback.", "maxScore": 10}, {"id": 3, "title": "Is the sandbox view rendering system complete?", "description": "Assess whether the top-down field visualization includes accurate player position mapping, trajectory tracking, and field proportions. Check if the rendering uses Canvas/OpenGL ES with smooth animations and real-time updates synchronized with video playback. Verify if tactical overlays, player identification, and minimap functionality are implemented. Give 10 points for complete sandbox features, 5 for basic position mapping only.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as corrupted video files, insufficient memory, device orientation changes, app backgrounding, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should effectively handle these edge cases and maintain stable performance across different Android devices, giving 10 points. If robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Real-time tactical analysis overlay 2. Player heatmap generation 3. Speed/distance statistics 4. Multi-angle view synchronization 5. Gesture-controlled playback). Add 3 points for each practical innovative feature implemented that adds genuine value to soccer video analysis (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple video decoders coexisting) 2. Function modules unrelated to soccer video analysis (e.g., built-in social media sharing) 3. Heavy processing that affects performance (e.g., unnecessary high-resolution transformations). Deduct 3 points for each redundancy found, and directly deduct 10 points if core video processing is interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review Android-specific engineering practices: proper Activity/Fragment lifecycle management, AsyncTask/Executor usage for background processing, ProGuard configuration, and modular architecture (MVP/MVVM). Check memory leak prevention, proper resource disposal, and build.gradle optimization. Deduct 5 points if ANR risks are found; deduct 5 points if code duplication rate exceeds 30%; deduct 5 points if no proper threading architecture. Full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the Android UI follows Material Design principles: 1) Consistent color scheme following soccer field aesthetics (green field, white lines) 2) Proper touch target sizes (≥48dp) and spacing following 8dp grid 3) Professional typography using Roboto font family with readable sizes (≥14sp). Deduct 3 points for each crowded visual element, 5 points for non-Material Design patterns, and 5 points for poor contrast ratios affecting readability.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction smooth and seamless?", "description": "Judge whether the Android app interactions meet performance standards: 1) Touch response delay ≤100ms for all controls 2) Video seeking and transformation updates within 200ms 3) Smooth 60fps UI animations with proper motion curves 4) Intuitive gesture controls for zoom/pan in sandbox view. Deduct 5 points for each laggy interaction, 3 points for stuttering video playback, and 5 points for unresponsive touch controls during processing.", "maxScore": 10}], "class": "Multimedia Editing-Video Production", "difficulty": "hard"}
{"index": 366, "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Be sure to ensure that the code you generate is executable for demonstration. Please use HTML code to help me create a Sichuan Mahjong mini-game. The game should include rules for \"chi\" (eating), \"peng\" (claiming), and \"gang\" (kong). Make it visually appealing and provide the complete code.", "checklist": [{"id": 0, "title": "Core Mahjong Game Mechanics Implementation", "description": "Evaluate whether the code accurately implements the core mechanics of Sichuan Mahjong including tile representation, distribution, and gameplay rules.Score 0 if basic tile representation is missing, 5 points if basic gameplay is implemented but with incomplete rules, 10 points if the code fully implements all Sichuan Mahjong rules including correct tile sets (characters, dots, bamboos, dragons, winds), proper shuffling, wall building, and drawing mechanisms.", "maxScore": 10}, {"id": 1, "title": "'Chi', 'Peng', and 'Gang' Action Implementation", "description": "Check if the special Mahjong actions are correctly implemented with proper validation logic.Deduct 3 points if any of the three actions (chi, peng, gang) is missing; deduct 2 points if the validation logic for these actions is incorrect; deduct 2 points if the concealed kong (an gang) vs. exposed kong (ming gang) distinction is not implemented. The full score is 10 points.", "maxScore": 10}, {"id": 2, "title": "Hand Evaluation and Scoring System", "description": "Assess whether the code implements a proper Sichuan Mahjong scoring system with pattern recognition.Score 0 if there's no winning condition checking, 5 points if basic winning combinations are implemented but without proper point calculation, 10 points if the code fully implements Sichuan Mahjong's unique scoring patterns, fan (doubles) calculation, and accurate point distribution among players.", "maxScore": 10}, {"id": 3, "title": "Game Flow and Turn Management", "description": "Evaluate whether the game properly manages player turns, action priorities, and the overall game flow.Score 0 if turn management is not implemented, 5 points if basic turns exist but without proper action priorities (e.g., peng/gang taking precedence over drawing), 10 points if the code correctly implements the complete Mahjong turn cycle including proper timing windows for claiming discarded tiles and managing interruptions to the normal flow.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as invalid moves, illegal actions, etc.) and provide friendly error prompts or recovery mechanisms.Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Interactive tutorials for beginners 2. Game history replay 3. AI opponents with different difficulty levels 4. Custom tile themes).Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple ways to calculate the same score) 2. Function modules unrelated to Sichuan Mahjong (e.g., a built-in unrelated mini-game) 3. Fancy effects that affect performance (e.g., excessive animations when revealing tiles).Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating game logic/view/controller layers), code organization, and maintainability.Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if there's no clear separation between game logic and presentation. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the visual design effectively represents Mahjong tiles with appropriate Chinese styling while maintaining modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (clear differentiation between players' hands, discards, and game information) 3) Professional font system (clear character rendering, especially for Chinese characters).Deduct 3 points for poorly rendered tiles, 5 points for a glaring color combination, and 5 points for chaotic layout that makes it difficult to understand the game state. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction smooth and seamless?", "description": "Judge whether the game interactions feel natural and responsive: 1) Clear visual indication of available actions (chi/peng/gang/hu) 2) Smooth animations when tiles are moved or revealed 3) Intuitive UI for selecting tiles and performing actions.Deduct 5 points for operations without feedback, 3 points for sluggish animations, and 5 points for confusing UI that makes it difficult to understand available actions. The full score is 10 points.", "maxScore": 10}], "class": "Game Development-Strategy", "difficulty": "hard"}
{"index": 1371, "question": "You are a coding expert. Please use your professional knowledge to generate accurate and professional responses. Take care to ensure that the code you provide is executable and properly displayed. I want to create a word-matching elimination game (like a memory game) for English vocabulary, as a web application. How should I provide instructions to you?", "checklist": [{"id": 0, "title": "Is the word-matching game core mechanism fully implemented?", "description": "Review whether the code accurately implements the card flip system through HTML/JavaScript, including card randomization, matching logic validation, and scoring system. Check if the game includes proper card state management (hidden/revealed/matched) and win condition detection. Score 0 if the core matching logic is not implemented, 5 if only basic card flipping is implemented, and 10 if complete matching rules with scoring system are included.", "maxScore": 10}, {"id": 1, "title": "Is the English vocabulary learning system effectively integrated?", "description": "Evaluate whether the implementation includes a comprehensive vocabulary management system with word-definition pairing, pronunciation support (audio playback), and difficulty level categorization. Check for vocabulary progress tracking and adaptive learning features. Deduct 5 points if pronunciation is missing, 3 points if no difficulty progression exists. The full score is 10 points.", "maxScore": 10}, {"id": 2, "title": "Is the game progression and level system properly designed?", "description": "Assess whether the code implements multiple difficulty levels, progressive vocabulary sets, and achievement/scoring systems. Verify the presence of timer functionality, streak counting, and performance analytics. Deduct 5 points if no level progression exists, 3 points if scoring system is incomplete. Check for save/load game progress functionality. The full score is 10 points.", "maxScore": 10}, {"id": 3, "title": "Is the complete game state management and data persistence constructed?", "description": "Check whether the code includes comprehensive game state management with local storage for vocabulary progress, user preferences, and game statistics. Evaluate the implementation of game pause/resume, vocabulary set customization, and performance tracking over time. Deduct 5 points if data persistence is not implemented, 3 points if user progress tracking is missing. Give 10 points if fully implemented with robust data management.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as invalid vocabulary data, audio loading failures, localStorage limitations, rapid clicking, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the learning experience (e.g., 1. Voice recognition for pronunciation practice 2. Adaptive difficulty based on performance 3. Social sharing of achievements 4. Custom vocabulary import 5. Multi-language support). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple scoring systems coexisting) 2. Function modules unrelated to vocabulary learning (e.g., built-in social media integration) 3. Fancy effects that affect learning focus (e.g., distracting particle animations during gameplay). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core learning functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating game logic/vocabulary management/UI rendering layers), component reusability, and code organization. Deduct 5 points if global state pollution is found or MVC/MVP patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if no configuration management exists for vocabulary sets. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the overall design follows modern educational app design principles: 1) Harmonious color matching suitable for learning (no more than 3 primary colors, high contrast for readability) 2) Proper card layout spacing (element spacing follows the 8px multiple principle) 3) Professional typography system (body font size ≥ 16px for accessibility, line height over 1.4 times). Deduct 3 points for each cluttered visual element, 5 points for color combinations that strain the eyes, and 5 points for poor card arrangement that affects gameplay. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction smooth and seamless?", "description": "Judge whether the dynamic effects conform to educational game standards: 1) Card flip animation duration controlled between 250-400ms 2) Click feedback delay ≤ 80ms for responsive feel 3) Clear visual feedback for correct/incorrect matches 4) Smooth transitions between game states. Deduct 5 points for each interaction without proper feedback, 3 points for jarring animation transitions, and 5 points if card flip animations interfere with gameplay rhythm. The full score is 10 points.", "maxScore": 10}], "class": "Game Development-Casual", "difficulty": "hard"}
{"index": 438, "question": "You are a Code Expert\n\n## Andrej Karpathy's Minimalist Note-taking Method\n### How to Manage All Non-Project Notes Using a Single File\n\n**Design Style:**\n- **Visual Style:** Soft Technology\n- **Emotional Tone:** Warm and Friendly\n- **Target Audience:** Young Demographics\n- **Brand Personality:** Futuristic Tech Feel\n\n**Visual Elements and Layout:**\n- **Rounded Card Layout:** Use large rounded corner cards as information containers, colored in mint green, light gray, and champagne gold accents to create a friendly, approachable feel.\n- **Soft Color System:** Primarily using mint green, light gray, champagne gold and other soft tones, avoiding strong visual stimulation.\n- **Minimalist White Space Design:** Ample white space enhances readability and reduces visual fatigue.\n- **Subtle Shadow Depth:** Subtle shadow effects give the interface a slight three-dimensional feel without overemphasis.\n- **Functional Aestheticism:** Design serves function, with no superfluous decorative elements.\n- **Grid-based Layout:** Cards arranged on a clear grid system to maintain overall sense of order.\n- **Gradient Accents:** Soft gradients used as backgrounds in parts of the interface, such as transitions from mint green to light gray, enhancing the modern feel.\n\n**Typography Style:**\n- **Data Highlighting:** Key numerical information uses extra-large font size and bold treatment, e.g., \"12,002\", \"20x\".\n- **Clear Hierarchical Typography:** Titles, explanatory text, data, and annotations distinguished by clear font size hierarchy (Headings 80-160px, Subheadings 48-80px, Body Text 32-48px, Supporting Information 24-32px).\n- **Simple Sans-serif Fonts:** All text uses modern, clean sans-serif fonts for improved readability.\n- **Consistent Text Alignment:** Maintaining unified left alignment or center alignment within cards.\n- **Color-coded Important Terms:** Using high-contrast colors like blue to mark important terms such as \"tweets\" and \"threads\".\n- **Breathing Space:** Ample spacing between text blocks creates \"breathing\" room.\n- **Special Brand Name Treatment:** Product names like \"alohi\", \"deel.\" use special fonts or styles to strengthen brand recognition.\n\n**Visual Element Style:**\n- **Subtle Icon System:** Using simple linear or filled icons, appropriately sized without overwhelming the content.\n- **Progress Visualization:** Semi-transparent circular charts + subtle gradient fills intuitively display progress, such as annual completion percentage.\n- **Color-coded Information:** Different cards use different colors for quick distinction between functional modules.\n- **Brand Identity Integration:** Product logos naturally integrated into the interface, such as \"alohi's\" circular logo.\n- **Profile Picture Elements:** Appropriate use of circular avatars adds humanizing qualities, such as on customer recommendation cards.\n- **Geometric Decorations:** Simple geometric shapes used as background decorations, such as semi-transparent circles.\n- **Component Consistency:** Buttons, labels, tabs and other elements maintain a unified style, enhancing systematic feel.\n\n**Design Principle Guidance:**\n- **Visual Hierarchy:** Headings (80-160px) > Subheadings (48-80px) > Body Text (32-48px) > Supporting Information (24-32px).\n- **Color Scheme:** Using mint green, light gray, and champagne gold as the three main color tones, ensuring contrast meets WCAG 2.1 standards.\n- **White Space Art:** Strategic use of negative space creates elegant visual balance.\n- **Font Selection:** Recommended use of two complementary modern, clean sans-serif fonts, ensuring both readability and aesthetics.\n\nFrontend implementation required", "checklist": [{"id": 0, "title": "Is Karpathy's single-file note-taking methodology accurately implemented?", "description": "Review whether the code correctly implements the core concept of managing all non-project notes in a single file structure. Check if features include: unified note entry/editing, hierarchical tag system, search functionality, and note linking mechanisms. Score 0 if the single-file concept is not implemented, 5 if only basic note management exists, and 10 if the complete minimalist methodology with advanced search and organization is fully realized.", "maxScore": 10}, {"id": 1, "title": "Does the visual design strictly follow the 'Soft Technology' aesthetic requirements?", "description": "Evaluate whether the interface adheres to the specified design system: mint green/light gray/champagne gold color palette, rounded card layouts with subtle shadows, and gradient accents. Check color contrast ratios meet WCAG 2.1 standards. Deduct 3 points for each color deviation from the specified palette, 5 points if rounded corners are not consistently applied, and 3 points if gradient implementations are jarring or excessive. Full score is 10 points.", "maxScore": 10}, {"id": 2, "title": "Is the typography hierarchy system properly implemented according to specifications?", "description": "Verify that font sizing follows the exact hierarchy: Headings (80-160px), Subheadings (48-80px), Body Text (32-48px), Supporting Information (24-32px). Check for consistent sans-serif font usage, appropriate line spacing (≥1.5x), and proper text alignment. Deduct 5 points if the hierarchy is not maintained, 3 points for inconsistent font choices, and 2 points for inadequate text spacing. Full score is 10 points.", "maxScore": 10}, {"id": 3, "title": "Are the visual elements and layout components accurately executed?", "description": "Assess implementation of: grid-based card layout, subtle shadow depth effects, minimalist white space design, progress visualization elements, and icon system consistency. Check if geometric decorations and brand identity elements are properly integrated. Deduct 3 points for each missing visual component, 5 points if the grid system is not properly implemented, and 3 points if white space ratios are inadequate. Full score is 10 points.", "maxScore": 10}, {"id": 4, "title": "Is the code robust and handles edge cases effectively?", "description": "Evaluate whether the code can handle common abnormal situations such as: large note files, special characters in content, browser compatibility issues, data corruption recovery, and performance degradation with extensive notes. Code with strong robustness should effectively handle these edge cases, giving 10 points. If robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there innovative features that enhance the note-taking experience?", "description": "Check whether the code includes valuable enhancements such as: 1. Smart auto-tagging based on content analysis 2. Real-time collaboration features 3. Export functionality with formatting preservation 4. Keyboard shortcut customization 5. Dark/light theme toggle matching the soft technology aesthetic. Add 2-3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features that violate the minimalist principle?", "description": "Strictly check for three types of redundancy: 1. Redundant UI components that clutter the interface 2. Features unrelated to note-taking (e.g., built-in games, social media integration) 3. Excessive animations or effects that contradict the 'soft technology' aesthetic. Deduct 3 points for each redundancy found, and directly deduct 10 points if core minimalist principles are violated by feature bloat.", "maxScore": 10}, {"id": 7, "title": "Does the code demonstrate professional engineering quality?", "description": "Review modular architecture (separation of data layer/view layer/utility functions), code organization, component reusability, and performance optimization. Deduct 5 points if global state is poorly managed or no design patterns are used; deduct 5 points if code duplication exceeds 25%; deduct 3 points if no build optimization is implemented. Full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface design meet the specified professional visual standards?", "description": "Evaluate adherence to the design specification: 1) Exact color palette implementation (mint green, light gray, champagne gold) 2) Proper spacing following 8px grid principles 3) Consistent rounded corner radius across all cards 4) Appropriate contrast ratios for accessibility. Deduct 3 points for each spacing inconsistency, 5 points for color palette deviations, and 5 points for poor visual hierarchy. Full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Are the interactions smooth and aligned with the 'warm and friendly' user experience?", "description": "Judge whether dynamic effects create the intended emotional response: 1) Hover states with subtle transitions (200-300ms) 2) Click feedback that feels responsive (≤100ms) 3) Smooth card animations when adding/editing notes 4) Intuitive navigation flow that supports the single-file methodology. Deduct 5 points for each interaction without proper feedback, 3 points for jarring transitions, and 5 points if key functions lack discoverability. Full score is 10 points.", "maxScore": 10}], "class": "Web Applications-Education/Learning", "difficulty": "medium"}
{"index": 397, "question": "You are a code expert. Please use your professional knowledge to generate accurate, professional responses. Make sure the code you generate is executable and can be demonstrated. Write a frontend program that simulates the Earth-Moon orbital relationship.", "checklist": [{"id": 0, "title": "Is the Earth-Moon orbital simulation mathematically accurate?", "description": "Evaluate whether the orbital mechanics are scientifically accurate. Check if the code implements Kepler's laws correctly with the Moon's elliptical orbit around Earth, proper orbital period ratio (approximately 27.3 days), and accurate relative sizes (Moon diameter ≈ 27% of Earth's). Score 0 if physics is completely wrong, 5 if basic circular orbit is implemented, and 10 if the simulation includes proper elliptical orbit with correct eccentricity (0.0549) and orbital inclination (5.145°).", "maxScore": 10}, {"id": 1, "title": "Does the visualization accurately represent celestial bodies and their properties?", "description": "Check if Earth and Moon are rendered with proper textures/colors, correct proportional sizes (Earth:Moon = 3.7:1), and appropriate lighting effects (including shadows and phases of the Moon). Verify that Earth's axial tilt (23.5°) is correctly represented if seasons are simulated. Deduct 3 points if textures are missing, 3 points if relative sizes are incorrect, and 4 points if lighting/shadow effects are absent or unrealistic.", "maxScore": 10}, {"id": 2, "title": "Is the simulation interactive with user controls?", "description": "Assess whether the program includes controls for users to manipulate the simulation (e.g., speed controls, zoom functionality, viewing angle changes, time progression control). Check for the ability to pause/resume the simulation and reset to initial conditions. Score 10 points if the simulation offers comprehensive controls with smooth transitions, 5 points if only basic controls are implemented, and 0 if no interactivity is provided.", "maxScore": 10}, {"id": 3, "title": "Are additional educational elements incorporated into the simulation?", "description": "Evaluate if the simulation includes informative elements such as distance measurements, orbital statistics, time indicators, or educational tooltips about Earth-Moon dynamics. Check if there's a legend or information panel explaining the simulation elements. Award full 10 points if comprehensive educational features are implemented, 5 points if basic information is displayed, and 0 if no educational elements are present.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as window resizing, browser compatibility issues, performance degradation on lower-end devices) and provide fallback mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Realistic starfield background 2. Visualization of gravitational fields 3. Animation of tidal effects 4. Ability to view from different perspectives). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple animation loops) 2. Function modules unrelated to the orbital simulation (e.g., unnecessary UI elements) 3. Fancy effects that affect performance (e.g., excessive particle systems). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating physics calculations/rendering/UI layers), code organization, and use of appropriate design patterns. Deduct 5 points if global state pollution is found; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the rendering logic and physics calculations are tightly coupled. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the overall design follows modern design principles: 1) Clean visual representation of space environment 2) Proper layout of UI controls with intuitive placement 3) Consistent color scheme appropriate for space visualization. Deduct 3 points for cluttered UI elements, 5 points for poor contrast making celestial bodies hard to distinguish, and 5 points for chaotic control panel layout. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the animation performance smooth and optimized?", "description": "Judge whether the animation runs at consistent frame rates (ideally 60fps) without stuttering: 1) Check if requestAnimationFrame is used instead of setInterval 2) Verify efficient rendering techniques (canvas/WebGL instead of DOM manipulation for animation) 3) Assess if performance optimizations are implemented for complex calculations. Deduct 5 points for noticeable frame drops, 5 points for inefficient rendering approach, and 3 points for lack of performance considerations for mobile devices. The full score is 10 points.", "maxScore": 10}], "class": "Simulation & Modeling-Physics Simulation", "difficulty": "hard"}
{"index": 1109, "question": "You are a code expert. Please use your professional knowledge to generate accurate, professional responses. Make sure the generated code is executable for demonstration purposes. According to the 22G standard design code, help me design a web page that calculates the length of upper and lower reinforcing steel bars in frame beams.", "checklist": [{"id": 0, "title": "Is the beam reinforcement calculation model correctly implemented?", "description": "Review whether the code accurately implements the mathematical model for calculating upper and lower reinforcing steel bar lengths according to the 22G standard. Check if the formula includes critical parameters such as beam span, section dimensions, hook lengths, and bend radius. Score 0 if the core calculation logic is missing, 5 if basic calculations are implemented but missing some 22G standard requirements, and 10 if fully compliant with the 22G standard specifications.", "maxScore": 10}, {"id": 1, "title": "Are all required input parameters for reinforcement calculation included?", "description": "Evaluate whether the interface captures all necessary parameters: beam span, beam width, beam height, concrete cover, bar diameter, number of bars, anchorage lengths, and support dimensions. Deduct 2 points for each missing critical parameter. Check if the input fields have appropriate constraints, validation, and unit indicators. The full score is 10 points.", "maxScore": 10}, {"id": 2, "title": "Is there visual representation of the frame beam and reinforcement?", "description": "Assess if the code includes dynamic visualization (using SVG/Canvas/WebGL) that shows the frame beam with accurately positioned reinforcement bars. The visualization should update based on user inputs and show both longitudinal view and cross-section view. Deduct 5 points if only static images are used, 3 points if the visualization doesn't update with parameter changes, and 2 points if the reinforcement is not drawn to scale. The full score is 10 points.", "maxScore": 10}, {"id": 3, "title": "Does the calculation include detailed itemized results?", "description": "Check whether the results show a detailed breakdown of the steel bar lengths: straight portions, bent portions, hooks/anchors, and total quantities for both upper and lower reinforcements. Deduct 3 points if only final totals are shown without itemization, 2 points if material wastage estimation is missing, and 2 points if results don't include unit conversion options. The full score is 10 points.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as invalid inputs, edge cases like extremely small/large dimensions, conflicts in reinforcement arrangement, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Bill of materials export function 2. Multiple layout configuration templates 3. Real-time cost estimation). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar calculation methods 2. Function modules unrelated to structural engineering (e.g., a built-in general calculator) 3. Decorative elements that affect performance without adding value. Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating calculation logic/view/data validation layers), code documentation, and maintainability. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if there are no comments explaining the engineering formulas or 22G standard references. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction smooth and seamless?", "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Real-time calculation updates when parameters change 2) Smooth transitions when visualization updates 3) Clear visual feedback for user actions. Deduct 5 points for delayed calculation feedback (>500ms), 3 points for jumpy visualization updates, and 5 points for hidden or confusing engineering controls. The full score is 10 points.", "maxScore": 10}], "class": "Utility Tools-Calculation Tools", "difficulty": "medium"}
{"index": 378, "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Pay attention to ensuring that the generated code is executable for demonstration. Use Node.js in WebStorm to implement a graphic showing the intersection/blending of a square and a circle.", "checklist": [{"id": 0, "title": "Is the geometric representation of both shapes implemented correctly?", "description": "Review whether the code accurately defines and renders both the square and circle with proper parameters (coordinates, dimensions, radius). The square should have consistent side lengths, and the circle should be mathematically accurate. Score 0 if shapes are incorrectly implemented, 5 if basic shapes are drawn but with minor inaccuracies, and 10 if both shapes are perfectly implemented with proper mathematical properties.", "maxScore": 10}, {"id": 1, "title": "Is the intersection/blending calculation algorithm implemented correctly?", "description": "Check whether the code accurately calculates the intersection between the square and circle using proper mathematical formulas. The intersection should be precisely determined with appropriate geometric calculations (distance checks, boundary evaluations). Deduct 5 points if the algorithm only approximates the intersection, 3 points if edge cases aren't handled (e.g., tangent points, complete overlap). The full score is 10 points.", "maxScore": 10}, {"id": 2, "title": "Is the visual representation of the intersection/blending rendered properly?", "description": "Evaluate how the intersection/blending is visually displayed. The overlapping area should be clearly distinguishable from the non-overlapping parts with appropriate visual treatment (different color, opacity, or pattern). Deduct 5 points if the intersection area is not visually distinct, and 3 points if the blending effect lacks visual clarity. The full score is 10 points.", "maxScore": 10}, {"id": 3, "title": "Does the implementation provide interactive capabilities?", "description": "Assess whether the code allows users to interact with the shapes (e.g., moving shapes, resizing, changing parameters). Check for event listeners that enable drag-and-drop functionality or parameter adjustments. Deduct 3 points if only basic interactions are implemented, 5 points if interactions are limited to only one shape, and 5 points if real-time intersection updates are missing. The full score is 10 points.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as invalid inputs, edge cases in shape positioning, rendering issues, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Multiple blending modes like SVG's 'multiply', 'screen', etc. 2. Mathematical formulas display alongside visualization 3. Animation showing how intersection changes with movement). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant calculations or rendering passes that affect performance 2. Unnecessary complexity in algorithms where simpler solutions exist 3. Extraneous visual elements unrelated to the geometric intersection task. Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functionality is compromised by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (separating rendering logic from calculation logic), proper variable naming, code comments, and application of appropriate design patterns. Deduct 5 points if global variables are overused; deduct 5 points if the code is not organized into logical functions or classes; deduct 5 points if documentation is missing for complex algorithms. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Clean and minimal UI that doesn't distract from the geometric visualization. Deduct 3 points for each visually distracting element, 5 points for poor color choices that make intersection difficult to see, and 5 points for cluttered controls. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction smooth and responsive?", "description": "Judge whether the rendering and calculation performance meets standards: 1) Rendering updates occur at 60fps without visible lag 2) Intersection calculations complete within 16ms to maintain smooth framerate 3) Shape manipulations respond instantly to user input. Deduct 5 points for noticeable lag during interaction, 3 points for jerky animations, and 5 points for calculation delays that affect user experience. The full score is 10 points.", "maxScore": 10}], "class": "Simulation & Modeling-Mathematical Abstraction", "difficulty": "easy"}
{"index": 107, "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure the generated code is executable for demonstration.\nPlease help me implement the following requirements using SVG code. The requirement is to create: Design an animated raindrop effect that shows raindrops sliding down glass.", "checklist": [{"id": 0, "title": "Are the basic raindrop elements properly implemented?", "description": "Check whether SVG elements (path, circle, etc.) are correctly used to create realistic raindrop shapes. The raindrops should have proper form with curved paths to simulate water droplets. Deduct 5 points if drops are simple circles without proper water droplet shape; deduct 7 points if no transparency or gradient is applied to create a water-like appearance. The full score is 10 points.", "maxScore": 10}, {"id": 1, "title": "Is the sliding animation properly implemented?", "description": "Evaluate whether the raindrops slide down naturally with physics-like motion (acceleration, slight zigzagging). Check for proper use of SVG animation elements (animate, animateTransform, animateMotion) or JavaScript-based animation. Deduct 5 points if movement is linear without acceleration; deduct 7 points if all raindrops follow exactly the same path without variation. The full score is 10 points.", "maxScore": 10}, {"id": 2, "title": "Is the glass surface effect convincingly represented?", "description": "Review how the code creates a convincing glass surface illusion through appropriate use of filters, gradients, or opacity. The glass should appear as a surface with appropriate reflective properties. Look for blur effects, subtle transparency, or light refraction simulation. Deduct 5 points if there's no attempt to simulate glass; deduct 3 points if the glass effect lacks realism. The full score is 10 points.", "maxScore": 10}, {"id": 3, "title": "Is the raindrop collision and merging behavior implemented?", "description": "Assess whether the implementation includes realistic raindrop interactions such as collision detection, merging of smaller drops into larger ones, or splitting of drops. Deduct 5 points if there's no collision detection between raindrops; deduct 7 points if raindrops pass through each other without interaction. Award full 10 points only if sophisticated merging behavior is implemented.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle varying screen sizes, browser compatibility issues, and performance optimization for animation rendering. Look for proper event handling, memory management for continuous animations, and use of requestAnimationFrame for smooth rendering. Deduct 5 points if the animation causes significant performance issues; deduct 3 points if the code lacks resize handling. The full score is 10 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Interactive raindrops that respond to mouse/touch 2. Realistic sound effects synchronized with raindrop movement 3. Dynamic background that changes with rain intensity). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant calculation of raindrop positions 2. Unnecessary complex filters that impact performance 3. Unused or duplicate SVG definitions that bloat the code. Deduct 3 points for each redundancy found, and directly deduct 10 points if the core raindrop animation is interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (separation of raindrop creation, animation, and rendering logic), reuse of SVG patterns/symbols, and optimization techniques such as requestAnimationFrame. Deduct 5 points if global variables are excessively used; deduct 5 points if animation logic is not separated from element creation; deduct 5 points if there's no performance optimization for numerous raindrops. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the visual effect meet professional design standards?", "description": "Evaluate whether the overall design follows realistic water physics: 1) Appropriate transparency for water droplets 2) Natural color variation in drops based on lighting 3) Proper sizing distribution (smaller at top, potentially larger as they merge). Deduct 3 points for unrealistic water coloring, 5 points for uniform drop sizes that don't vary, and 5 points for unnatural movement patterns. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction smooth and seamless?", "description": "Judge whether the animation conforms to natural physics: 1) Smooth acceleration as drops slide down 2) Natural deformation of drops during movement 3) Realistic trail/streak effect behind faster-moving drops. Deduct 5 points for rigid movement without organic feel, 3 points for stuttering animation at higher raindrop counts, and 5 points if drop movement doesn't respond to container size changes. The full score is 10 points.", "maxScore": 10}], "class": "SVG Generation-SVG Images", "difficulty": "medium"}
{"index": 1374, "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Be sure to ensure that the generated code is executable for demonstration. I want to create a web-based big data monitoring platform that sources data from Excel spreadsheets stored on my local computer.", "checklist": [{"id": 0, "title": "Excel data import and parsing functionality", "description": "Review whether the code properly implements Excel file import functionality using appropriate libraries (SheetJS/xlsx, Papa Parse, etc.). Check if the implementation can handle different Excel formats (.xlsx, .csv) and whether it includes robust data validation. Score 0 if file import is not implemented, 5 if only basic parsing without validation is included, and 10 if it handles multiple formats with error handling and validation.", "maxScore": 10}, {"id": 1, "title": "Data processing and transformation pipeline", "description": "Evaluate the data processing pipeline from raw Excel data to visualization-ready formats. Check for proper data cleaning, normalization, aggregation functions, and handling of missing/invalid values. Deduct 5 points if no data transformation logic exists, 3 points if transformations are inefficient (e.g., multiple iterations over large datasets), and 2 points if edge cases (null values, non-numeric data) are not handled. The full score is 10 points.", "maxScore": 10}, {"id": 2, "title": "Visualization components and dashboard design", "description": "Check if appropriate visualization libraries (D3.js, Chart.js, Highcharts, etc.) are used to create dynamic, interactive visualizations. Verify if the dashboard includes essential big data visualizations (time series, distributions, correlations, etc.) and allows for custom view configurations. Deduct 5 points if visualizations are static, 3 points if interactivity is limited, and 5 points if the visualizations are not appropriate for the data types. The full score is 10 points.", "maxScore": 10}, {"id": 3, "title": "Real-time monitoring and automatic refresh", "description": "Assess if the platform implements file watching/monitoring to detect changes in source Excel files and provides real-time or scheduled data refresh functionality. Check for WebSocket implementation or polling mechanisms with configurable intervals. Give 0 points if no refresh capability exists, 5 points for basic manual refresh, and 10 points for automatic detection with configurable refresh rates and change highlighting.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as corrupted Excel files, network interruption, browser compatibility issues, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. AI-driven anomaly detection in data 2. Natural language queries for data exploration 3. Automated insights generation 4. Custom alert thresholds with notifications). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple data parsing methods coexisting) 2. Function modules unrelated to data monitoring (e.g., a built-in game) 3. Fancy effects that affect performance (e.g., excessive animations that slow down rendering of critical data). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating data processing/visualization/user interface layers), unit test coverage, and build process automation. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the build process is not automated. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the overall design follows modern dashboard design principles: 1) Harmonious color matching optimized for data visualization (no more than 3 primary colors) 2) Proper layout spacing with logical grouping of related metrics 3) Professional typography system (body font size ≥ 14px, clear hierarchy between titles and data). Deduct 3 points for each crowded visual element, 5 points for a color scheme that makes data hard to interpret, and 5 points for chaotic dashboard organization. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction smooth and seamless?", "description": "Judge whether the dynamic effects conform to data dashboard best practices: 1) Filter/selection feedback delay ≤ 100ms 2) Smooth transitions when switching between views or applying filters 3) Clear visual indicators for loading states and data freshness. Deduct 5 points for operations without loading feedback, 3 points for jerky transitions when navigating between views, and 5 points if key metrics or controls are hidden behind unintuitive menus. The full score is 10 points.", "maxScore": 10}], "class": "Data Science-Data Visualization Dashboards", "difficulty": "medium"}
{"index": 1087, "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure the code you generate is executable whenever possible. Write an online chat tool similar to WeChat that supports one-to-one and one-to-many conversations, and includes an administrative backend.", "checklist": [{"id": 0, "title": "Is the basic chat functionality fully implemented?", "description": "Review whether the code accurately implements core chat features including message sending/receiving, chat history loading, and read status tracking. Check if the messaging system handles text messages, emojis, and media attachments. Score 0 if messaging doesn't work, 5 if only basic text messaging is implemented, and 10 if all expected chat features (including typing indicators and read receipts) are fully functional.", "maxScore": 10}, {"id": 1, "title": "Are one-to-one and group chat features properly implemented?", "description": "Evaluate whether the code properly handles both private and group conversations with appropriate data structures and UI differentiation. Check if group chats include member management, admin controls, and proper message broadcasting. Deduct 5 points if group chat lacks member management features, 3 points if chat history doesn't properly separate by conversation type. Full score requires both chat types to be fully functional with proper conversation switching.", "maxScore": 10}, {"id": 2, "title": "Is the administrative backend complete and functional?", "description": "Assess whether the admin panel includes user management (add/edit/delete/ban), content moderation tools, analytics dashboard, and system configuration options. Check for role-based access control and audit logging. Deduct 5 points if user management is incomplete, 3 points if content moderation tools are missing, and 5 points if there's no proper authentication for admin access. The full score is 10 points.", "maxScore": 10}, {"id": 3, "title": "Is real-time communication properly implemented?", "description": "Check whether the code implements WebSockets or a similar technology for real-time message delivery with proper connection management. Evaluate if the implementation includes connection state handling, reconnection logic, and message queuing during disconnections. Deduct 5 points if there's no offline message handling, 3 points if there's no typing indicator, and 5 points if message delivery isn't truly real-time. The full score is 10 points.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as network interruptions, server errors, invalid inputs, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should include proper error handling, input validation, and recovery mechanisms, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. End-to-end encryption 2. Interactive message reactions 3. Smart message prioritization 4. AI chatbot integration). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple notification systems coexisting) 2. Function modules unrelated to messaging (e.g., complex games embedded in chat) 3. Fancy effects that affect performance (e.g., excessive animations or transitions). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating UI/business logic/data layers), code reusability, documentation, and testing coverage. Deduct 5 points if global state management is messy or architectural patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if there are no tests or documentation. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the overall design follows modern messaging app principles: 1) Clean and consistent chat bubbles 2) Clear visual hierarchy between conversations and messages 3) Professional typography and spacing (message text ≥ 14px, adequate whitespace). Deduct 3 points for cluttered conversation lists, 5 points for poor contrast or readability issues, and 5 points for inconsistent visual styling between screens. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction smooth and seamless?", "description": "Judge whether the dynamic effects conform to user expectations for a modern chat application: 1) Message sending feedback ≤ 100ms 2) Smooth scrolling through chat history 3) Intuitive navigation between conversations. Deduct 5 points for laggy message sending, 3 points for jerky animations during conversation switching, and 5 points for unintuitive navigation patterns. The full score is 10 points.", "maxScore": 10}], "class": "Web Applications-Communication", "difficulty": "hard"}
{"index": 46, "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure the generated code is executable and ready for demonstration.\n\nPlease help me implement the following requirement using code. Create a vector image of a SIM card using SVG code, featuring a distinctive yellow and black design presented on a white background.", "checklist": [{"id": 0, "title": "Is the basic SIM card structure properly implemented?", "description": "Verify if the SVG code accurately represents the rectangular shape and the characteristic chip area of a SIM card. Check if dimensions are appropriate (typically 25x15mm proportion) and if the SVG viewBox is properly set. Score 5 if only basic rectangle is present, 8 if chip area is included but poorly positioned, and 10 if all structural elements are correctly implemented with proper proportions.", "maxScore": 10}, {"id": 1, "title": "Does the design feature the required yellow and black color scheme?", "description": "Evaluate if the color palette strictly adheres to the yellow and black requirement with proper contrast on the white background. Check if colors are applied appropriately to different elements (e.g., card body, chip, connector areas). Deduct 5 points if colors are inconsistent, 3 points if yellow/black balance is poor, and 7 points if additional colors are unnecessarily introduced. Consider color hex values and opacity settings.", "maxScore": 10}, {"id": 2, "title": "Is the chip contact area accurately represented?", "description": "Assess if the gold contact area (chip) follows ISO/IEC 7816 standards with proper layout of connection points. The 8 contact points should be precisely positioned. Score 5 if contacts are present but inaccurately positioned, 8 if proportionally correct but missing some details, and 10 if fully compliant with industry standards including proper spacing between contacts.", "maxScore": 10}, {"id": 3, "title": "Are the beveled corners and card notch properly implemented?", "description": "Check if the SIM card includes the characteristic angled corner (usually top right) and any necessary notch. The beveled corner should be at a 45° angle and sized approximately 3mm. Score 0 if completely missing, 5 if only roughly implemented, and 10 if precisely drawn with proper path instructions or rx/ry attributes for rounded corners.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the SVG code is properly structured with appropriate namespaces, valid attributes, and fallback options. Check if the code is compatible across different browsers and rendering engines. Code with strong robustness should have proper DOCTYPE declarations, viewBox settings, and avoid presentation attributes that might cause rendering issues. Give 10 points for highly robust code, 5 points for average robustness, and 0 points if critical issues are present.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the visual appeal (e.g., 1. Subtle gradient effects 2. Embedded manufacturer logo or text 3. Interactive hover effects). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Unnecessary nested groups or containers 2. Duplicate definitions that could be simplified with reusable components 3. Over-complex paths that could be simplified. Deduct 3 points for each redundancy found, and directly deduct 10 points if the core visual elements are obscured by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review code organization (such as proper commenting, semantic grouping, and meaningful element IDs), optimization for file size (avoiding unnecessary decimal places in coordinates), and maintainability. Deduct 5 points if SVG elements lack proper structure or naming; deduct 5 points if the code is unnecessarily verbose or inefficient; deduct 5 points if there is no consideration for scalability. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the graphic vision meet professional design standards?", "description": "Evaluate whether the overall design follows modern design principles: 1) Proportional accuracy to real SIM cards 2) Clean, crisp edges without aliasing 3) Proper use of stroke widths and fill patterns. Deduct 3 points for each visual inconsistency, 5 points for disproportionate elements, and 5 points for poor edge rendering or pixelation issues. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the SVG optimized for various display contexts?", "description": "Judge whether the SVG is prepared for different usage contexts: 1) Responsive scaling with proper viewBox and preserveAspectRatio 2) Appropriate metadata for accessibility 3) Consideration for print and digital display differences. Deduct 5 points for fixed dimensions without relative scaling, 3 points for missing title/description elements, and 5 points for elements that would render poorly at different sizes. The full score is 10 points.", "maxScore": 10}], "class": "SVG Generation-SVG Images", "difficulty": "easy"}
{"index": 1290, "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure any code you generate is executable when displayed. Write a Vue3 application for searching addresses using Tianditu (China's mapping service).", "checklist": [{"id": 0, "title": "Is the Vue3 application correctly initialized with proper structure?", "description": "Check if the application uses Vue3 composition API (with setup() or <script setup>), has appropriate component structure, and follows Vue best practices. Look for proper import statements, component registration, and directory organization. Score 0 if Vue3 is not used, 5 if basic Vue3 structure is implemented but lacking composition API, and 10 if fully structured according to Vue3 standards.", "maxScore": 10}, {"id": 1, "title": "Is Tianditu API integration properly implemented?", "description": "Verify proper Tianditu API key authentication and initialization. The code should include robust error handling for API failures (timeouts, invalid keys, service unavailability). Examine if the necessary Tianditu map modules are imported correctly. Deduct 5 points if the API key is hardcoded without environment variable protection, 3 points if error handling is minimal. The full score is 10 points.", "maxScore": 10}, {"id": 2, "title": "Is the address search functionality complete and user-friendly?", "description": "Evaluate the implementation of search input, processing, and results display. Check for features like autocomplete suggestions, search history, and clear search options. The search should handle different formats of Chinese addresses properly. Score 0 if search doesn't work, 5 if basic search works but lacks advanced features, and 10 if search is comprehensive with good UX features.", "maxScore": 10}, {"id": 3, "title": "Is the map display and interaction properly implemented?", "description": "Review map initialization, proper zoom levels, marker placement, and map interaction controls. Check for responsive map resizing based on viewport changes. Examine if search results are visually highlighted on the map and if interaction with map markers provides useful information. Deduct 3 points for missing map controls, 3 points for non-responsive map display, and 5 points if markers aren't interactive. The full score is 10 points.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as network errors, invalid search queries, API limitations, invalid addresses, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Route planning with multiple waypoints 2. Address favorites system 3. Street View integration 4. Geolocation features showing user's current location). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple map instances or search methods) 2. Function modules unrelated to address searching (e.g., unnecessary social sharing features) 3. Fancy effects that affect performance (e.g., heavy animations that slow map rendering). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating API services/UI components/state management), unit test coverage, and build process configuration. Check for proper use of Vue3 reactivity system (ref, reactive, computed, watch). Deduct 5 points if global state pollution is found or Vuex/Pinia isn't used for complex state management; deduct 5 points if the component reusability is poor; deduct 5 points if the build process is not properly configured. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction smooth and seamless?", "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Search results appear within 300ms 2) Map zooming/panning animations are smooth 3) Clear visual focus and loading states during search. Deduct 5 points for operations without feedback, 3 points for laggy map interactions, and 5 points for confusing UI state transitions. Check specifically if search suggestions appear naturally and map markers have smooth entrance animations. The full score is 10 points.", "maxScore": 10}], "class": "Web Applications-Mapping/Location Services", "difficulty": "easy"}
{"index": 1769, "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure the code you create is executable for display. Create a front-end page for a public transit system.", "checklist": [{"id": 0, "title": "Is the transit map visualization properly implemented?", "description": "Review whether the code implements a clear and accurate transit map using HTML/SVG/Canvas, with proper representation of routes, stations, and transfer points. Score 0 if no map is implemented, 5 if a basic static map is provided, and 10 if an interactive map with zoom/pan functionality is implemented.", "maxScore": 10}, {"id": 1, "title": "Is the route planning and search functionality complete?", "description": "Evaluate whether users can search for routes between stations with options for fastest/shortest routes, departure times, and transit preferences. Check if the algorithm accounts for transfer times and service frequencies. Deduct 5 points if only basic point-to-point routing exists, 3 points if time-based planning is missing. Give 10 points if advanced features like multi-criteria optimization are included.", "maxScore": 10}, {"id": 2, "title": "Is real-time transit information handling implemented?", "description": "Check whether the code implements mechanisms for displaying real-time arrival/departure information, service disruptions, and delays. Verify if data refresh mechanisms and API integration points exist. Score 0 if no real-time features exist, 5 if basic updates are implemented, and 10 if comprehensive real-time functionality with fallback mechanisms is included.", "maxScore": 10}, {"id": 3, "title": "Is the responsive design properly implemented for multiple devices?", "description": "Assess whether the transit page adapts appropriately to different screen sizes (desktop, tablet, mobile) using responsive design techniques. Check for media queries, flexible layouts, and touch-friendly controls on mobile. Deduct 5 points if the layout breaks on certain devices, and 3 points if mobile-specific optimizations are missing. Full score is 10 points.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as network failures, invalid user inputs, missing transit data, API errors) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Augmented reality station finder 2. Personalized travel statistics/carbon footprint 3. Accessibility features for visually impaired users). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple map libraries loaded) 2. Function modules unrelated to public transit (e.g., weather forecasts unrelated to travel) 3. Fancy effects that affect performance (e.g., unnecessary animations that slow page loading). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating UI components, data services, and state management), code organization, and performance optimization. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if no performance optimization techniques are implemented. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the overall design follows modern transit UI principles: 1) Clear visual hierarchy highlighting important information 2) Proper color coding for different transit lines 3) Typography that ensures readability of schedules and station names (minimum 14px font). Deduct 3 points for cluttered information display, 5 points for poor color contrast affecting readability, and 5 points for inconsistent design elements. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction smooth and seamless?", "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Route selection feedback delay ≤ 100ms 2) Smooth transitions when switching between views 3) Clear loading indicators for data retrieval operations. Deduct 5 points for each operation without feedback, 3 points for janky animations, and 5 points for confusing navigation patterns. The full score is 10 points.", "maxScore": 10}], "class": "Other-Transit System", "difficulty": "medium"}
{"index": 1263, "question": "You are a code expert, please use your professional knowledge to generate accurate and professional responses. Make sure that the code you generate is executable for display purposes. Use HTML to help me simulate a Navicat operation interface.", "checklist": [{"id": 0, "title": "Is the Navicat UI layout structure properly implemented?", "description": "Evaluate whether the HTML code accurately replicates Navicat's signature three-pane layout (connection tree, object browser, and query/result panels). Score 0 if layout is completely different from Navicat, 5 if basic structure is present but with major differences, and 10 if the UI closely resembles the authentic Navicat interface with proper proportions and component placement.", "maxScore": 10}, {"id": 1, "title": "Are the essential Navicat database connection components implemented?", "description": "Check for connection management interface elements including connection dialog, server type selection (MySQL, PostgreSQL, Oracle, etc.), connection parameters form, and test connection functionality. Deduct 3 points if connection dialog is missing, 3 points if server type selection is limited, and 4 points if connection parameter fields are incomplete. Full score is 10 points.", "maxScore": 10}, {"id": 2, "title": "Is the database object browser functionality simulated?", "description": "Verify implementation of the hierarchical tree view for databases, tables, views, stored procedures, etc. Tree nodes should be expandable/collapsible and provide contextual actions. Deduct 5 points if the tree structure is flat or non-interactive, 3 points if context menus are missing, and 2 points if icons don't properly represent object types. Full score is 10 points.", "maxScore": 10}, {"id": 3, "title": "Is the SQL query editor and results display implemented?", "description": "Assess whether the code includes a proper SQL input area with syntax highlighting, execution controls, and a tabulated results panel. Deduct 4 points for missing syntax highlighting, 3 points for absence of execution controls, and 3 points if result display doesn't support pagination or column sorting. Full score is 10 points.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as invalid SQL syntax, connection failures, large result sets, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Dark/light theme switching 2. SQL history with search function 3. Visual query builder). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple query execution methods) 2. Function modules unrelated to database management (e.g., built-in games) 3. Fancy effects that affect performance (e.g., excessive animations). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating UI components, database logic, and state management), code organization, and maintainability. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if there's excessive inline styling instead of CSS classes. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching matching Navicat's professional look 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction smooth and seamless?", "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Click feedback delay ≤ 100ms 2) Transition animation duration controlled between 300-500ms 3) Clear visual focus guidance for database operations. Deduct 5 points for each operation without feedback, 3 points for visual after-images during interface transitions, and 5 points for hard-to-find key function buttons. The full score is 10 points.", "maxScore": 10}], "class": "Management Systems-Frontend/Backend Platforms", "difficulty": "hard"}
{"index": 965, "question": "You are a coding expert. Please use your professional knowledge to generate accurate and professional responses. Make sure that the code you generate is executable for demonstration. Generate sales forecasts in a tabular format.", "checklist": [{"id": 0, "title": "Is the forecasting algorithm properly implemented?", "description": "Evaluate whether the code implements a statistically sound forecasting method (e.g., time series analysis, regression, exponential smoothing, ARIMA). Check if the algorithm handles seasonality, trends, and cyclical patterns. Score 0 if no forecasting logic exists, 5 if only basic linear projection is implemented, and 10 if multiple sophisticated forecasting methods are available with accuracy metrics.", "maxScore": 10}, {"id": 1, "title": "Is the data processing pipeline robust?", "description": "Review whether the code includes proper data cleaning, normalization, and transformation steps. Check for handling of missing values, outliers, and data type conversions. Verify if the code can process different input data formats (CSV, Excel, JSON, etc.). Deduct 5 points if missing value handling is omitted, 3 points if outlier detection is absent. Full score for comprehensive preprocessing with validation steps.", "maxScore": 10}, {"id": 2, "title": "Is the tabular output format well-implemented?", "description": "Assess if the table has proper headers, consistent formatting of numbers (decimal places, thousands separators), appropriate column widths, and clear labeling. Check if the table includes important metrics like forecast values, confidence intervals, and percentage changes. Deduct 5 points if the table lacks proper formatting, 3 points if it's missing essential sales metrics.", "maxScore": 10}, {"id": 3, "title": "Are visualization components included to complement tabular data?", "description": "Check if the code generates complementary visual representations (charts, graphs) that enhance understanding of the forecasts. Evaluate whether appropriate chart types are used (line charts for trends, bar charts for comparisons). Deduct 5 points if no visualizations are provided, 3 points if visualizations lack interactivity or legends.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as malformed input data, unexpected data types, edge cases) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Interactive filtering of forecast periods 2. Auto-recommendation of best forecasting method based on data characteristics 3. Exportable reports with findings). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar forecasting algorithms 2. Function modules unrelated to sales forecasting (e.g., unnecessary marketing analysis) 3. Complex visualizations that don't add analytical value. Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating data processing/modeling/visualization layers), documentation quality, and maintainability. Deduct 5 points if global variables are overused; deduct 5 points if the code lacks comments or documentation; deduct 5 points if the code structure makes it difficult to extend or modify. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the table design meet professional standards?", "description": "Evaluate whether the table follows professional design principles: 1) Consistent typography (font size, weight for different data categories) 2) Proper use of borders, spacing, and alignment 3) Clear visual hierarchy between headers, data, and totals. Deduct 3 points for inconsistent formatting, 5 points for poor information hierarchy, and 5 points for cluttered layout. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the user interaction intuitive and responsive?", "description": "Judge whether the interface provides intuitive controls for adjusting forecast parameters and viewing results: 1) Clear input mechanisms for date ranges and variables 2) Responsive updates when parameters change 3) Informative tooltips or context information. Deduct 5 points if parameters cannot be adjusted, 3 points for slow response times, and 5 points if the interaction flow is confusing. The full score is 10 points.", "maxScore": 10}], "class": "Data Science-Predictive Modeling", "difficulty": "medium"}
{"index": 1450, "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure the generated code is executable whenever possible. Implement, using HTML with Opencv.js, a method to set polygon coordinates on an image and extract text from within the selected polygon area.", "checklist": [{"id": 0, "title": "Is the polygon coordinate selection system properly implemented?", "description": "Check if the HTML interface allows users to create and modify polygon vertices on the image. The implementation should include point creation on click, vertex dragging, and completion of the polygon. Score 0 if no polygon creation exists, 5 if only basic point placement is implemented, and 10 if a complete, interactive polygon drawing system with editing capabilities is present.", "maxScore": 10}, {"id": 1, "title": "Is the image loading and display functionality robust?", "description": "Evaluate whether the code properly handles image loading, including error handling for invalid images, support for different image formats (JPEG, PNG, etc.), and responsive sizing that maintains aspect ratio. The image should be properly displayed as a canvas element for OpenCV.js processing. Deduct 5 points if there's no image validation, 3 points if responsive sizing is missing, and 2 points if the canvas setup is incorrect. Full score is 10 points.", "maxScore": 10}, {"id": 2, "title": "Is the OpenCV.js integration correctly implemented?", "description": "Assess the initialization of OpenCV.js, proper usage of cv.Mat objects, and memory management with .delete() calls to prevent leaks. Check for proper module loading detection and fallback mechanisms if OpenCV fails to load. Deduct 5 points for missing memory management, 5 points for no OpenCV loading verification, and 3 points for inefficient usage of OpenCV objects. The full score is 10 points.", "maxScore": 10}, {"id": 3, "title": "Is the text extraction from the polygon region correctly implemented?", "description": "Verify that the code correctly masks the image using the defined polygon, applies appropriate preprocessing (like grayscale conversion, thresholding, noise removal) before OCR, and extracts text from only within the polygon. Check for OCR library integration (like Tesseract.js). Deduct 5 points if the masking is incorrect, 5 points if no preprocessing is applied, and 5 points if OCR integration is missing. The full score is 10 points.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as invalid polygon shapes, extremely small polygons, images that fail to load, or browser compatibility issues) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Auto-adjustment of polygon for better text recognition 2. Multiple polygon support with labeling 3. Text extraction result highlighting on the original image). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar image processing functions 2. Unnecessary UI elements unrelated to the polygon creation and text extraction task 3. Heavy computational methods that slow down browser performance. Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating UI/image processing/OCR logic), error handling, and code comments. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if there are no meaningful comments explaining complex OpenCV operations. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the overall design follows modern design principles: 1) Clean and intuitive UI for polygon creation 2) Proper layout spacing between controls and the image canvas 3) Professional visual feedback when selecting points and creating polygons. Deduct 3 points for each crowded visual element, 5 points for poorly contrasting colors making polygon points hard to see, and 5 points for chaotic button/control layout. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction smooth and seamless?", "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Immediate visual feedback when placing polygon points 2) Smooth polygon dragging and reshaping 3) Clear indication when the polygon is complete and ready for text extraction. Deduct 5 points for each operation without feedback, 3 points for laggy polygon manipulation, and 5 points for confusing interaction patterns that don't follow standard conventions. The full score is 10 points.", "maxScore": 10}], "class": "Data Science-Machine Learning", "difficulty": "hard"}
{"index": 99, "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure the generated code is executable when possible.\n\nPlease use HTML and JavaScript to implement a Sports: Team Management and Season Mode\n\n**Task**: Implement a team management system where players can manage team rosters, training, and tactics, and participate in a complete season of matches.\n\n**Hint**: You can design a season progression system, and adjust team performance and player rankings based on match results.\n\nGame, and include some comments in the code so that other developers can understand your implementation process.", "checklist": [{"id": 0, "title": "Is the team management system fully implemented?", "description": "Review whether the code accurately implements team roster management through HTML/JavaScript, including player recruitment, release, position assignment, and attribute management (skills, stamina, morale, etc.). Check if training systems are implemented with proper progression mechanics. Score 0 if core team management is missing, 5 if only basic roster operations exist, and 10 if comprehensive team management with training and player development is fully included.", "maxScore": 10}, {"id": 1, "title": "Is the season mode progression system implemented?", "description": "Check whether the season system includes complete match scheduling, league tables, playoff structures, and season calendar management. Evaluate if match simulation logic considers team tactics, player conditions, and realistic scoring mechanisms. Deduct 5 points if match results are purely random, and 3 points if season progression lacks proper pacing or milestone events. The full score is 10 points.", "maxScore": 10}, {"id": 2, "title": "Is the tactical system designed with strategic depth?", "description": "Evaluate whether the tactical system allows formation changes, strategy adjustments (offensive/defensive styles), and player role assignments that meaningfully impact match outcomes. Check if tactics interact with player attributes and opponent strategies. Deduct 5 points if tactics are cosmetic only, and 3 points if the system lacks tactical variety or counter-strategies. The full score is 10 points.", "maxScore": 10}, {"id": 3, "title": "Is the performance tracking and ranking system constructed?", "description": "Check whether the code includes comprehensive statistics tracking for both teams and individual players, dynamic ranking systems that update based on performance, and historical data preservation across seasons. Evaluate if performance metrics influence player values, team reputation, and future opportunities. Deduct 5 points if statistics are not persistent, and 3 points if ranking algorithms are overly simplistic. Give 10 points if fully implemented with detailed analytics.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as invalid player transfers, corrupted save data, simulation errors, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. AI-powered scouting recommendations 2. Dynamic weather effects on matches 3. Social media simulation for team popularity 4. Injury recovery mini-games). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple save/load systems coexisting) 2. Function modules unrelated to sports management (e.g., built-in social media feed) 3. Fancy effects that affect performance (e.g., complex 3D stadium renders). Deduct 3 points for each redundancy found, and directly deduct 10 points if core functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating game logic/UI/data management layers), code documentation quality, and maintainable architecture patterns. Deduct 5 points if global state pollution is found or proper encapsulation is missing; deduct 5 points if the code lacks sufficient comments or has poor naming conventions; deduct 3 points if data structures are inefficient. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the overall design follows modern sports management UI principles: 1) Consistent color scheme reflecting team branding 2) Dashboard layout with clear information hierarchy 3) Professional typography with readable statistics tables. Deduct 3 points for each cluttered interface section, 5 points for poor color contrast in data visualization, and 5 points for inconsistent spacing or alignment. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction smooth and seamless?", "description": "Judge whether the interactive elements provide appropriate feedback: 1) Drag-and-drop for player transfers with visual confirmation 2) Smooth transitions between different management screens 3) Real-time updates during match simulations with proper pacing. Deduct 5 points for each unresponsive interaction, 3 points for jarring transitions between screens, and 5 points for poorly paced match simulation that feels rushed or tedious. The full score is 10 points.", "maxScore": 10}], "class": "Game Development-Sports", "difficulty": "medium"}
{"index": 209, "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Be sure to ensure the generated code is executable for demonstration. I am developing a WinUI3 application and need to use ffmpeg.autogen to pull RTSP streams and display the video stream on an Image control, without audio. The video delay needs to be strictly controlled, expected to be within 200ms. Please provide a detailed design solution and output the complete code for direct use.", "checklist": [{"id": 0, "title": "Is the RTSP stream pulling mechanism correctly implemented?", "description": "Review whether the code correctly initializes ffmpeg.autogen libraries, sets up the RTSP connection with appropriate parameters (TCP transport preferred over UDP for stability), and includes proper error handling for stream connection failures. Check if the code includes low-latency configurations like setting 'rtsp_flags' to 'prefer_tcp' and using 'fflags' with 'nobuffer' and 'flush_packets' options. Score 0 if ffmpeg initialization is missing, 5 if basic RTSP connection works without optimizations, and 10 if all low-latency configurations are properly implemented.", "maxScore": 10}, {"id": 1, "title": "Is the video frame processing pipeline optimized for low latency?", "description": "Evaluate if the decoding pipeline minimizes buffering, uses direct memory access when possible, and implements frame skipping for maintaining real-time playback. Check if the solution correctly handles I-frames vs P-frames, avoids unnecessary frame copying, and implements a proper synchronization mechanism. Deduct 5 points if frame buffering exceeds 2 frames, 3 points if frame conversion adds unnecessary overhead, and 2 points if timestamp management is improperly implemented. The full score is 10 points.", "maxScore": 10}, {"id": 2, "title": "Is WinUI3 rendering properly integrated with ffmpeg's output?", "description": "Check if the solution properly converts decoded frames to a format compatible with WinUI3's Image control (like SoftwareBitmap or WriteableBitmap), handles UI thread synchronization properly, and optimizes the rendering process. Verify that the solution includes proper disposal of unmanaged resources and doesn't leak memory during frame conversions. Deduct 5 points if UI thread synchronization is incorrect, 3 points if frame conversion is inefficient, and 2 points if memory management is improper. The full score is 10 points.", "maxScore": 10}, {"id": 3, "title": "Is latency measurement and control implemented effectively?", "description": "Evaluate if the solution includes accurate methods to measure end-to-end latency, from capture to display, and implements strategies to maintain it under 200ms. Check for frame timestamp comparison, queue management techniques, or adaptive frame dropping algorithms. Deduct 5 points if no latency measurement is implemented, 3 points if measurements are inaccurate, and 2 points if there's no mechanism to maintain latency targets. Give 10 points for a comprehensive solution with adaptive control mechanisms.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as network interruptions, malformed packets, codec errors, etc.) and provide friendly error prompts or recovery mechanisms. Check if the solution implements connection retry logic, graceful degradation for poor network conditions, and proper cleanup on errors. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Real-time latency display on the UI 2. Network quality indicator 3. Dynamic quality adjustment based on connection speed 4. Multiple stream support with thumbnail previews). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant initialization of ffmpeg components 2. Unnecessary processing steps in the video pipeline that add latency 3. UI elements or threading models that don't contribute to the core functionality or performance. Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating stream acquisition/decoding/rendering layers), error handling coverage, and resource management. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if proper resource disposal is not implemented. Check if the solution follows RAII principles for unmanaged resources. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the WinUI3 interface follows modern design principles: 1) Proper layout using Grid/StackPanel with appropriate margins 2) High-contrast controls for stream control and status indicators 3) Responsive design that handles window resizing gracefully. Deduct 3 points for each poorly implemented UI element, 5 points for inconsistent styling, and 5 points for poor layout adaptation to different window sizes. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction smooth and seamless?", "description": "Judge whether the application provides responsive controls: 1) Stream connect/disconnect response ≤ 100ms 2) Clear visual indicators for buffering states 3) Proper error message display with actionable information. Deduct 5 points for operations without feedback, 3 points for UI freezes during stream operations, and 5 points for confusing state representations. Check if the solution implements proper UI thread marshaling to prevent freezing. The full score is 10 points.", "maxScore": 10}], "class": "Other-Video Streaming Application", "difficulty": "hard"}
{"index": 411, "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure that the generated code is executable whenever possible. On a Linux system, write a Java GUI Swing demo that can capture real-time video streams from Hikvision SDK and display them on a JPanel. Note that Hikvision SDK on Linux does not support direct rendering of video to AWT or Swing components.", "checklist": [{"id": 0, "title": "Is the Hikvision SDK integration correctly implemented?", "description": "Review whether the code accurately integrates with Hikvision SDK using JNA or JNI, with proper library loading, initialization, and error handling. Check if native method calls are correctly wrapped, and if the SDK initialization sequence is followed according to Hikvision documentation. Score 0 if there's no integration, 5 if basic integration exists but with errors, 10 if fully implemented with comprehensive error handling.", "maxScore": 10}, {"id": 1, "title": "Is the video capture and frame extraction mechanism properly implemented?", "description": "Evaluate whether the code properly implements the capture mechanism, including device discovery, connection establishment, stream selection, and frame extraction. Since direct rendering isn't supported, check if there's a proper buffer system to handle the frames from the SDK. Deduct 5 points if device discovery is missing, 3 points if stream selection options aren't provided, and 3 points if frame extraction has performance issues. The full score is 10 points.", "maxScore": 10}, {"id": 2, "title": "Is there an effective mechanism to convert SDK frames to Java-compatible images?", "description": "Check if the implementation contains an efficient conversion mechanism from native Hikvision frame buffers to Java BufferedImage or compatible formats. Look for optimization techniques like direct buffer access, minimal copying, and possibly native accelerated conversion. Deduct 5 points if conversion causes significant frame drops, 3 points if memory usage grows uncontrollably, and 5 points if there's no color space handling. The full score is 10 points.", "maxScore": 10}, {"id": 3, "title": "Is the JPanel display implementation optimized for real-time video?", "description": "Assess whether the JPanel display uses double-buffering, proper threading model, and optimized repainting strategies. Since direct rendering isn't supported, check if the solution uses efficient approaches like SwingWorker, Timer, or separate rendering threads. Deduct 5 points if the UI freezes during video playback, 3 points if frame tearing is visible, and 5 points if CPU usage is unnecessarily high. The full score is 10 points.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as camera disconnection, SDK initialization failures, memory overflow, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Multi-camera view management 2. Recording capability with compression options 3. Motion detection overlay 4. Frame analysis tools). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant thread creation for similar tasks 2. Unnecessary image conversions or buffer copies 3. Feature implementations unrelated to video display that may impact performance. Deduct 3 points for each redundancy found, and directly deduct 10 points if the core video display functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating SDK interaction/frame processing/UI layers), proper resource management (especially native resources), and error logging. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if resources aren't properly released; deduct 5 points if there's no proper logging for debugging. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the overall design follows modern design principles: 1) Clean video display area without unnecessary decorations 2) Proper control panel layout with intuitive grouping 3) Consistent sizing and spacing of UI elements. Deduct 3 points for each crowded visual element, 5 points for poor contrast that affects visibility, and 5 points for chaotic control layout. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction smooth and seamless?", "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) UI responsiveness during video playback 2) Smooth transitions when changing cameras or settings 3) Clear visual feedback for operation states. Deduct 5 points for UI freezing during operations, 3 points for delayed visual feedback, and 5 points for hard-to-find essential controls. The full score is 10 points.", "maxScore": 10}], "class": "Utility Tools-Hardware Management", "difficulty": "hard"}
{"index": 1600, "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure that the generated code can be executed and displayed properly. I want to create a video website where the video URLs are collected through web scraping technologies. The video website needs to include features such as video listings, video details, recommended videos, and pagination.", "checklist": [{"id": 0, "title": "Is the web scraping mechanism properly implemented?", "description": "Check if the code includes robust web scraping functionality with proper error handling, rate limiting, and respect for robots.txt. The implementation should handle different website structures, use appropriate parsing libraries (BeautifulSoup, Cheerio, etc.), and include proxy rotation or user-agent switching. Score 0 if no scraping code is provided, 5 if basic scraping is implemented but lacks safeguards, and 10 if a complete solution with error handling and ethical considerations is included.", "maxScore": 10}, {"id": 1, "title": "Is the video listing feature complete?", "description": "Evaluate whether the video listing includes essential metadata (title, thumbnail, duration, upload date, view count), supports different sorting options (trending, newest, most viewed), and has proper grid/list view toggles. The UI should be responsive across different screen sizes. Deduct 3 points if metadata is incomplete, 3 points for non-responsive design, and 2 points if sorting options are missing. The full score is 10 points.", "maxScore": 10}, {"id": 2, "title": "How well is the video detail page implemented?", "description": "Analyze if the video detail page includes a functional video player with standard controls, complete metadata display, sharing options, and proper handling of different video sources/formats. Check if the page properly handles video loading states and errors. Score 0 if the video player doesn't work, 5 if it works but lacks important features (like fullscreen or playback speed), and 10 if it's fully featured with proper error handling.", "maxScore": 10}, {"id": 3, "title": "Is the recommendation system effectively implemented?", "description": "Check if the code implements a recommendation algorithm based on video metadata, user history, or content similarity. The system should display recommended videos in appropriate places (sidebar, after video ends) with relevant preview information. Deduct 5 points if recommendations are random instead of algorithmic, 3 points if they lack preview information, and 2 points if they're not contextually placed. The full score is 10 points.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as broken video links, failed API requests, missing metadata, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Picture-in-picture mode 2. Video history with resume capability 3. Smart tagging/categorization of scraped content). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant implementations of similar functions (e.g., multiple pagination systems coexisting) 2. Function modules unrelated to video streaming (e.g., a built-in calculator) 3. Fancy effects that affect performance (e.g., heavy animations that slow down video loading). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating data fetching/UI/state management layers), appropriate caching mechanisms for scraped data, and scalability considerations. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if no data persistence or caching strategy exists. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the overall design follows modern video platform principles: 1) Clean layout with focus on video content 2) Proper thumbnail aspect ratios and sizes (16:9 with consistent dimensions) 3) Professional typography hierarchy (titles, descriptions, metadata). Deduct 3 points for cluttered layouts, 5 points for inconsistent thumbnail sizes, and 5 points for poor information hierarchy. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction smooth and seamless?", "description": "Judge whether the dynamic effects conform to video platform expectations: 1) Video loads within 3 seconds 2) Smooth transitions between listing and detail pages 3) Infinite scroll or pagination without page reloads. Deduct 5 points for each video that fails to load properly, 3 points for jerky transitions between pages, and 5 points for pagination that requires full page reloads. The full score is 10 points.", "maxScore": 10}], "class": "Web Applications-Web Visuals", "difficulty": "hard"}
{"index": 70, "question": "You are a code expert, please use your professional knowledge to generate accurate and professional responses. Try to ensure the generated code is executable for demonstration.\n\nPlease use HTML and JavaScript to implement a virtual currency game.\n\n**Task**: Design a virtual currency system where players can earn virtual currency through in-game activities and use it to purchase items and equipment.\n\n**Hint**: Set up functions for earning and spending virtual currency, and provide various options for items and equipment.\n\nPlease include comments in your code to help other developers understand your implementation process.", "checklist": [{"id": 0, "title": "Is the core virtual currency earning and spending system fully implemented?", "description": "Review whether the code accurately implements mechanisms for players to earn virtual currency (e.g., completing tasks, winning games, daily rewards) and spend it (purchasing items/equipment). Check if the currency balance updates correctly and transactions are properly validated. Score 0 if the core currency system is missing, 5 if only basic earning OR spending is implemented, and 10 if both earning AND spending mechanisms are complete with proper validation.", "maxScore": 10}, {"id": 1, "title": "Is the item/equipment inventory system properly implemented?", "description": "Evaluate whether the code includes a complete inventory system that tracks purchased items, displays owned items, and implements item effects or stats. Check if items have proper attributes (e.g., price, type, effects) and if the inventory persists across sessions (using localStorage or similar). Deduct 5 points if items lack attributes beyond name/price, and 3 points if there's no persistence mechanism. The full score is 10 points.", "maxScore": 10}, {"id": 2, "title": "Are various in-game activities for earning currency implemented?", "description": "Check for the presence of multiple meaningful activities to earn currency (e.g., games, tasks, quests, timed rewards). Each activity should have a unique implementation with appropriate rewards based on difficulty/time. Give 10 points for 3+ well-implemented activities, 5 points for 1-2 basic activities, and 0 points if earning mechanics are trivial (e.g., just clicking a button).", "maxScore": 10}, {"id": 3, "title": "Is there a complete game economy balance design?", "description": "Evaluate whether the virtual economy is properly balanced—income rates vs. item prices should create meaningful progression. Check for currencies sink mechanisms to prevent inflation, progression scaling, and whether there are premium/rare items that take significant time to acquire. Deduct 3 points if the economy allows instant acquisition of all items, 5 points if there's no long-term progression design, and 3 points if currency generation has no limits. The full score is 10 points.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as negative currency values, purchasing items without sufficient funds, invalid inputs) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Currency exchange rates between different types of currencies 2. Special time-limited offers or discounts 3. Achievements system tied to purchases). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple methods to update currency) 2. Function modules unrelated to the virtual currency game (e.g., a built-in calculator) 3. Fancy effects that affect performance (e.g., excessive animations that slow down transactions). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating currency logic/item management/UI layers), code organization, and quality of comments as requested in the task. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if comments are missing or unhelpful. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction smooth and seamless?", "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Visual feedback when earning/spending currency 2) Transition animations when purchasing items 3) Clear visual focus on important elements like balance and available items. Deduct 5 points for each operation without feedback, 3 points for jarring transitions when updating currency values, and 5 points for hard-to-find key function buttons. The full score is 10 points.", "maxScore": 10}], "class": "Game Development-Strategy", "difficulty": "easy"}
{"index": 373, "question": "You are a code expert, please use your professional knowledge to generate accurate and professional responses. Make sure to ensure that the generated code is executable for demonstration. Generate an HTML file that simulates the solar system in motion.", "checklist": [{"id": 0, "title": "Is the solar system model accurately represented?", "description": "Evaluate whether the code correctly implements the solar system with proper relative sizes and orbital distances of celestial bodies. Check if the Sun is positioned at the center and if at least the 8 major planets (Mercury, Venus, Earth, Mars, Jupiter, Saturn, Uranus, and Neptune) are included. Award 10 points for accurate representation with correct relative sizes and distances, 5 points if major planets are present but with inaccurate proportions, 0 points if the model is fundamentally flawed.", "maxScore": 10}, {"id": 1, "title": "Is the planetary motion physics correctly implemented?", "description": "Review whether the orbital mechanics follow Kepler's laws with proper elliptical paths, varying orbital velocities (faster when closer to the Sun), and correct orbital periods (relative to each other). Deduct 5 points if orbits are perfectly circular instead of elliptical, deduct 3 points if orbital speeds are constant, and deduct 5 points if orbital periods don't maintain correct proportions between planets. The full score is 10 points.", "maxScore": 10}, {"id": 2, "title": "Are visual celestial body details and textures implemented?", "description": "Check if the planets have distinctive visual characteristics (Jupiter's storm, Saturn's rings, Earth's blue color and continents, etc.). Award 10 points for detailed textures and visual effects for each planet, 5 points if basic color differences are present but without detailed textures, 0 points if all planets look identical with no distinguishing features.", "maxScore": 10}, {"id": 3, "title": "Is there interactive functionality for user engagement?", "description": "Evaluate whether the simulation allows for user interaction such as zooming in/out, changing the viewing angle, adjusting simulation speed, or clicking on planets for information. Award 10 points for multiple intuitive interactive features, 5 points for basic controls, 0 points for a completely static non-interactive visualization.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as browser resizing, different screen resolutions, device compatibility) and provide graceful degradation. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Day/night cycles on Earth 2. Realistic stars in the background 3. Comet or asteroid visualizations 4. Moon systems around planets). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar animation functions 2. Feature modules unrelated to the solar system (e.g., unrelated UI elements) 3. Fancy effects that affect performance (e.g., excessive particle effects that cause lag). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating astronomy calculation logic/rendering/user interaction layers), code reusability, and performance optimization. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if no performance optimizations are implemented for smooth animation. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the overall design follows modern design principles: 1) Appropriate use of space visualization (correct perspective, lighting, and shadows) 2) Proper layout spacing for any UI controls 3) Professional typography for any informational text (readable font size and contrast). Deduct 3 points for each visual inaccuracy in space representation, 5 points for poor lighting that makes planets difficult to distinguish, and 5 points for unreadable or poorly positioned text elements. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the animation smooth and performant?", "description": "Judge whether the animation runs at a consistent frame rate (ideally 60fps) without stuttering: 1) Smooth planetary rotation and revolution 2) Consistent performance over time 3) No visual glitches during continuous operation. Deduct 5 points for frame rate below 30fps on standard hardware, 3 points for visual jitter during animation, and 5 points for increasing performance degradation over time. The full score is 10 points.", "maxScore": 10}], "class": "Simulation & Modeling-3D Simulation", "difficulty": "medium"}
{"index": 975, "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Be sure to ensure that the code you generate is executable for demonstration. Can an xbuild h5 vue project that generates a mobile APP create a floating window that displays over other applications?", "checklist": [{"id": 0, "title": "Is the cross-platform capability accurately explained?", "description": "Evaluate whether the response clearly distinguishes between WebView/H5 limitations and native app capabilities regarding system-level floating windows. Check if it explains that Vue-based H5 apps cannot create OS-level floating windows that display over other applications without native integration. Deduct 5 points for ambiguous explanations, 10 points for incorrect technical information about WebView capabilities. The full score is 10 points.", "maxScore": 10}, {"id": 1, "title": "Is the native bridge integration solution properly implemented?", "description": "Check whether the solution provides a complete native bridge implementation (e.g., using JSBridge, Capacitor, or other native plugins) that connects the Vue application with native functionality required for floating windows. Evaluate if the code includes both the JavaScript interface and corresponding native code (Java/Kotlin for Android, Swift/Objective-C for iOS). Score 0 if missing entirely, 5 for partial implementation, and 10 for complete implementation with proper documentation.", "maxScore": 10}, {"id": 2, "title": "Is a viable alternative solution proposed for H5 constraints?", "description": "Assess whether practical alternatives are provided given H5 limitations, such as in-app floating components, PWA notification techniques, or hybrid approaches. Evaluate the practicality and implementation completeness of these alternatives. Score 0 if no alternatives are provided, 5 for conceptual alternatives without implementation, and 10 for fully implemented alternatives with code examples.", "maxScore": 10}, {"id": 3, "title": "Are permission requirements and platform differences clearly addressed?", "description": "Review whether the response accurately outlines the permission requirements for floating windows across different platforms (especially Android's SYSTEM_ALERT_WINDOW permission), including code snippets for requesting these permissions. Evaluate explanation of iOS limitations and workarounds. Deduct 3 points for each platform with missing permission handling, and 5 points for incorrect permission information. The full score is 10 points.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as permission denials, API version compatibility issues, application lifecycle events, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Adaptive floating window behavior based on user context 2. Gesture-based controls for the floating window 3. Smart positioning to avoid keyboard/UI overlaps). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple window creation methods) 2. Function modules unrelated to floating windows (e.g., unnecessary analytics) 3. Performance-heavy effects that aren't essential. Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (separation of UI/logic/platform-specific code), reusability of components, and proper error handling. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if platform-specific code is not properly isolated. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the floating window interface meet professional design standards?", "description": "Evaluate whether the floating window design follows mobile UI principles: 1) Appropriate size and positioning (not blocking critical content) 2) Clear visual hierarchy with proper contrast 3) Touch-friendly target sizes (minimum 44px). Deduct 3 points for each usability issue, 5 points for poor visibility/contrast, and 5 points for designs that don't account for different screen sizes. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction smooth and responsive?", "description": "Judge whether the floating window interactions are fluid and intuitive: 1) Drag-and-drop responsiveness within 50ms 2) Smooth transitions when showing/hiding (animation duration 200-300ms) 3) Clear visual feedback for all interactions. Deduct 5 points for laggy animations, 3 points for missing interaction states, and 5 points for unintuitive gesture controls. The full score is 10 points.", "maxScore": 10}], "class": "Other-Mobile Development", "difficulty": "easy"}
{"index": 377, "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure that the generated code is executable and demonstrable. Create a Plants vs. Zombies code that can run directly in a browser. No computer operations needed, just a link that can be run in a browser.", "checklist": [{"id": 0, "title": "Is the core Plants vs. Zombies game mechanics fully implemented?", "description": "Review whether the code accurately implements the essential game mechanics including plant placement, zombie movement, sun collection, and combat interactions. Score 0 if core gameplay is missing, 5 if only basic elements exist, and 10 if the implementation includes multiple plant types, zombie varieties, and proper collision detection.", "maxScore": 10}, {"id": 1, "title": "Does the game include a complete level progression system?", "description": "Evaluate whether the game includes multiple levels with increasing difficulty, different zombie waves, and a level completion system. Deduct 5 points if there's only a single level, 3 points if difficulty progression is missing. Full score requires at least 3 distinct levels with proper wave management.", "maxScore": 10}, {"id": 2, "title": "Is the resource management system properly implemented?", "description": "Check if the sun collection mechanic works correctly, plants have appropriate costs, and cooldown timers function as expected. Score 0 if resource management is absent, 5 if basic sun collection exists but lacks cooldowns, and 10 if all resource aspects (sun generation, collection, plant costs, and cooldowns) are properly balanced.", "maxScore": 10}, {"id": 3, "title": "Is the browser compatibility and performance optimized?", "description": "Assess whether the game runs smoothly in multiple browsers without lag, maintains consistent frame rates even with many entities, and uses proper performance optimization techniques. Deduct 5 points for noticeable lag with 10+ entities on screen, 3 points if the game doesn't work in at least 3 major browsers, and 5 points if animation frame handling is inefficient.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as rapid clicking, out-of-bounds placement attempts, browser resizing, etc.) and provide friendly error handling. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Special power-ups 2. Weather effects impacting gameplay 3. Mobile touch optimizations 4. Achievement system). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple hit detection systems) 2. Function modules unrelated to PvZ gameplay (e.g., unnecessary mini-games) 3. Fancy effects that affect performance (e.g., excessive particle systems). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating game logic/view/entities), asset management, and code organization patterns. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if asset loading is not optimized. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the visual design matches the original game's aesthetic while following modern design principles: 1) Consistent art style for plants and zombies 2) Clear visual distinction between game elements 3) Readable UI elements and proper scaling across screen sizes. Deduct 3 points for inconsistent art styles, 5 points for unclear visual hierarchy, and 5 points for unresponsive layouts. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction smooth and seamless?", "description": "Judge whether the game interactions feel responsive and intuitive: 1) Plants place immediately on valid click 2) Zombies move smoothly with proper animations 3) Sun collection feels satisfying with visual/audio feedback. Deduct 5 points for delayed plant placement (>200ms), 3 points for jerky zombie movement, and 5 points for unresponsive sun collection. The full score is 10 points.", "maxScore": 10}], "class": "Game Development-Strategy", "difficulty": "hard"}
{"index": 1260, "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure the code you generate is executable for display. Tasks completed:\n1. Test execution - added multiple query options to the operating condition execution interface;\n2. Added dynamic form controls;\n3. Test records - added multiple query options to the operating condition execution interface;\n4. Added homepage module;\n5. Improved the TTF icon library", "checklist": [{"id": 0, "title": "Are the multiple query options for operating condition execution interface fully implemented?", "description": "Review whether the code accurately implements the query form with proper validation, filtering logic, and state management. Check if the advanced filtering options allow for complex combinations and flexible parameter adjustments. Score 0 if query functionality is missing, 5 if only basic filtering is implemented, and 10 if it includes advanced features like fuzzy search, range filters, and parameter persistence.", "maxScore": 10}, {"id": 1, "title": "Is the dynamic form control system properly implemented?", "description": "Evaluate the implementation of dynamic form controls including validation logic, error handling, and state management. Check if the controls support conditional visibility, dependent validation, and value interpolation. Deduct 3 points if controls lack accessibility features, 3 points if validation logic is inconsistent, and 4 points if state management causes memory leaks. The full score is 10 points.", "maxScore": 10}, {"id": 2, "title": "Are the test records query options correctly integrated with the execution interface?", "description": "Examine whether the test records query interface is properly connected to the execution system, with appropriate data flow between components. Verify that search results update reactively and maintain consistency with filter states. Deduct 5 points if the query results don't synchronize correctly with execution context, and 3 points if pagination or sorting logic has edge cases. The full score is 10 points.", "maxScore": 10}, {"id": 3, "title": "Is the homepage module comprehensive and well-integrated?", "description": "Assess the homepage module for completeness, featuring dashboard elements, navigation system, and proper integration with other system modules. Check for responsive design implementation and information architecture. Deduct 5 points if key metrics are missing, 3 points for poor navigation design, and 2 points for inadequate responsive behavior. The full score is 10 points.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as form validation errors, network interruption, empty states, concurrent operations, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Smart query suggestions based on usage patterns 2. Visualization of test result trends 3. Keyboard shortcut system for power users). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple filtering mechanisms coexisting) 2. Function modules unrelated to the test system (e.g., unnecessary analytics) 3. Fancy effects that affect performance (e.g., excessive animations). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating logic/view/data layers), unit test coverage, and build process automation. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the build process is not automated. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Examine the TTF icon library implementation for consistency, proper sizing and alignment. Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction smooth and seamless?", "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Click feedback delay ≤ 100ms 2) Transition animation duration controlled between 300-500ms 3) Clear visual focus guidance. Deduct 5 points for each operation without feedback, 3 points for visual after-images during fast sliding, and 5 points for hard-to-find key function buttons. The full score is 10 points.", "maxScore": 10}], "class": "Management Systems-Frontend/Backend Platforms", "difficulty": "hard"}
{"index": 1707, "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure the code you generate is executable for demonstration purposes. Write a Vue component that shows a conversation list on the left side, and when a specific conversation is clicked, it displays the chat history on the right side.", "checklist": [{"id": 0, "title": "Is the Vue component structure properly implemented?", "description": "Evaluate if the code follows Vue best practices with proper component organization. Check for appropriate use of Vue 3 composition API or Vue 2 options API, single-file component structure, and proper separation of template, script, and style sections. Verify if props, emits, and component registration are correctly implemented. Score 0 if the Vue component structure is missing or completely incorrect, 5 if basic structure exists but with significant issues, and 10 if fully compliant with Vue best practices.", "maxScore": 10}, {"id": 1, "title": "Is the conversation list functionality fully implemented?", "description": "Review whether the left side conversation list displays all conversations with proper styling and interactive elements. Check if each conversation item shows relevant information (e.g., contact name, preview text, timestamp). Verify if the active/selected conversation is visually distinguished. Deduct 3 points if sorting/filtering options are missing, 3 points if conversation previews are incomplete, and 4 points if there's no visual indication of unread or important messages. The full score is 10 points.", "maxScore": 10}, {"id": 2, "title": "Is the chat history display functionality properly implemented?", "description": "Check if the right side displays the complete chat history for the selected conversation. Verify if messages are properly formatted with sender information, timestamps, and correct visual styling to distinguish between sent and received messages. Evaluate if messages are displayed in the correct chronological order with appropriate spacing. Deduct 3 points if message timestamps are missing, 3 points if there's no visual distinction between sent/received messages, and 4 points if media attachments aren't handled. The full score is 10 points.", "maxScore": 10}, {"id": 3, "title": "Is the interaction between conversation selection and chat display properly implemented?", "description": "Evaluate if clicking a conversation in the list properly updates the chat display on the right. Check if the state management for the active conversation is implemented correctly, whether using Vuex/Pinia or component state. Verify if there's appropriate loading state management when switching between conversations. Deduct 5 points if clicking doesn't update the display or has significant delay, 3 points if there's no visual feedback on selection, and 2 points if the state persistence between renders is missing. The full score is 10 points.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code handles common edge cases (such as empty conversation list, empty chat history, long messages, different screen sizes, etc.) and provides appropriate error handling or placeholder states. Check for input validation and proper defensive programming. Deduct 3 points for each unhandled edge case, and give 10 points if all common scenarios are properly handled with graceful degradation. If the robustness is average, give 5 points, and if no edge cases are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Message search functionality 2. Typing indicators 3. Read receipts 4. Message reactions 5. Dark/light theme toggle). Add 2 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant state management (e.g., duplicate conversation tracking) 2. Function modules unrelated to the chat interface (e.g., built-in games or unnecessary toolbars) 3. Overly complex implementations that could be simplified. Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review component composition (proper use of child components), state management implementation, code reusability, and naming conventions. Check if the code follows Vue style guide recommendations. Deduct 3 points if global state is used inappropriately, 3 points if component responsibilities are not properly separated, 2 points if naming conventions are inconsistent, and 2 points if there's significant code duplication. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the overall design follows modern messaging app conventions: 1) Consistent color scheme with proper contrast 2) Proper layout spacing between conversations and messages 3) Professional typography with readable font sizes. Assess if the conversation list has appropriate width relative to the chat display. Deduct 3 points for poor use of space, 3 points for inconsistent styling between list and chat, 2 points for poor typography, and 2 points for non-responsive design. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction smooth and seamless?", "description": "Judge whether the interactions follow best practices: 1) Immediate visual feedback when selecting conversations 2) Smooth transitions when switching between chats 3) Proper scroll behavior in conversation list and chat history (especially for long conversations). Deduct 3 points for lack of loading states, 3 points for jerky transitions, 2 points for scroll issues with long content, and 2 points for poor keyboard navigation support. The full score is 10 points.", "maxScore": 10}], "class": "Web Applications-Communication", "difficulty": "easy"}
{"index": 376, "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure the code you generate is executable and displayable. Help me write an aesthetically pleasing HTML program for a celestial planetary motion simulation.", "checklist": [{"id": 0, "title": "Is the celestial planetary motion simulation accurately implemented?", "description": "Evaluate whether the code properly implements Keplerian orbital mechanics (elliptical orbits, varying velocity based on position) or simplified circular orbits with appropriate physics. Check if planets maintain proper relative sizes, distances, and orbital periods. Score 0 if planets don't move at all, 5 if motion exists but is physically inaccurate, and 10 if the simulation closely approximates real celestial mechanics.", "maxScore": 10}, {"id": 1, "title": "Does the simulation include a comprehensive solar system representation?", "description": "Check whether the code includes at least the Sun, Earth, and Moon with distinct visual representations. Additional points for including more planets, moons, asteroid belts, or other celestial bodies. Deduct 5 points if only basic shapes are used without textures/details, 3 points if scale relationships are severely distorted. Full score requires at least 5 distinct celestial bodies with appropriate characteristics.", "maxScore": 10}, {"id": 2, "title": "Does the code implement interactive viewing controls?", "description": "Evaluate whether users can interact with the simulation through controls like zoom in/out, rotation, speed adjustment, or perspective changes. Deduct 5 points if no interaction exists, 3 points if interactions are limited to basic functions. Check if the camera transitions are smooth when changing viewpoints. The full score requires at least 3 distinct interaction methods with the simulation.", "maxScore": 10}, {"id": 3, "title": "Is there informational/educational content integrated with the simulation?", "description": "Assess whether the code includes features like planet labels, orbital paths visualization, distance indicators, or informational tooltips when hovering over planets. Deduct 5 points if no informational elements exist, 3 points if information is static and non-interactive. Full score requires both visual indicators and textual information that enhances the educational value of the simulation.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as browser resizing, different screen resolutions, varying performance capabilities, etc.) and provide graceful degradation or responsive design. Code with strong robustness should work across modern browsers and device types, giving 10 points. If the robustness is average, give 5 points, and if major issues occur in standard scenarios, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Realistic lighting effects including shadows 2. Atmospheric glow around planets 3. Integration with astronomical real-time data 4. Star backgrounds with actual constellations). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant rendering methods that could impact performance 2. Feature bloat unrelated to celestial simulation (e.g., unnecessary UI elements) 3. Excessive visual effects that detract from the core simulation. Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating physics calculation/rendering/interaction layers), code organization, and performance optimization. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if no performance considerations are implemented for animation smoothness. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color palette appropriate for space visualization (dark background with contrasting celestial bodies) 2) Proper layout spacing for controls and information panels 3) Professional typography for labels and information (legible against the background). Deduct 3 points for each visually jarring element, 5 points for poor color choices that reduce visibility, and 5 points for cluttered or disorganized UI elements. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the animation smooth and visually pleasing?", "description": "Judge whether the planetary motion animations are fluid and visually satisfying: 1) Consistent frame rate (target 60fps) 2) Smooth orbital transitions without jerky movements 3) Appropriate animation speed with options to adjust. Deduct 5 points for choppy animations, 3 points for visual artifacts during motion, and 5 points for fixed animation speeds that are either too fast or too slow to appreciate. The full score is 10 points.", "maxScore": 10}], "class": "Simulation & Modeling-Physics Simulation", "difficulty": "easy"}
{"index": 1716, "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Ensure that the code you generate is executable when possible. Help me create a webpage code that can automatically scrape the latest 50 draws of the Super Lotto lottery numbers, and based on these 50 draws, generate 10 sets of the most probable numbers for the next drawing.", "checklist": [{"id": 0, "title": "Is the web scraping functionality properly implemented?", "description": "Evaluate whether the code correctly fetches the latest 50 draws of the Super Lotto lottery numbers from an authoritative source. Check if the scraping uses proper error handling, respects robots.txt, includes request headers to avoid being blocked, and implements rate limiting. Full implementation with fallback mechanisms scores 10, basic working implementation scores 5, non-functional or missing implementation scores 0.", "maxScore": 10}, {"id": 1, "title": "Is the data parsing and extraction logic robust?", "description": "Review how the HTML/JSON data is parsed to extract lottery numbers. Check for error handling when dealing with unexpected HTML structures, content changes, or data inconsistencies. Look for validation of extracted data format (confirming the correct number of main and bonus numbers). Award 10 points for comprehensive parsing with multiple fallback strategies, 5 points for basic working parsing, 0 points if parsing functionality is inadequate or missing.", "maxScore": 10}, {"id": 2, "title": "Is the probability analysis algorithm implemented correctly?", "description": "Examine the statistical approach used to analyze the 50 draws and predict likely numbers. Check if the code implements frequency analysis, gap analysis, or other statistical methods. Verify that the algorithm accounts for both main numbers and bonus/powerball numbers separately. Award 10 points for sophisticated analysis with multiple statistical approaches, 5 points for basic frequency analysis, 0 points for random number generation without analysis.", "maxScore": 10}, {"id": 3, "title": "Does the code generate 10 sets of statistically probable numbers?", "description": "Verify that the code generates exactly 10 sets of lottery numbers based on the analysis. Check if the output respects the Super Lotto format (correct quantity of main and bonus numbers) and avoids duplicate numbers within each set. Award 10 points if the code generates properly formatted sets with clear statistical justification, 5 points if it generates valid sets but with questionable statistical basis, 0 points if generation is missing or produces invalid sets.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as network failures, API changes, missing data entries, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Visualization of frequency patterns 2. Historical trend graphs 3. Option to filter by hot/cold numbers 4. Comparison with actual winning numbers after next draw). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple scraping methods for the same data) 2. Function modules unrelated to lottery prediction (e.g., a built-in calculator) 3. Fancy effects that affect performance (e.g., unnecessary animations). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating data fetching/analysis/display layers), code reusability, and maintainability. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if there are no comments explaining the statistical methods used. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional data visualization (clear labels, appropriate chart types for frequency data). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for confusing presentation of numbers. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction smooth and responsive?", "description": "Judge whether the interface updates efficiently: 1) Loading indicators during data scraping 2) Smooth transitions when generating new number sets 3) Responsive design that works on both desktop and mobile. Deduct 5 points if scraping operations block the UI thread, 3 points for lack of visual feedback during calculations, and 5 points for non-responsive layouts. The full score is 10 points.", "maxScore": 10}], "class": "Utility Tools-Web Scraping", "difficulty": "hard"}
{"index": 910, "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure the code you generate is executable for demonstration. While ensuring all functionality, integrate and beautify all code, and provide examples of user registration and chat functionality, with example modules placed in the app for dynamic module loading.", "checklist": [{"id": 0, "title": "Is the user registration system fully implemented?", "description": "Review whether the code accurately implements user registration functionality including form validation, secure password handling (hashing/salting), and proper error handling. Check if email verification is included, and if the registration flow prevents common security issues (SQL injection, XSS). Score 0 if registration logic is missing, 5 if basic registration exists but with security flaws, and 10 if a complete secure registration system is implemented with proper validation.", "maxScore": 10}, {"id": 1, "title": "Is the chat functionality properly implemented?", "description": "Evaluate the chat system implementation, including real-time messaging capabilities, message history persistence, and user presence indicators. Check if the solution uses WebSockets or a similar real-time protocol, handles message formatting/sanitization, and includes typing indicators. Deduct 5 points if messages aren't persistent, 3 points if real-time updates are missing, and 2 points if user presence tracking is absent. The full score is 10 points.", "maxScore": 10}, {"id": 2, "title": "Is the dynamic module loading system correctly implemented?", "description": "Assess the implementation of dynamic module loading that allows components to be loaded on demand. Check if the code uses modern module loading techniques (e.g., import(), RequireJS, webpack code splitting), handles loading states properly, and includes error recovery for module loading failures. Deduct 5 points if loading states aren't handled, 5 points if error conditions aren't managed gracefully, and 3 points if module dependencies aren't correctly managed. The full score is 10 points.", "maxScore": 10}, {"id": 3, "title": "Is the code integration and beautification executed effectively?", "description": "Review how well the code is integrated across different components and beautified for readability. Evaluate consistent coding style, proper indentation, meaningful variable/function names, and appropriate comments. Check if CSS is organized (using a methodology like BEM, SMACSS, or CSS-in-JS), and if the UI components follow a consistent design language. Deduct 3 points for inconsistent styling, 3 points for poor code organization, and 4 points for inadequate documentation. The full score is 10 points.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as form validation errors, network interruption, authentication failures, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Real-time user activity indicators 2. Customizable UI themes 3. Message reactions/emojis 4. Interactive notifications). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple authentication flows coexisting) 2. Function modules unrelated to registration or chat (e.g., unnecessary analytics) 3. Fancy effects that affect performance (e.g., excessive animations). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating UI/business logic/data layers), unit test coverage, and build process automation. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the build process is not automated. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction smooth and seamless?", "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Click feedback delay ≤ 100ms 2) Transition animation duration controlled between 300-500ms 3) Clear visual focus guidance. Deduct 5 points for each operation without feedback, 3 points for visual after-images during fast interactions, and 5 points for hard-to-find key function buttons. The full score is 10 points.", "maxScore": 10}], "class": "Web Applications-Communication", "difficulty": "medium"}
{"index": 245, "question": "You are a code expert, please use your professional knowledge to generate accurate and professional responses. Try to ensure the generated code is executable. You are an experienced Chinese programming E-language (yiyu) developer. Below are the generation and destruction relationships of the Five Elements: \"Five Elements Generation: Wood generates Fire, Fire generates Earth, Earth generates Metal, Metal generates Water, Water generates Wood. Five Elements Destruction: Wood overcomes Earth, Earth overcomes Water, Water overcomes Fire, Fire overcomes Metal, Metal overcomes Wood.\" Please implement the Five Elements generation and destruction relationships in a Windows window program using E-language.", "checklist": [{"id": 0, "title": "Is the Five Elements core theory fully implemented?", "description": "Review whether the code accurately implements both the Generation and Destruction relationships of the Five Elements (Wood, Fire, Earth, Metal, Water). Each element should have proper directional relationships with others. Score 0 if the core theory is missing, 5 if only one relationship type is implemented, and 10 if both Generation and Destruction relationships are fully represented with correct directional connections.", "maxScore": 10}, {"id": 1, "title": "Is the Windows GUI implementation complete?", "description": "Check whether the E-language code properly creates a Windows window with appropriate controls (buttons, labels, graphics) to display and interact with the Five Elements system. The window should have proper title, size, position, and event handling. Deduct 3 points if the window lacks basic properties, 5 points if controls are poorly organized, and 7 points if the GUI doesn't display at all. The full score is 10 points.", "maxScore": 10}, {"id": 2, "title": "Is the Five Elements visualization properly designed?", "description": "Evaluate whether the Five Elements are visualized clearly with appropriate symbols/images and connection lines showing their relationships. The Generation and Destruction paths should be visually distinct (different colors, line styles, or arrows). Deduct 5 points if elements lack visual distinction, 3 points if relationship lines are confusing, and 5 points if the visualization is static with no interactive component. The full score is 10 points.", "maxScore": 10}, {"id": 3, "title": "Is there an interactive demonstration of the relationships?", "description": "Assess whether the program allows users to interact with the Five Elements system (e.g., clicking on elements to show their Generation and Destruction relationships, animated demonstrations, or interactive simulations). Deduct 5 points if interaction is limited to static display, 3 points if only one relationship type can be demonstrated, and 5 points if there's no visual feedback during interaction. The full score is 10 points.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as resource loading failures, unexpected user inputs, window resizing issues, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Animated transitions between elements 2. Sound effects for generation/destruction interactions 3. Traditional Chinese styling or themes). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple ways to demonstrate the same relationship) 2. Function modules unrelated to the Five Elements theory (e.g., unnecessary game features) 3. Fancy effects that affect performance (e.g., excessive animations that slow down the program). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating UI logic/Five Elements logic/event handling), code structure, and E-language best practices. Deduct 5 points if global variable pollution is found or functions are not properly organized; deduct 5 points if the code duplicates logic unnecessarily; deduct 5 points if the code lacks comments or documentation. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows consistent principles) 3) Professional font system (appropriate text size and readability). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction smooth and seamless?", "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Click feedback delay ≤ 100ms 2) Transition animation duration controlled between 300-500ms 3) Clear visual focus guidance. Deduct 5 points for each operation without feedback, 3 points for visual lag during animations, and 5 points for hard-to-find key function buttons. The full score is 10 points.", "maxScore": 10}], "class": "Other-Educational", "difficulty": "easy"}
{"index": 1447, "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Be sure to ensure that the code you generate is executable and demonstrable. Please build an IM client using Rust and Nuxt - a PC client specifically. No need to build the server side. I need to run this client on Windows.", "checklist": [{"id": 0, "title": "Is the Rust-Nuxt integration architecture properly implemented?", "description": "Evaluate whether the code establishes a robust architecture that bridges Rust backend logic with Nuxt frontend. Look for proper use of FFI (Foreign Function Interface) patterns like tauri, napi-rs, or rust-webpack. Score 0 if there's no integration between Rust and Nuxt, 5 points if basic integration exists but with architectural flaws, 10 points for a clean, maintainable architecture with proper separation of concerns.", "maxScore": 10}, {"id": 1, "title": "Is the IM core functionality implemented in Rust?", "description": "Check whether essential IM features (message handling, connection management, encryption) are implemented in Rust. The Rust code should handle networking, security protocols, and persistent storage. Deduct 5 points if network connection management is missing, 3 points if encryption is absent, and 2 points if offline message handling is not implemented. Full score is 10 points.", "maxScore": 10}, {"id": 2, "title": "Is the Nuxt UI implementation complete with necessary IM components?", "description": "Assess whether the Nuxt frontend includes all necessary IM UI components: chat list, conversation view, message composition area, contact management, and notification system. Score 0 if major components are missing, 5 points if basic functionality exists but lacks polish, 10 points for a comprehensive implementation with proper component hierarchy and state management.", "maxScore": 10}, {"id": 3, "title": "Is Windows compatibility ensured for distribution and execution?", "description": "Verify that the application can be built for and run on Windows systems. Check for proper build configuration (static linking of C/C++ dependencies), Windows-specific path handling, and system integration features like startup, notifications, and taskbar integration. Deduct 5 points if the build process isn't automated for Windows, 3 points if Windows-specific features aren't handled properly. Full score is 10 points.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common IM-specific abnormal situations (network instability, malformed messages, authentication failures) and provides friendly error prompts or recovery mechanisms. Code with strong robustness should gracefully handle connection drops, message failures, and user errors. Give 10 points for comprehensive error handling, 5 points for average robustness, and 0 points if exceptions are unhandled.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. End-to-end encryption with key verification 2. Custom message formatting with Markdown 3. Voice/video message support 4. Smart notification management based on user activity). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple ways to handle the same message type) 2. Function modules unrelated to IM functionality (e.g., built-in games not related to messaging) 3. Fancy effects that affect performance (e.g., excessive animations or effects that slow down message display). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (separating network/UI/persistence layers), test coverage (unit tests for Rust, component tests for Nuxt), and build process automation. Deduct 5 points if global state pollution is found; deduct 5 points if the code duplication rate exceeds 30%; deduct 5 points if the build process isn't properly automated with cross-platform support. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the UI follows modern messaging app design principles: 1) Consistent color scheme with clear read/unread states 2) Proper message bubble spacing and alignment 3) Professional typography hierarchy for messages vs. metadata. Deduct 3 points for cluttered conversation views, 5 points for poor information hierarchy, and 5 points for inconsistent visual language between different sections. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction smooth and seamless?", "description": "Judge whether the IM-specific interactions meet user expectations: 1) Message send/receive feedback under 100ms 2) Smooth scrolling through message history 3) Real-time typing indicators and read receipts 4) Seamless state transitions between online/offline modes. Deduct 5 points for laggy message rendering, 3 points for jerky scrolling, and 5 points for unclear connection status indicators. The full score is 10 points.", "maxScore": 10}], "class": "Web Applications-Communication", "difficulty": "hard"}
{"index": 815, "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure the generated code is executable whenever possible. Implement a system that, after receiving all system functional requirements submitted by users, automatically calls AI to generate code, module by module, and then compiles them into a complete, runnable system code package. Keep it simple and easy to implement. I'm providing you with a simplified approach: first, implement only the ability to generate a simple management system, then use templates to standardize user input, simplifying the understanding of the input.", "checklist": [{"id": 0, "title": "Is the requirements parsing mechanism fully implemented?", "description": "Evaluate whether the system effectively parses user-submitted requirements. Check for structured input validation, natural language processing capabilities, and domain-specific terminology recognition. Score 0 if there's no parsing mechanism, 5 if basic template-based requirement parsing exists, and 10 if advanced NLP techniques with error correction are implemented.", "maxScore": 10}, {"id": 1, "title": "Is the code generation system properly integrated with AI models?", "description": "Verify the integration with AI code generation services (like OpenAI API, Anthropic API, etc.). Check for proper API authentication, error handling for failed calls, rate limiting mechanisms, and response validation. Deduct 5 points if only a single AI provider is supported with no fallback, and 3 points if the system doesn't handle context limitations effectively. The full score is 10 points.", "maxScore": 10}, {"id": 2, "title": "Is the module-by-module generation approach implemented properly?", "description": "Assess the system's ability to break down requirements into logical modules, generate code for each module independently, and maintain consistency across generated components. Check for dependency management between modules. Deduct 5 points if module interfaces are poorly defined, and 3 points if there's no mechanism to ensure consistency across modules. The full score is 10 points.", "maxScore": 10}, {"id": 3, "title": "Is the code compilation and packaging mechanism functional?", "description": "Evaluate whether the system can effectively compile and package the generated code into a runnable system. Check for appropriate build tools integration, dependency management, and output validation. Deduct 5 points if the system can't handle compilation errors, and 3 points if it lacks appropriate packaging for different environments (development/production). The full score is 10 points.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as malformed requirements, AI service outages, compilation failures, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Interactive requirement refinement 2. Visual preview of generated system components 3. Automatic code quality assessment). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple requirement parsing engines) 2. Function modules unrelated to code generation (e.g., built-in entertainment features) 3. Overly complex features that don't improve the core functionality. Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating requirement processing/code generation/compilation layers), unit test coverage, and build process automation. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the build process is not automated. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction smooth and seamless?", "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Click feedback delay ≤ 100ms 2) Transition animation duration controlled between 300-500ms 3) Clear visual feedback during long-running operations like code generation. Deduct 5 points for each operation without feedback, 3 points for unclear progress indicators during generation, and 5 points for hard-to-find key function buttons. The full score is 10 points.", "maxScore": 10}], "class": "Utility Tools-Automation", "difficulty": "hard"}
{"index": 1415, "question": "You are a code expert. Please use your professional knowledge to generate accurate, professional responses. Make sure the generated code is executable whenever possible. Based on the following content, please help me design a diagram.\n\nDevelop a digital twin system for controlling deviations in long boom assembly processes based on the Browser-Server (BS) architecture model, as shown in the figure. Adopt a front-end and back-end separation development model to improve system maintainability and development efficiency. The back-end algorithm model is developed using Python language, while the front-end builds an interactive user interface through the modern JavaScript framework React. The system uses MySQL database to process and store large amounts of data and interacts with the back-end through APIs. The Fetch API, an HTTP client library, is used to implement communication between the front-end and back-end.", "checklist": [{"id": 0, "title": "Is the digital twin system architecture properly designed?", "description": "Evaluate whether the code implements a complete BS architecture with clear front-end/back-end separation. Check if React is properly integrated on the front-end and Python on the back-end, with appropriate API interfaces between them. The architecture should include data flow diagrams showing how information moves between components.0 points if basic architecture is missing, 5 points if only basic separation exists, 10 points if complete architecture with clear component responsibilities and data flows is implemented.", "maxScore": 10}, {"id": 1, "title": "Is the long boom assembly process modeling accurate?", "description": "Review whether the code includes accurate physical models representing the long boom assembly, incorporating key parameters like dimensions, articulation points, and deviation measurements. The model should handle various assembly states and predict potential deviations.0 points if boom assembly modeling is absent, 5 points if basic modeling exists without deviation handling, 10 points if comprehensive modeling with accurate physical properties and deviation prediction is implemented.", "maxScore": 10}, {"id": 2, "title": "Is the deviation control algorithm implemented effectively?", "description": "Examine the Python backend code for algorithms that detect, analyze, and correct deviations in the assembly process. Check for mathematical models, statistical analysis, and correction recommendations.0 points if no deviation control algorithm exists, 5 points if basic detection without correction recommendations is implemented, 10 points if comprehensive algorithms with predictive capabilities and correction strategies are present.", "maxScore": 10}, {"id": 3, "title": "Is the front-end and back-end communication properly implemented?", "description": "Check if the Fetch API implementation includes proper error handling, request/response formatting, authentication, and real-time data exchange capabilities. Verify that API endpoints are RESTful or follow consistent patterns.0 points if communication is broken, 5 points if basic communication works but lacks error handling or security, 10 points if robust communication with authentication, error handling, and optimized data transfer is implemented.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as sensor data corruption, network interruption, user operation errors, etc.) and provide friendly error prompts or recovery mechanisms.0 points if no exception handling exists, 5 points if basic error handling is present, 10 points if comprehensive exception handling with recovery mechanisms is implemented.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Real-time 3D visualization of deviations 2. Predictive maintenance alerts 3. AR overlay for assembly guidance).Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple visualization methods) 2. Function modules unrelated to digital twin objectives 3. Fancy effects that affect performance (e.g., unnecessary animations).Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating data processing/visualization/control logic layers), unit test coverage, and build process automation. Check database design for normalization and indexing.Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the build process is not automated. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the dashboard design follows industrial visualization standards: 1) Clear information hierarchy 2) Appropriate use of color for status indication 3) Balanced data density without overwhelming users 4) Responsive design for different screen sizes.Deduct 3 points for each crowded visual element, 5 points for ineffective use of color in status indication, and 5 points for non-responsive layouts. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction smooth and seamless?", "description": "Judge whether the digital twin visualization updates smoothly: 1) Real-time data updates without visible lag 2) Smooth transitions between different views/states 3) Intuitive interaction for adjustment and control 4) Clear visual feedback for user actions.Deduct 5 points for lagging visualizations, 3 points for abrupt transitions between states, and 5 points for unintuitive interaction patterns. The full score is 10 points.", "maxScore": 10}], "class": "Mermaid Flowcharts-Logic Flowcharts", "difficulty": "medium"}
{"index": 21, "question": "You are a code expert, please use your professional knowledge to generate accurate and professional responses. Make sure the code you generate is executable whenever possible. \n\nPlease help me implement the following requirements using code, which should be created using SVG code. The requirement is to create a diagram of a computer system with several different types of information.", "checklist": [{"id": 0, "title": "Is the basic SVG structure properly implemented?", "description": "Check if the SVG document has proper DOCTYPE, namespace declarations, viewBox attributes, and responsive design considerations. Verify the SVG has appropriate dimensions and preserveAspectRatio settings. The base SVG should be properly structured with organized groups (<g>) for different components. Score 0 if SVG basics are missing, 5 if basic structure exists but with issues, and 10 for complete and proper implementation.", "maxScore": 10}, {"id": 1, "title": "Does the computer system diagram include all essential components?", "description": "Evaluate whether the diagram includes core computer system components: CPU, memory (RAM), storage devices, motherboard, input/output devices, and their interconnections. Each component should be clearly visualized with appropriate shapes and proportions. Deduct 2 points for each missing major component. Score 10 if the diagram comprehensively represents a computer system architecture.", "maxScore": 10}, {"id": 2, "title": "Is the information hierarchy visually represented?", "description": "Check if the diagram effectively communicates different layers of information through visual hierarchy (size, position, color, grouping). Components should be organized logically with clear relationships and data flows. Examine if subsystems are properly nested and connections between components are meaningful. Score 0 if hierarchy is absent, 5 if basic hierarchy exists but is confusing, and 10 for clear, intuitive information architecture.", "maxScore": 10}, {"id": 3, "title": "Are interactive or dynamic elements incorporated?", "description": "Assess whether the SVG includes interactive features (hover effects, click actions, animations) to enhance understanding of the computer system. Check for JavaScript event handlers, CSS transitions/animations, or SMIL animations. Award 3 points for basic interactivity, 7 points for moderate interactivity with purpose, and 10 points for comprehensive, educational interactive elements that explain system functions.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the SVG code handles potential issues like browser compatibility, scaling on different screen sizes, and fallback mechanisms. The code should use best practices like avoiding inline styles when appropriate, using semantic IDs and classes, and implementing proper error handling if JavaScript is used. Score 0 if major compatibility issues exist, 5 if generally compatible but with minor issues, and 10 for robust, cross-browser compatible code.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the SVG includes surprise features that enhance the experience (e.g., 1. Animated data flows between components 2. Interactive tooltips with detailed specifications 3. Visual state changes representing system operations). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant graphical elements that convey the same information 2. Excessive decorative elements that don't contribute to understanding the computer system 3. Overly complex animations or effects that distract from the content. Deduct 3 points for each redundancy found, and directly deduct 10 points if the core diagram clarity is compromised by redundant elements.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review the SVG code organization (such as appropriate grouping of elements), reuse of common elements through symbols or patterns, and optimization for file size and rendering performance. Deduct 5 points if element IDs/classes are inconsistent or poorly named; deduct 5 points if the code is unnecessarily verbose with duplicated definitions; deduct 5 points if no performance optimizations are implemented (like reducing path points or proper use of primitives). The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors with appropriate contrasts for readability) 2) Proper layout spacing and alignment of components 3) Professional typography (readable font family, appropriate size hierarchy). Deduct 3 points for each awkward visual element, 5 points for poor color choices that hinder understanding, and 5 points for inconsistent visual language. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction smooth and seamless?", "description": "Judge whether any dynamic effects conform to human perception characteristics: 1) Responsive feedback for interactive elements ≤ 100ms 2) Transition animation duration controlled between 300-500ms 3) Clear visual focus on important components. If animations exist, they should enhance understanding rather than distract. Deduct 5 points for jarring transitions, 3 points for excessive or too fast animations, and 5 points for confusing interaction patterns. The full score is 10 points.", "maxScore": 10}], "class": "SVG Generation-SVG Images", "difficulty": "hard"}
{"index": 1328, "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Be sure that any code you generate is executable and demonstrable. Could you write a small software for me that filters quality products at affordable prices on large e-commerce platforms?", "checklist": [{"id": 0, "title": "Is the core product filtering logic correctly implemented?", "description": "Review whether the code implements robust filtering algorithms that can effectively identify quality-price ratio products. Check if it uses parameters like price ranges, ratings, review counts, and price history. Score 0 if there's no filtering logic, 5 if only basic filters exist, and 10 if advanced algorithms with multiple quality indicators are implemented.", "maxScore": 10}, {"id": 1, "title": "Does the software connect to e-commerce platforms properly?", "description": "Evaluate if the code properly implements API connections to major e-commerce platforms (Amazon, eBay, etc.) or uses proper web scraping techniques with respect to robots.txt. Check for error handling during connection failures, rate limiting management, and session persistence. Deduct 5 points if only one platform is supported, 3 points if there's no proper error handling. Full score is 10 points.", "maxScore": 10}, {"id": 2, "title": "Is there a proper data aggregation and normalization system?", "description": "Check if the code normalizes data from different sources into a unified format, handles currency conversions correctly, and standardizes product attributes. The system should be able to compare similar products across platforms. Deduct 5 points if normalization is missing, 3 points if comparison across platforms is not possible. Full score is 10 points.", "maxScore": 10}, {"id": 3, "title": "Does the software include price tracking and alerting functionality?", "description": "Verify if the code implements historical price tracking, price drop alerts, and deal notifications. Check if users can set thresholds for alerts and receive notifications through multiple channels (email, push notifications). Deduct 5 points if historical tracking is absent, 3 points if notification options are limited. Full score is 10 points.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as API failures, malformed product data, network interruptions, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. AI-powered deal recommendations 2. Price prediction algorithms 3. Social sharing of deals with friends). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar filters 2. Function modules unrelated to e-commerce filtering (e.g., a built-in weather app) 3. Fancy effects that affect performance (e.g., excessive animations on product cards). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating data fetching/processing/presentation layers), unit test coverage, and build process automation. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the build process is not automated. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction smooth and seamless?", "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Search results appear within 500ms 2) Transition animations controlled between 300-500ms 3) Clear visual feedback for filter applications. Deduct 5 points for each operation without feedback, 3 points for sluggish performance during filtering, and 5 points for hard-to-find key function buttons. The full score is 10 points.", "maxScore": 10}], "class": "Utility Tools-Web Scraping", "difficulty": "medium"}
{"index": 1139, "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure the generated code is executable for demonstration. Provide the following functionalities:\n\nEnergy statistics for total water consumption with corresponding total amount display\nEnergy statistics for total electricity consumption with corresponding total amount display\nTotal coal consumption functionality with corresponding total amount display\nEnergy statistics for monthly water consumption by park with corresponding total amount display\nEnergy statistics for monthly electricity consumption by park with corresponding total amount display\nEnergy statistics for monthly coal consumption by park with corresponding total amount display\nEnergy statistics water consumption monitoring and warning functionality\nEnergy statistics electricity consumption monitoring and warning functionality\nEnergy statistics coal consumption monitoring and warning functionality\nWater monitoring warning list functionality, including affiliation, warning time, location points, and warning content", "checklist": [{"id": 0, "title": "Is the total energy consumption statistics system fully implemented?", "description": "Review whether the code accurately implements the total water, electricity, and coal consumption statistics with proper visualization and numerical displays. Check for integration of consumption data sources, calculation logic, and data refresh mechanisms. Score 0 if none implemented, 5 if partial implementation (missing one type), and 10 if all three energy types are fully implemented with accurate totals.", "maxScore": 10}, {"id": 1, "title": "Is the monthly park-level energy consumption breakdown functionality complete?", "description": "Evaluate if the code includes monthly breakdowns of water, electricity, and coal consumption by park. Check for filtering capabilities, time range selection, and proper aggregation logic. Score 0 if the breakdown is missing, 5 if only some energy types are broken down by park, and 10 if all energy types have complete monthly park-level statistics with proper data visualization.", "maxScore": 10}, {"id": 2, "title": "Are the energy consumption monitoring and warning systems implemented?", "description": "Check if the code implements threshold-based monitoring and warning systems for all three energy types. Review if configurable thresholds are available, if real-time/near-real-time monitoring is supported, and if warning triggers function properly. Score 0 if monitoring systems are absent, 5 if basic monitoring exists without proper warning mechanisms, and 10 if comprehensive monitoring with configurable thresholds and proper warning systems are implemented for all energy types.", "maxScore": 10}, {"id": 3, "title": "Is the water monitoring warning list functionality properly implemented?", "description": "Review if the warning list for water consumption includes all required fields (affiliation, warning time, location points, warning content), supports sorting/filtering, and integrates with the monitoring system. Check if warning details can be viewed and if the system allows for acknowledgment/resolution of warnings. Score 0 if the list is missing, 5 if a basic list exists but lacks required fields or functionality, and 10 if the complete warning list with all functionality is implemented.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as data loading failures, invalid data formats, user input errors, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Predictive consumption analytics 2. Interactive comparison tools between parks 3. Automated efficiency recommendations based on consumption patterns). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar statistics functions (e.g., multiple calculation methods for the same metric) 2. Function modules unrelated to energy statistics (e.g., unnecessary system settings) 3. Fancy effects that affect performance (e.g., complex animations in data visualization). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating data processing/visualization/alert logic layers), unit test coverage, and build process automation. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the build process is not automated. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (using appropriate colors for energy types - blue for water, yellow for electricity, black for coal) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction smooth and seamless?", "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Click feedback delay ≤ 100ms 2) Transition animation duration controlled between 300-500ms for chart updates 3) Clear visual focus guidance when switching between energy types or time periods. Deduct 5 points for each operation without feedback, 3 points for visual after-images during fast data refreshing, and 5 points for hard-to-find key function buttons. The full score is 10 points.", "maxScore": 10}], "class": "Management Systems-Frontend/Backend Platforms", "difficulty": "medium"}
{"index": 974, "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Ensure that the code you provide is executable. Prioritize using Meitu's pre-signed URL solution, and only switch to third-party storage if stability issues arise.\n\nI would like to implement something similar. Please provide detailed code for a program that opens with an interface containing adjustable beauty parameters. After setting the parameters and clicking \"Start Retouching,\" the software will monitor a specified folder, automatically process any incoming images using the preset retouching parameters, and then export them to a designated output folder.", "checklist": [{"id": 0, "title": "Is the user interface for beauty parameter adjustment fully implemented?", "description": "Review whether the code implements an intuitive UI with clearly labeled sliders/controls for beauty parameters (like smoothing, whitening, slimming, eye enlargement, etc.). Check if parameter ranges are appropriate with reasonable defaults. Score 0 if there's no UI implementation, 5 if only basic controls exist without proper organization, and 10 if a comprehensive, well-designed parameter adjustment panel is provided with visual previews of effects.", "maxScore": 10}, {"id": 1, "title": "Is the folder monitoring system properly implemented?", "description": "Evaluate the implementation of the directory watcher that detects new image files. Check if it uses proper file system events (rather than polling), handles various edge cases (partially written files, temporary files, non-image files), and manages system resources efficiently. Deduct 5 points if monitoring is unstable or uses excessive polling, and 3 points if it doesn't handle edge cases properly. The full score is 10 points.", "maxScore": 10}, {"id": 2, "title": "Is the image processing pipeline correctly implemented with Meitu's pre-signed URL solution?", "description": "Check whether the code properly integrates with Meitu's pre-signed URL API for image processing, including authentication, parameter formatting, and error handling. Verify that the solution correctly constructs API requests with beauty parameters and processes responses. Deduct 5 points if the implementation doesn't use Meitu's solution as primary, and 10 points if there's no proper error handling or fallback mechanism. Full score of 10 points requires complete implementation with proper documentation.", "maxScore": 10}, {"id": 3, "title": "Is the automatic batch processing workflow complete?", "description": "Evaluate if the code includes a complete workflow from detecting new images to processing and saving them in the output folder. Check for proper threading/async processing to prevent UI freezing, progress indicators, and logging of successes/failures. Score 10 if the system handles batches efficiently with proper concurrency controls, 5 if basic functionality exists but with synchronous blocking operations, and 0 if the workflow is incomplete.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as network failures, invalid images, disk full errors, permission issues, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Real-time preview of effects 2. Preset templates for different scenarios 3. Batch processing statistics and reports). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple image loading paths) 2. Function modules unrelated to the core requirements (e.g., built-in social media sharing) 3. Fancy effects that affect performance (e.g., unnecessary animations). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating UI/image processing/file system modules), error handling, logging, and configuration management. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if configuration is hardcoded. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction smooth and seamless?", "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Parameter adjustment reflects changes instantly or with appropriate visual feedback 2) Processing status clearly visible with progress indicators 3) Clear visual distinction between processed and unprocessed images. Deduct 5 points for each operation without feedback, 3 points for laggy parameter adjustments, and 5 points for unclear processing status. The full score is 10 points.", "maxScore": 10}], "class": "Utility Tools-Batch Processing", "difficulty": "medium"}
{"index": 1767, "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Be sure to ensure the generated code is executable for demonstration. You are a data analysis expert, please help create a rose chart for China's 100-city real estate prices in HTML format.", "checklist": [{"id": 0, "title": "Is the rose chart data structure and rendering correctly implemented?", "description": "Review whether the code accurately implements rose chart (polar area chart) using HTML/JavaScript/SVG, including proper polar coordinate system transformation, data binding, and sector area calculations proportional to real estate price values. Score 0 if basic chart structure is missing, 5 if only simple polar rendering is implemented, and 10 if complete rose chart with accurate data mapping and sector proportions is fully implemented.", "maxScore": 10}, {"id": 1, "title": "Is the 100-city real estate data properly structured and processed?", "description": "Check whether the implementation includes realistic Chinese city real estate price data (at least 50+ cities), proper data validation, normalization algorithms, and handling of missing/invalid data points. Evaluate data source credibility and whether price ranges reflect realistic market conditions. Deduct 5 points if data is clearly fabricated or unrealistic, 3 points if data structure lacks proper validation. Full score is 10 points.", "maxScore": 10}, {"id": 2, "title": "Are interactive features and data exploration capabilities implemented?", "description": "Evaluate whether the rose chart includes essential interactive features such as hover tooltips showing city names and exact prices, click-to-highlight functionality, zoom/pan capabilities, and filtering options (by region, price range, or city tier). Deduct 5 points if no hover interactions exist, 3 points if tooltip information is incomplete. Full score requires smooth interactive experience with comprehensive data exploration tools.", "maxScore": 10}, {"id": 3, "title": "Is the chart legend, labeling, and data annotation system complete?", "description": "Check whether the implementation includes proper legend system, city name labels (readable without overlap), price scale indicators, color coding explanation, and data source attribution. Evaluate label positioning algorithms to avoid overlap and ensure readability. Deduct 5 points if legend is missing, 3 points if labels are overlapping or unreadable, 2 points if no data source is mentioned. Full score is 10 points.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as malformed data, browser compatibility issues, rendering errors, division by zero in calculations, etc.) and provide friendly error prompts or fallback mechanisms. Code with strong robustness should gracefully handle edge cases like empty datasets or extreme price values, giving 10 points. If robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the analysis experience (e.g., 1. Real-time price trend indicators 2. Comparative analysis with historical data 3. Geographic clustering visualization 4. Export functionality for charts 5. Responsive design adaptation). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar chart types (e.g., multiple visualization libraries coexisting) 2. Function modules unrelated to real estate data visualization (e.g., built-in games) 3. Excessive animations that affect performance (e.g., continuous particle effects). Deduct 3 points for each redundancy found, and directly deduct 10 points if core visualization functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating data processing/visualization/interaction layers), code organization, reusability, and maintainability. Deduct 5 points if global state pollution is found or proper separation of concerns is missing; deduct 5 points if the code duplication rate is too high (over 30%); deduct 3 points if no error handling or data validation is implemented. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the overall design follows modern data visualization principles: 1) Harmonious color palette suitable for data representation (no more than 5 primary colors) 2) Proper spacing and layout (adequate margins, non-overlapping elements) 3) Professional typography (readable font sizes ≥ 12px, appropriate contrast ratios) 4) Consistent visual hierarchy. Deduct 3 points for each crowded visual element, 5 points for poor color choices that hinder data reading, and 5 points for chaotic layout. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction smooth and seamless?", "description": "Judge whether the interactive effects conform to user experience standards: 1) Hover feedback delay ≤ 100ms 2) Smooth transitions when filtering or updating data (300-500ms duration) 3) Clear visual feedback for all interactive elements 4) Responsive performance with large datasets. Deduct 5 points for each interaction without proper feedback, 3 points for laggy animations or slow rendering, and 5 points for unclear interaction affordances. The full score is 10 points.", "maxScore": 10}], "class": "Data Science-Data Visualization Dashboards", "difficulty": "easy"}
{"index": 780, "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Be sure to make any code you provide executable and ready to run. Please help me design a working Tetris mini-program.", "checklist": [{"id": 0, "title": "Is the core Tetris game mechanics fully implemented?", "description": "Review whether the code accurately implements tetromino movement (left/right/down), rotation, collision detection, and line clearing. Check if the game handles piece spawning, gravity, and increasing difficulty. Score 0 if core mechanics are missing, 5 if basic movement works but with issues, and 10 if all standard Tetris mechanics are properly implemented.", "maxScore": 10}, {"id": 1, "title": "Is the game board system properly designed?", "description": "Evaluate the game board implementation, including grid system, block rendering, boundary checking, and state management. The board should handle piece locking, line clearing animations, and game over detection. Deduct 5 points if the grid system is inconsistent, 3 points if boundary checks are incomplete, and 5 points if game over detection is missing. The full score is 10 points.", "maxScore": 10}, {"id": 2, "title": "Are the Tetris gameplay features complete?", "description": "Check if the code includes standard Tetris features like piece preview, piece holding, score system, level progression, and increasing speed. Deduct 3 points for each missing feature. The game should follow standard Tetris guidelines for scoring and difficulty progression. The full score is 10 points.", "maxScore": 10}, {"id": 3, "title": "Is the control system responsive and intuitive?", "description": "Assess the implementation of keyboard/touch controls, including hard drop, soft drop, and wall kicks. Check whether the game supports both keyboard and touch controls with appropriate response times. Deduct 5 points if key controls are missing, 3 points if controls have noticeable input lag, and 3 points if proper control customization is absent. The full score is 10 points.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as rapid input sequences, browser resizing, game pausing/resuming, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Ghost piece showing where the tetromino will land 2. Multiple game modes like marathon/sprint/ultra 3. Combo system with visual feedback). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple collision detection algorithms) 2. Function modules unrelated to Tetris (e.g., unnecessary animations that don't enhance gameplay) 3. Fancy effects that affect performance (e.g., excessive particle effects during line clears). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating game logic/view/input handling layers), maintainability, and performance optimization. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the game loop implementation causes performance issues. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (clear contrast between tetrominos and background) 2) Proper layout spacing (game board, next piece preview, score display properly arranged) 3) Professional font system (readable score and level indicators). Deduct 3 points for each visual element that causes confusion, 5 points for poor color choices that make pieces difficult to distinguish, and 5 points for cluttered UI that obscures gameplay. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction smooth and seamless?", "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Piece movement responds within 100ms 2) Line clear animations complete within 300-500ms 3) Game over sequence provides clear feedback. Deduct 5 points for laggy piece movement, 3 points for jerky animations, and 5 points for confusing or missing visual feedback during critical game events like level ups or game over. The full score is 10 points.", "maxScore": 10}], "class": "Game Development-Puzzle", "difficulty": "medium"}
{"index": 723, "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure that the code you generate is executable for demonstration. Based on my design content, help me write a simple narrative game framework with a simple story. Since it will be presented through 3D web interaction, the game's interactive content includes the \"Four Elegances of the Song Dynasty\" (tea preparation, incense burning, flower arranging, and hanging paintings). These involve simple interactions. Please help me think about how to incorporate \"time travel\" into the painting. I've also designed an NPC cat.", "checklist": [{"id": 0, "title": "Is the narrative game framework properly structured?", "description": "Review whether the code establishes a complete narrative game framework with clear separation of story content, game state management, and player interaction handling. Check if the framework includes scene transitions, dialogue systems, and save/load functionality. Score 0 if the framework is missing, 5 if it's basic but functional, and 10 if it's comprehensive with proper encapsulation and extensibility.", "maxScore": 10}, {"id": 1, "title": "Are the 'Four Elegances of the Song Dynasty' interactions fully implemented?", "description": "Evaluate the implementation of all four activities (tea preparation, incense burning, flower arranging, and hanging paintings). Each activity should have unique interaction mechanics, clear success/failure states, and visual feedback. Deduct 2.5 points for each elegance that's missing or poorly implemented. The full score is 10 points.", "maxScore": 10}, {"id": 2, "title": "Is the 'time travel' mechanic effectively integrated with the painting interaction?", "description": "Assess whether the code implements a creative and functional time travel mechanic connected to the painting element. Check if it includes proper state management for different time periods, visual transitions between eras, and maintains narrative consistency. Score 0 if time travel is absent, 5 if it's basic, and 10 if it's well-integrated with both gameplay and storytelling.", "maxScore": 10}, {"id": 3, "title": "Is the NPC cat properly implemented with meaningful interaction?", "description": "Review the implementation of the NPC cat character. The cat should have a defined personality, dialogue system, animation states, and meaningful interactions with the player (e.g., providing hints, advancing the story). Deduct 5 points if the cat is static with minimal interaction, and 3 points if the cat lacks connection to the main narrative. The full score is 10 points.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as incorrect user inputs, resource loading failures, state inconsistencies) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Dynamic environmental responses to player actions 2. Procedurally generated story variations 3. Accessibility options for different player needs). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple dialogue systems coexisting) 2. Function modules unrelated to the core narrative experience (e.g., an unnecessary mini-game) 3. Fancy effects that affect performance (e.g., excessive particle systems). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating story logic/view/interaction layers), component reusability, and code organization. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if there's no clear architecture for extending the game. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching that evokes Song Dynasty aesthetics 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system appropriate for a narrative game (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for anachronistic visual styling, and 5 points for chaotic text-image layout. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction smooth and seamless?", "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Elegance interactions feel natural and responsive (≤ 100ms) 2) Transition animations between scenes/time periods controlled between 300-500ms 3) Clear visual guidance for interactive elements. Deduct 5 points for each interactive element without feedback, 3 points for jarring transitions between story segments, and 5 points for confusing navigation in the 3D environment. The full score is 10 points.", "maxScore": 10}], "class": "Game Development-Adventure", "difficulty": "hard"}
{"index": 726, "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure the code you provide is executable and can be demonstrated. I am a photography practical training instructor, and when conducting portrait photography sessions in a studio, lighting setup is a challenging aspect. I would like to design a virtual photography studio lighting scenario. Please help me design the code for this.", "checklist": [{"id": 0, "title": "Is the virtual photography studio environment fully implemented?", "description": "Review whether the code accurately creates a 3D/2D virtual studio environment with proper spatial dimensions, camera positioning, and subject placement. Check if the studio can be viewed from multiple angles. Score 0 if no proper environment is created, 5 if a basic environment exists but lacks detail, and 10 if the studio environment is complete with proper scale and perspectives.", "maxScore": 10}, {"id": 1, "title": "Is the lighting system comprehensive and realistic?", "description": "Evaluate whether the code implements various lighting types (key light, fill light, rim light, background light, etc.) with adjustable parameters (intensity, color temperature, softness, angle). Check if light modifiers (softboxes, umbrellas, reflectors, snoots) are implemented. Deduct 5 points if only basic lighting is available, 3 points if light modifiers are missing. The full score is 10 points.", "maxScore": 10}, {"id": 2, "title": "Is the lighting effect rendering accurate and physically based?", "description": "Check whether the lighting effects follow physical principles, including proper shadow casting, light falloff with distance, color blending, and reflections. Verify if the code simulates the inverse-square law for light intensity. Deduct 5 points if shadows are unrealistic, 3 points if light falloff is incorrect. The full score is 10 points.", "maxScore": 10}, {"id": 3, "title": "Is the user interface for lighting manipulation intuitive and comprehensive?", "description": "Assess whether the interface allows users to easily add, remove, position, and adjust lighting equipment with visual feedback. Check if it includes drag-and-drop functionality, sliders for intensity/temperature controls, and visual indicators of light direction. Deduct 3 points for each essential control missing, and 5 points if the interface is confusing or unintuitive. The full score is 10 points.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as extreme lighting values, browser resizing, incompatible devices, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Real-time histogram display 2. Lighting setup templates/presets 3. Before/after comparison views 4. Simulated portrait with different skin tones). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar lighting controls 2. Function modules unrelated to photography lighting 3. Fancy effects that affect performance and distract from the educational purpose. Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating lighting logic/view/rendering layers), code organization, and performance optimization. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the rendering performance is poor on standard hardware. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching suitable for a photography application (neutral, non-distracting colors) 2) Proper layout spacing for lighting controls 3) Professional font system with clear labeling of lighting equipment. Deduct 3 points for each crowded visual element, 5 points for a distracting color scheme that makes light evaluation difficult, and 5 points for chaotic text-image layout. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction smooth and educational?", "description": "Judge whether the lighting adjustments provide immediate visual feedback and educational value: 1) Light adjustment feedback delay ≤ 100ms 2) Visual representation of how changing parameters affects the image 3) Clear indication of lighting principles in action. Deduct 5 points for each lighting adjustment without visible feedback, 3 points for laggy rendering during adjustments, and 5 points for lack of educational context in the simulation. The full score is 10 points.", "maxScore": 10}], "class": "Simulation & Modeling-3D Simulation", "difficulty": "hard"}
{"index": 408, "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Be sure to ensure that the code you generate is executable for demonstration. Implement large file slice upload and breakpoint continuation in Vue 3.", "checklist": [{"id": 0, "title": "Is the file slicing mechanism properly implemented?", "description": "Verify if the code correctly implements file slicing using the Blob API, with appropriate chunk size determination (ideally configurable, typically 2-5MB per chunk). Check for proper handling of file metadata (MIME type, original filename, total size) and generation of a unique file identifier for tracking upload progress. Score 0 if slicing is not implemented, 5 if basic slicing exists but with fixed chunk size, 10 if it has adaptive/configurable chunk sizing with proper metadata handling.", "maxScore": 10}, {"id": 1, "title": "Is the breakpoint continuation logic correctly implemented?", "description": "Evaluate the implementation of breakpoint resumption, including persistent storage of upload state (using IndexedDB, localStorage, or server-side tracking), chunk verification mechanisms (MD5/SHA hash for each chunk), and proper handling of previously uploaded chunks. Deduct 5 points if uploaded chunks can't be verified after page reload, 3 points if the resumption mechanism relies solely on server-side state. Full score requires both client and server-side state tracking.", "maxScore": 10}, {"id": 2, "title": "Is the upload progress tracking and visualization implemented effectively?", "description": "Check if the code implements accurate progress tracking for both individual chunks and overall file upload. Progress visualization should include percentage completion, upload speed, estimated time remaining, and visual feedback for each chunk status (pending, uploading, completed, failed). Deduct 3 points for missing speed calculation, 2 points for no time estimation, and 5 points for lack of per-chunk status visualization.", "maxScore": 10}, {"id": 3, "title": "Does the implementation include proper error handling and retry mechanisms?", "description": "Assess error handling for network issues, server errors, and file access problems. Look for automatic retry logic with exponential backoff, configurable retry limits, and proper user feedback during failures. Check for graceful degradation when features aren't supported. Deduct 5 points for missing retry logic, 3 points for constant retry intervals, and 2 points for inadequate error messages to users.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as browser tab closure during upload, network fluctuations, file type restrictions, size limits, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Drag-and-drop upload support 2. Image/video previews during upload 3. Background uploading with service workers 4. Parallel uploading with configurable concurrency). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple file reading methods coexisting) 2. Function modules unrelated to file uploads (e.g., unnecessary data processing) 3. Fancy effects that affect performance (e.g., excessive animations during upload). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating upload logic/UI components/API services), use of Vue 3's Composition API, proper TypeScript typing, and unit test coverage. Deduct 5 points if global state is overused when Composables would be more appropriate; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if there are no meaningful comments or documentation. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction smooth and seamless?", "description": "Judge whether the upload interface provides clear visual feedback: 1) Upload button state changes ≤ 100ms after selection 2) Progress updates at least every 500ms 3) Clear visual distinction between upload states (queued, uploading, paused, completed, failed). Deduct 5 points for laggy UI updates during large file uploads, 3 points for confusing state transitions, and 5 points for missing abort/pause/resume controls. The full score is 10 points.", "maxScore": 10}], "class": "Management Systems-File Management", "difficulty": "hard"}
{"index": 186, "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Be sure to provide executable code whenever possible.\n\nPlease help me implement this SVG image using code. A black and white illustration of an angry bulldog's face, showcasing distinct facial features and expressions.", "checklist": [{"id": 0, "title": "Is the bulldog's face structure accurately depicted in SVG?", "description": "Evaluate whether the SVG path elements properly construct the distinct anatomy of a bulldog's face, including the wide jaw, wrinkled forehead, and flat nose. Check if the proportions are accurate (jaw width should be approximately 1.5x the width of the forehead). Score 0 if the basic structure is unrecognizable as a bulldog, 5 if the structure is recognizable but with anatomical inaccuracies, and 10 for anatomically correct representation.", "maxScore": 10}, {"id": 1, "title": "Is the angry expression effectively conveyed?", "description": "Assess whether the SVG code successfully creates visual elements that convey anger, such as furrowed brows, bared teeth, flared nostrils, or intense eyes. Score based on the emotional impact: 0 points if the expression is neutral or unclear, 5 points if only basic anger cues are present, and 10 points if the expression unmistakably communicates aggression and intensity.", "maxScore": 10}, {"id": 2, "title": "Is the black and white illustration properly implemented?", "description": "Review the color implementation in the SVG code. Check if the illustration effectively uses only black, white, and potentially grayscale values (no RGB colors outside grayscale). Assess contrast and balance in the monochrome design. Deduct 5 points if colors other than black/white/gray are used, and 3 points if the contrast is too low to clearly distinguish features. Full 10 points for masterful use of monochrome with proper shading techniques.", "maxScore": 10}, {"id": 3, "title": "Are the facial details implemented with appropriate SVG techniques?", "description": "Evaluate whether the code uses appropriate SVG elements and techniques for rendering detailed facial features (wrinkles, teeth, eyes, etc.). Check for proper use of <path>, <circle>, <rect>, and other SVG elements. Deduct 5 points if inappropriate elements are used for specific features, and 3 points if features lack detail. Give 10 points if complex details are implemented efficiently with appropriate SVG techniques.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the SVG code is well-structured, uses viewBox appropriately, and handles potential rendering issues across browsers. Check if the SVG includes proper structuring with groups (<g>) for logical organization of elements. Deduct 5 points if missing viewport/viewBox definitions, 3 points if lacking proper element grouping, and 2 points if browser compatibility issues exist. Give 10 points for robust, standards-compliant implementation.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the SVG includes surprise features that enhance the experience (e.g., 1. Subtle animation for breathing or growling effect 2. Interactive elements that respond to mouse hover/click 3. Creative use of filters or gradients while maintaining the black and white aesthetic). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Duplicate path definitions or redundant shapes for the same visual element 2. Unnecessary attributes that don't contribute to the visual output 3. Overly complex paths that could be simplified. Deduct 3 points for each redundancy found, and directly deduct 10 points if redundancies significantly increase file size or render time.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review code organization (such as logical grouping of SVG elements), naming conventions for IDs/classes, and optimization for file size. Deduct 5 points if elements lack semantic IDs/classes; deduct 5 points if the SVG contains unoptimized paths (excessive decimal points, unnecessary commands); deduct 5 points if no comments explain complex sections. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the illustration meet professional design standards?", "description": "Evaluate whether the design follows professional illustration principles: 1) Balanced composition with clear focal point 2) Effective use of negative space 3) Consistent line weights and style. Deduct 3 points for unbalanced composition, 5 points for inconsistent line weights, and 5 points for poor use of negative space. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the SVG optimized for performance and scalability?", "description": "Judge whether the SVG is implemented efficiently: 1) Path optimization with minimal points 2) Appropriate use of primitives vs. paths 3) Scalability without quality loss at different sizes. Deduct 5 points for unnecessarily complex paths, 3 points for using paths where primitives would be more efficient, and 5 points if the image degrades significantly when scaled. The full score is 10 points.", "maxScore": 10}], "class": "SVG Generation-SVG Images", "difficulty": "easy"}
{"index": 716, "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure the code you generate can be executed and displayed properly. Help me write code for a Tetris game that can be played on WeChat.", "checklist": [{"id": 0, "title": "Is the core Tetris game mechanics fully implemented?", "description": "Review if the code accurately implements all essential Tetris mechanics: block rotation, movement, collision detection, line clearing, and scoring. The implementation should handle the seven standard Tetrimino shapes with proper rotation states. Score 0 if the core game logic is missing, 5 if only basic movement is implemented, and 10 if all standard Tetris rules (including wall kicks, hard/soft drops) are correctly implemented.", "maxScore": 10}, {"id": 1, "title": "Is the WeChat Mini Program integration properly implemented?", "description": "Check if the code follows WeChat Mini Program development standards and utilizes the appropriate WeChat APIs (wx.* namespace). The implementation should use the correct project structure (app.js, pages structure, etc.), configuration files (app.json, project.config.json), and lifecycle methods. Deduct 5 points if the code doesn't use WeChat's rendering context properly, 3 points if it doesn't handle device adaptation, and 5 points if essential Mini Program files are missing.", "maxScore": 10}, {"id": 2, "title": "Is touch-based mobile control implemented effectively?", "description": "Evaluate whether the game implements intuitive touch controls suitable for mobile devices, including swipe gestures for movement, tap for rotation, and potentially accelerometer integration. The implementation should be responsive (< 100ms latency) and include visual feedback for touch interactions. Deduct 5 points if touch zones are too small for comfortable play, 3 points if gestures are unintuitive, and 5 points if alternative control schemes are not provided.", "maxScore": 10}, {"id": 3, "title": "Does the game implement WeChat social features?", "description": "Check whether the code integrates WeChat social capabilities such as sharing game results, competing with friends, or maintaining a leaderboard using WeChat Open Data API. The implementation should allow score comparison, challenge invitations, or gameplay sharing. Deduct 3 points for each missing social feature (maximum 10 points deduction) that would enhance the WeChat gameplay experience.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as out-of-bounds input, network interruption, user operation errors, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Customizable Tetrimino themes/skins 2. Power-ups or special items 3. Alternative game modes like time attack or puzzle mode). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple game loop implementations) 2. Function modules unrelated to Tetris or WeChat integration 3. Fancy effects that affect performance on mobile devices (e.g., excessive particle effects). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating game logic/view/controller layers), appropriate use of WeChat Mini Program best practices, and optimization for mobile performance. Deduct 5 points if global state is poorly managed; deduct 5 points if code reuse opportunities are missed (DRY principle violations); deduct 5 points if the code doesn't optimize for WeChat's rendering pipeline. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the overall design follows modern mobile design principles: 1) Harmonious color matching suitable for extended gameplay 2) Proper layout optimized for portrait orientation and various screen sizes 3) Professional font system with adequate size for mobile viewing (minimum touch target size of 44×44 points). Deduct 3 points for each hard-to-read UI element, 5 points for poor screen space utilization, and 5 points for designs that don't follow WeChat's visual language. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction smooth and seamless?", "description": "Judge whether the game performs smoothly on mobile devices: 1) Consistent frame rate (minimum 30 FPS) 2) Responsive controls with clear visual feedback 3) Smooth animations for block movement and line clearing. Deduct 5 points for noticeable frame drops during gameplay, 3 points for laggy touch response, and 5 points for jarring or missing transition animations. The full score is 10 points.", "maxScore": 10}], "class": "Game Development-Puzzle", "difficulty": "hard"}
{"index": 383, "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Be careful to ensure the generated code is executable and demonstrable. Using VC++ MFC 2022, develop a software for ceramic tile surface defect detection that automatically captures tile images using an industrial camera, then performs inference using a YOLOv model to produce results. Please help me design this project, including the interface and functionality, as well as user operations in specific detail. Also, provide the software code.", "checklist": [{"id": 0, "title": "Is the industrial camera integration and image acquisition system fully implemented?", "description": "Review whether the code properly implements industrial camera SDK integration (such as Basler, FLIR, or Hikvision camera APIs) through MFC framework, including camera initialization, parameter configuration (exposure, gain, frame rate), real-time image capture, and buffer management. Check if the system supports multiple camera brands and provides camera status monitoring. Score 0 if camera integration is not implemented, 5 if only basic capture is implemented without parameter control, and 10 if full camera control with error handling is included.", "maxScore": 10}, {"id": 1, "title": "Is the YOLOv model inference engine properly integrated and optimized?", "description": "Evaluate whether the YOLO model integration uses appropriate inference frameworks (ONNX Runtime, TensorRT, or OpenCV DNN) with proper preprocessing (image normalization, resizing) and postprocessing (NMS, confidence filtering). Check if the system supports model switching, batch processing, and GPU acceleration. Deduct 5 points if inference time exceeds 500ms per image, 3 points if confidence threshold is not configurable. The full score is 10 points.", "maxScore": 10}, {"id": 2, "title": "Is the defect detection results processing and visualization system comprehensive?", "description": "Check whether the detection results include proper bounding box rendering, defect classification labels, confidence scores, and defect statistics. Evaluate if the system provides result export functionality (XML/JSON/CSV formats), defect image cropping, and historical result database storage. Deduct 5 points if detection results are not properly visualized, 3 points if export functionality is missing. The full score is 10 points.", "maxScore": 10}, {"id": 3, "title": "Is the complete workflow automation and quality control system implemented?", "description": "Review whether the software includes automated workflow management such as continuous monitoring mode, batch processing capabilities, quality control thresholds, alarm mechanisms for defective tiles, and production line integration interfaces. Check if the system provides calibration tools, ROI selection, and inspection parameter adjustment. Deduct 5 points if automation workflow is not implemented, 3 points if quality control features are missing. Give 10 points if fully implemented.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as camera disconnection, model loading failure, memory overflow, invalid image formats, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should include proper exception handling, resource cleanup, and graceful degradation. Give 10 points if fully robust, 5 points if partially handled, and 0 points if no exception handling is present.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that enhance industrial usability?", "description": "Check whether the code includes advanced features that improve industrial application value (e.g., 1. Real-time defect trend analysis and reporting 2. Multi-spectral imaging support 3. AI-assisted defect severity grading 4. Production line speed optimization 5. Remote monitoring capabilities). Add 2 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple image processing pipelines) 2. Function modules unrelated to defect detection (e.g., built-in games or entertainment features) 3. Resource-intensive effects that impact real-time performance (e.g., unnecessary animations during detection). Deduct 3 points for each redundancy found, and directly deduct 10 points if core detection functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (separating camera control/image processing/AI inference/UI layers), proper MFC architecture usage, memory management, and thread safety. Deduct 5 points if memory leaks are found or improper resource management; deduct 5 points if the code lacks proper class hierarchy design; deduct 5 points if threading is not properly implemented for real-time processing. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface design meet industrial software standards?", "description": "Evaluate whether the MFC interface follows industrial software design principles: 1) Professional color scheme suitable for factory environments (high contrast, easy readability) 2) Logical layout with clear functional grouping 3) Industrial-standard fonts and sizing (minimum 12px for readability in industrial settings) 4) Proper status indicators and progress feedback. Deduct 3 points for each cluttered interface element, 5 points for poor color contrast affecting readability, and 5 points for non-intuitive control placement. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the real-time performance and user interaction optimized for industrial use?", "description": "Judge whether the software meets industrial real-time requirements: 1) Image capture and display refresh rate ≥ 10 FPS 2) Detection result display latency ≤ 200ms 3) Clear visual indicators for system status and operation feedback 4) Keyboard shortcuts for frequent operations. Deduct 5 points for each operation without immediate feedback, 3 points for laggy real-time display, and 5 points for missing critical status indicators. The full score is 10 points.", "maxScore": 10}], "class": "Management Systems-Frontend/Backend Platforms", "difficulty": "hard"}
{"index": 1341, "question": "You are a code expert, please use your professional knowledge to generate accurate and professional responses. Make sure the generated code is executable and displayable. Please write a classroom roll call program in HTML language, which includes features such as flashing name display, roll call, and \"next\" function.", "checklist": [{"id": 0, "title": "Is the basic roll call function fully implemented?", "description": "Review whether the code implements the core roll call functionality, including student name storage, random selection, and display mechanism. Score 0 if the roll call system is not implemented, 5 if only basic name display is available, and 10 if complete with student management and random selection algorithms.", "maxScore": 10}, {"id": 1, "title": "Is the flashing name display feature properly implemented?", "description": "Check if the code includes a visually engaging flashing effect for displaying selected names. Evaluate the animation timing (should be between 200-600ms for optimal visibility), contrast ratio (minimum 4.5:1 for accessibility), and whether it gracefully handles different name lengths. Score 3 points for basic animation, 7 points for proper timing and accessibility, and 10 points for fully optimized implementation.", "maxScore": 10}, {"id": 2, "title": "Is the 'next' function properly implemented?", "description": "Assess whether the 'next' function correctly selects a new student without repetition until all students have been called. Check if it has proper state management to track called students, handles edge cases (empty list, last student), and provides clear feedback when the list is exhausted. Deduct 5 points if it allows immediate repetitions, 3 points if it lacks proper completion indication.", "maxScore": 10}, {"id": 3, "title": "Is class roster management functionality included?", "description": "Evaluate whether the program allows adding, editing, and removing students from the roll call list. Check if it includes data persistence (localStorage or similar), input validation, and duplicate prevention. Score 3 points for basic list editing, 7 points for validation and proper UI integration, 10 points for complete management with persistence.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as empty roster, rapid clicking, browser refresh, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Attendance tracking statistics 2. Customizable roll call animations/sounds 3. Timer for student response). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple ways to select students) 2. Function modules unrelated to roll call (e.g., a built-in calculator) 3. Fancy effects that affect performance (e.g., excessive animations). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating UI/logic/data layers), code reusability, and maintainability. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the code lacks comments or documentation. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction smooth and seamless?", "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Click feedback delay ≤ 100ms 2) Transition animation duration controlled between 300-500ms 3) Clear visual focus guidance. Deduct 5 points for each operation without feedback, 3 points for visual after-images during fast clicking, and 5 points for hard-to-find key function buttons. The full score is 10 points.", "maxScore": 10}], "class": "Web Applications-Education/Learning", "difficulty": "easy"}
{"index": 1574, "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure the code you provide is executable. I am a third-year student majoring in software technology, and I need to submit an assignment the day after tomorrow. I need something that can run successfully on my computer, so please help me create it and teach me how to download the software, configure it, and run it successfully to demonstrate the results.\n\nHere's what I've studied: 1. Using HTML and CSS to develop commercial websites 2. Introduction to programming 3. Linux basics 4. Object-oriented programming 5. MySQL database management 6. JavaScript programming 7. Database systems and applications 8. Dynamic website development (PHP) 9. HTML5+CSS3 development 10. WEB client-side development 11. Website construction and management. I need you to complete my requirements based on what I've learned. I'd like to use Vue and Bootstrap for the frontend, and for the backend, anything I've studied will work. For the content, I want to create a simple secondhand goods shopping website - the simpler the better.", "checklist": [{"id": 0, "title": "Is the core secondhand goods listing and browsing functionality implemented?", "description": "Review whether the code implements essential e-commerce features: product listings with image display, category filtering, search functionality, and individual product detail pages. Check if Vue components are properly structured with props and event handling. Score 0 if these core features are absent, 5 if basic implementation exists but lacks refinement, and 10 if all features are fully functional with proper data binding.", "maxScore": 10}, {"id": 1, "title": "Is user authentication and account management implemented?", "description": "Evaluate the implementation of user registration, login/logout functionality, and profile management. Check if proper validation is applied to forms, if password storage follows security best practices, and if session management is handled correctly. Deduct 3 points if validation is missing, 4 points if there's no password hashing, and 3 points if session persistence is not implemented. The full score is 10 points.", "maxScore": 10}, {"id": 2, "title": "Is the product management system (CRUD operations) implemented?", "description": "Check if users can add new secondhand items, edit their listings, delete them, and if the system properly manages product status (available, sold, reserved). Verify if image upload functionality works and if form validation is present. Deduct 3 points if any CRUD operation is missing, 3 points if image uploads don't work, and 4 points if there's no proper form validation. The full score is 10 points.", "maxScore": 10}, {"id": 3, "title": "Is database integration properly implemented with appropriate data modeling?", "description": "Assess whether MySQL database is properly structured with normalized tables for users, products, categories, and transactions. Check if proper relationships (foreign keys) are established, and if PHP/backend code uses prepared statements to prevent SQL injection. Deduct 5 points for poor database schema design, 5 points for security vulnerabilities in database access code. The full score is 10 points.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as invalid inputs, database connection failures, server errors, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Real-time notifications for price drops 2. Recommendation system based on browsing history 3. Integration with maps for local pickup). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple user profile editing pages) 2. Function modules unrelated to secondhand goods shopping (e.g., a built-in game) 3. Fancy effects that affect performance (e.g., excessive animations). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating frontend/backend concerns, Vue component structure, CSS organization), code reusability, and project structure. Deduct 5 points if global variable pollution is found; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if there's no clear organization of files and dependencies. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the Bootstrap implementation follows design principles: 1) Consistent use of Bootstrap components 2) Mobile-responsive design 3) Professional color scheme that matches the purpose of the site. Deduct 3 points for inconsistent component usage, 4 points for non-responsive layouts, and 3 points for unprofessional color combinations or typography. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction smooth and seamless?", "description": "Judge whether the Vue implementation provides good user experience: 1) Form submissions with validation feedback 2) Loading states during API calls 3) Smooth transitions between pages. Deduct 3 points for missing loading indicators, 3 points for jarring page transitions, and 4 points for forms that submit without validation or feedback. The full score is 10 points.", "maxScore": 10}], "class": "Web Applications-Online Shopping", "difficulty": "medium"}
{"index": 335, "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Be sure to make the code executable for demonstration. Develop a lean production website for the automotive industry and send me the code in HTML format.", "checklist": [{"id": 0, "title": "Is the core lean production management system fully implemented?", "description": "Review whether the code implements essential lean production features for automotive industry: Kanban boards, JIT inventory management, value stream mapping, and production flow visualization. Score 0 if none implemented, 5 if basic visualization only, and 10 if comprehensive lean production tools are included.", "maxScore": 10}, {"id": 1, "title": "Are automotive industry-specific components implemented?", "description": "Check whether the code includes automotive-specific elements such as vehicle assembly line tracking, part inventory management, quality control checkpoints, and defect tracking systems. Deduct 3 points for each missing critical component. The full score is 10 points.", "maxScore": 10}, {"id": 2, "title": "Is the dashboard for KPI monitoring and real-time production metrics implemented?", "description": "Evaluate the implementation of real-time dashboards showing critical metrics like cycle time, throughput, defect rates, and OEE (Overall Equipment Effectiveness). Assess whether the visualizations use appropriate chart types and provide actionable insights. Deduct 5 points if real-time updates are missing, and 3 points if the metrics aren't industry-relevant. The full score is 10 points.", "maxScore": 10}, {"id": 3, "title": "Is the responsive design properly implemented for shop floor and management use?", "description": "Check whether the website is usable across different devices (desktop monitors on factory floor, tablets for supervisors, mobile for managers). Test layout at 320px, 768px, and 1200px breakpoints. Deduct 3 points for each breakpoint with significant layout issues. The full score is 10 points.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as data loading errors, form validation, offline operation capability, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. AI-powered predictive maintenance alerts 2. AR-guided assembly instructions 3. Interactive process optimization simulations). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple data visualization libraries) 2. Function modules unrelated to automotive production (e.g., a built-in game) 3. Fancy effects that affect performance (e.g., excessive animations). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating data/view/controller layers), performance optimization techniques (lazy loading, code splitting), and maintainability factors. Deduct 5 points if global variable pollution is found; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if no optimizations for industrial environments are implemented. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the overall design follows industrial UI principles: 1) High contrast for factory visibility (black/white/primary color indicators) 2) Proper information hierarchy (critical alerts prominent) 3) Professional typography system (sans-serif fonts, large touch targets for gloved hands). Deduct 3 points for poor visual hierarchy, 5 points for low-contrast elements unsuitable for factory environments, and 5 points for information overload without clear organization. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction smooth and seamless?", "description": "Judge whether the dynamic effects conform to industrial environment needs: 1) Fast loading time ≤ 2 seconds for critical interfaces 2) Clear state changes for machine status (running/idle/maintenance) 3) Accessible controls for touch/mouse usage with minimal training. Deduct 5 points for each key operation without feedback, 3 points for confusing state transitions, and 5 points for unintuitive navigation patterns. The full score is 10 points.", "maxScore": 10}], "class": "Other-Business Web Application", "difficulty": "hard"}
{"index": 919, "question": "You are a code expert, please use your professional knowledge to generate accurate and professional responses. Make sure the code you generate is executable for demonstration. Clicking \"Submit Feedback\" will open a new page for writing feedback; change \"Feedback Notification\" to \"Historical Feedback\"; delete all content below \"Try to create a feedback box below\" and replace it with \"Resolved Feedback List\" for display, clicking on any specific feedback item will take you to the detailed feedback page; please provide me with all the code.", "checklist": [{"id": 0, "title": "Is the feedback form submission system fully implemented?", "description": "Review whether the code accurately implements a complete feedback form with proper validation, submission handling, and page navigation. Check if clicking 'Submit Feedback' correctly opens a new page with a functional feedback form including input fields, validation logic, and submission processing. Score 0 if no form implementation exists, 5 if only basic form structure is present without validation, and 10 if complete form with validation, error handling, and successful submission flow is implemented.", "maxScore": 10}, {"id": 1, "title": "Is the dynamic content replacement functionality correctly implemented?", "description": "Evaluate whether the code successfully changes 'Feedback Notification' to 'Historical Feedback' and replaces content below 'Try to create a feedback box below' with 'Resolved Feedback List'. Check if the DOM manipulation is clean and doesn't cause layout issues. Deduct 5 points if text replacement is incomplete, 3 points if DOM manipulation causes visual glitches, and 5 points if the replacement doesn't maintain proper styling consistency. Full score is 10 points.", "maxScore": 10}, {"id": 2, "title": "Is the feedback list display and navigation system properly constructed?", "description": "Check whether the code implements a functional feedback list that displays feedback items correctly and provides clickable navigation to detailed feedback pages. Evaluate if the list items are properly structured, clickable, and lead to appropriate detail pages. Deduct 5 points if list items are not properly formatted, 5 points if click navigation doesn't work, and 3 points if the detail page structure is missing or incomplete. Full score is 10 points.", "maxScore": 10}, {"id": 3, "title": "Is the complete page routing and state management implemented?", "description": "Assess whether the code includes proper page routing between the main page, feedback submission page, and feedback detail pages. Check if state management maintains data consistency across page transitions and if browser navigation (back/forward) works correctly. Deduct 5 points if routing is implemented but buggy, 5 points if state is lost during navigation, and 3 points if browser navigation doesn't work properly. Give 10 points if fully implemented with smooth transitions.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as invalid form input, missing data, navigation errors, DOM manipulation failures, etc.) and provide friendly error messages or recovery mechanisms. Code with strong robustness should effectively handle edge cases like empty submissions, malformed data, and failed page transitions. Give 10 points for comprehensive error handling, 5 points for basic error handling, and 0 points if no exception handling exists.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that enhance user experience?", "description": "Check whether the code includes valuable enhancements such as: 1) Auto-save draft functionality for feedback forms 2) Search/filter capability for feedback lists 3) Real-time form validation with helpful hints 4) Smooth page transitions with loading states 5) Responsive design adaptations. Add 2-3 points for each well-implemented innovative feature (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant or unnecessary features?", "description": "Strictly identify three types of redundancy: 1) Duplicate functionality implementations (e.g., multiple form validation methods) 2) Features unrelated to the feedback system (e.g., embedded games or unrelated widgets) 3) Over-engineered effects that don't serve the core purpose (e.g., excessive animations that slow down interactions). Deduct 3 points for each redundancy found, and deduct 10 points if redundant code interferes with core functionality.", "maxScore": 10}, {"id": 7, "title": "Does the code demonstrate good engineering practices?", "description": "Review code organization, modularity (separation of HTML structure, CSS styling, and JavaScript logic), proper naming conventions, and maintainability. Check for clean separation of concerns, reusable components, and consistent coding patterns. Deduct 5 points for poor code organization or heavy coupling; deduct 5 points if code duplication exceeds 30%; deduct 5 points for inconsistent naming or lack of proper code structure. Full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface design meet professional visual standards?", "description": "Evaluate whether the overall design follows modern UI principles: 1) Consistent color scheme with appropriate contrast ratios 2) Proper typography hierarchy and readability (font sizes ≥ 14px, adequate line spacing) 3) Balanced layout with appropriate whitespace and element spacing 4) Clear visual hierarchy and information organization. Deduct 3 points for each visual inconsistency, 5 points for poor color choices affecting readability, and 5 points for cluttered or unprofessional layout. Full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Are the interactions smooth and provide clear user feedback?", "description": "Assess whether user interactions provide immediate and clear feedback: 1) Button clicks show visual response within 100ms 2) Form submissions provide loading states and success/error feedback 3) Page transitions are smooth and indicate progress 4) Hover states and focus indicators are clearly visible 5) Navigation is intuitive and predictable. Deduct 5 points for each interaction lacking proper feedback, 3 points for slow response times, and 5 points for confusing navigation patterns. Full score is 10 points.", "maxScore": 10}], "class": "Management Systems-Frontend/Backend Platforms", "difficulty": "easy"}
{"index": 1421, "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Be sure to ensure that the generated code is executable for demonstration. Create a Qianqian Jingting (TTPlayer) style music player software with QML for the interface and PySide6 for control.", "checklist": [{"id": 0, "title": "Is the music player interface design visually similar to TTPlayer?", "description": "Evaluate whether the QML interface properly implements the distinctive Qianqian Jingting (TTPlayer) visual style, including the classic blue gradient color scheme, semi-transparent design elements, reflective surfaces, and rounded corners. Score 0 if the design bears no resemblance to TTPlayer, 5 if basic styling is present but lacks defining characteristics, and 10 if the interface is nearly indistinguishable from the original TTPlayer aesthetic.", "maxScore": 10}, {"id": 1, "title": "Does the code implement core music playback functionality?", "description": "Check if the implementation includes essential music player functions: play/pause/stop controls, seeking functionality, volume control, playlist management, and support for common audio formats (MP3, FLAC, etc.). Verify that MediaPlayer or similar QML elements are properly integrated with audio sources. Score 0 if playback doesn't work, 5 if basic playback works but with limited controls, and 10 if all core functionality is properly implemented and working.", "maxScore": 10}, {"id": 2, "title": "Is the PySide6 backend properly integrated with the QML frontend?", "description": "Review whether the code correctly implements the MVC pattern with PySide6 providing backend functionality to the QML interface. Check that signals and slots are properly connected, Python models are exposed to QML correctly, and file system operations are handled by PySide6. Deduct 5 points if data binding is inconsistent or broken, and 3 points if Python backend functions are not properly accessible from QML. The full score is 10 points.", "maxScore": 10}, {"id": 3, "title": "Does the implementation include TTPlayer's signature visualization features?", "description": "Assess whether the code implements TTPlayer's distinctive audio visualization elements, such as spectrum analyzer, waveform display, or particle effects that respond to music. Check that visualizations are responsive to audio in real-time using FFT analysis or similar techniques. Score 0 if visualizations are missing, 5 if basic visualizations exist but aren't reactive to music, and 10 if visualizations are fully implemented with TTPlayer's distinctive style.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as missing audio files, corrupted metadata, memory limitations, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Lyrics synchronization and display 2. Online music search/streaming integration 3. Custom audio equalizer with presets). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple volume control implementations) 2. Function modules unrelated to music playback (e.g., a built-in web browser) 3. Fancy effects that affect performance (e.g., excessive animations that consume CPU). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating UI/playback logic/data models), reusable QML components, Python class organization, and proper resource management. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if resource files are not properly managed. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the overall design follows modern design principles while maintaining TTPlayer's aesthetic: 1) Consistent and harmonious color scheme 2) Proper layout spacing and alignment 3) Professional typography (readable font sizes and weights). Deduct 3 points for each crowded visual element, 5 points for color combinations that clash with TTPlayer's brand identity, and 5 points for chaotic UI element placement. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction smooth and responsive?", "description": "Judge whether the dynamic effects conform to modern UI standards: 1) Click feedback delay ≤ 100ms 2) Smooth transitions between UI states 3) Responsive UI that doesn't block during file operations or loading. Deduct 5 points for each operation without feedback, 3 points for stuttering animations, and 5 points for UI freezing during background operations. The full score is 10 points.", "maxScore": 10}], "class": "Multimedia Editing-Audio Editing", "difficulty": "hard"}
{"index": 512, "question": "You are a code expert. Please use your professional knowledge to generate accurate, professional responses. Make sure that the generated code can be executed as demonstrated. ======== ROLE ========\nYou are an experienced code expert. I am providing you with a software development requirement description, and I need you to generate project code according to these requirements. Strictly follow the rules to help the user generate complete project code with simple and understandable comments. Don't output anything else.\n\n======== OUTPUT RULES ========\n1. You should always generate complete and runnable project code. Please ensure the project is fully executable\n2. Ensure all code files you output are complete without omitting any code\n3. Carefully review and check all code before final output, evaluating its executability. If the code cannot be executed or contains errors, it needs to be regenerated\n4. If the requirements involve external API access or need to use user data (images, videos, audio, etc.), please provide simulated data\n\n======== PROJECT REQUIREMENTS ========\nDevelop a video speed adjustment tool where users can upload video files and set the video playback speed (fast or slow) using a slider. Finally, export a video file with the applied speed change.", "checklist": [{"id": 0, "title": "Is the video upload functionality correctly implemented?", "description": "Check if the application properly allows users to upload video files. Evaluate if the code handles different video formats (MP4, WebM, AVI, etc.), implements file size validation, and provides clear error handling for unsupported formats. Score 0 if upload functionality is missing, 5 if basic upload with limited format support is implemented, and 10 if comprehensive upload with proper validation and error handling is provided.", "maxScore": 10}, {"id": 1, "title": "Is the video playback speed adjustment feature properly implemented?", "description": "Assess if the slider for speed adjustment is correctly implemented and effectively controls the playback rate. Check if the code supports a reasonable range of speeds (e.g., 0.25x to 4x) and updates the video playback in real-time as the slider moves. Deduct 3 points if the slider doesn't provide smooth transitions, 5 points if speed changes don't apply in real-time during preview, and 3 points if the range is too limited. The full score is 10 points.", "maxScore": 10}, {"id": 2, "title": "Is the video export functionality working as expected?", "description": "Evaluate if the application can successfully export videos with the modified playback speed. Check if the code uses MediaRecorder API or another appropriate method to generate the new video file, maintains original video quality, and provides progress indicators during processing. Score 0 if export is not implemented, 5 if basic export works but has quality issues or lacks progress indication, and 10 if export is fully functional with proper quality preservation and user feedback.", "maxScore": 10}, {"id": 3, "title": "Is the user interface intuitive and responsive?", "description": "Review the user interface design for the video speed adjustment tool. Check if all essential controls (upload button, playback controls, speed slider, export button) are clearly visible and properly positioned. Assess if the interface provides immediate visual feedback for user interactions and is responsive across different screen sizes. Deduct 3 points for each critical UI element that's difficult to find, 5 points for lack of responsive design, and 3 points for missing visual feedback. The full score is 10 points.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as corrupted video files, browser compatibility issues, memory constraints for large files, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Video preview thumbnails at different speeds 2. Audio pitch correction when changing speed 3. Batch processing for multiple videos 4. Ability to apply variable speed to different segments of the video). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple video processing libraries doing the same task) 2. Function modules unrelated to video speed adjustment (e.g., unnecessary image filters) 3. Fancy effects that affect performance (e.g., excessive animations). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating video processing/UI/data management layers), code reusability, and performance optimization. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if no performance optimization techniques are implemented for video processing. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction smooth and seamless?", "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Video playback controls respond within 100ms 2) Smooth transitions when adjusting speed 3) Clear visual indication of processing state during export. Deduct 5 points for laggy video playback, 3 points for jerky slider movement, and 5 points for lack of loading indicators during processing operations. The full score is 10 points.", "maxScore": 10}], "class": "Multimedia Editing-Video Production", "difficulty": "medium"}
{"index": 1100, "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure the code you generate is executable for demonstration. I am currently at Harbin Preschool Teachers College. My information technology teacher has asked me to create a web-based roll call system using a computer. How should I proceed?", "checklist": [{"id": 0, "title": "Is the roll call system core functionality fully implemented?", "description": "Review whether the code accurately implements a student database, attendance tracking mechanism, and date/time management. Check if the system can record present/absent/late statuses for each student. Score 0 if core functionality is missing, 5 if only basic attendance recording is implemented, and 10 if comprehensive attendance tracking with various statuses and timestamps is included.", "maxScore": 10}, {"id": 1, "title": "Is the student management system complete?", "description": "Evaluate whether the system allows adding, editing, and removing students from the database. Check if student information (name, ID, profile photo, etc.) can be properly managed. Deduct 3 points if bulk import/export functionality is missing, 2 points if student search/filter is not implemented, and 3 points if data validation is inadequate. The full score is 10 points.", "maxScore": 10}, {"id": 2, "title": "Is the attendance record storage and retrieval mechanism properly designed?", "description": "Check whether the system properly stores attendance records (using localStorage, IndexedDB, or server-side database) and allows retrieving historical data. Verify if attendance reports can be generated and exported. Deduct 5 points if data persistence is missing, 3 points if historical data cannot be accessed easily, and 3 points if there's no reporting functionality. The full score is 10 points.", "maxScore": 10}, {"id": 3, "title": "Is the user interface suitable for a classroom environment?", "description": "Assess whether the UI is designed for quick roll call in a classroom setting. Look for features like a grid/list view of students, clear visual indicators of attendance status, and quick-access buttons for marking attendance. Deduct 5 points if the interface requires too many clicks for basic operations, 3 points if status indicators are not clearly visible, and 3 points if the layout is not optimized for classroom use. The full score is 10 points.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as incorrect data inputs, browser refresh/reload, network issues for server-based solutions, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Automated roll call using webcam/facial recognition 2. Voice command interface 3. Absence notification system to parents/guardians 4. Statistical dashboard for attendance trends). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple ways to perform the same attendance task) 2. Function modules unrelated to roll call (e.g., a built-in game system) 3. Fancy effects that affect performance (e.g., excessive animations when marking attendance). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating data/UI/controller layers), code organization, and use of appropriate design patterns. Deduct 5 points if global state pollution is found or appropriate patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the code lacks comments or documentation. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction smooth and seamless?", "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Click feedback delay ≤ 100ms 2) Transition animation duration controlled between 300-500ms 3) Clear visual focus guidance. Deduct 5 points for each operation without feedback, 3 points for visual after-images during fast operations, and 5 points if key functions are difficult to locate. The full score is 10 points.", "maxScore": 10}], "class": "Management Systems-Frontend/Backend Platforms", "difficulty": "hard"}
{"index": 1394, "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure the code you generate is executable for demonstration. For a Vue 3 project, write a canvas flat graphic that transforms into a 2.5D effect after clicking a button.", "checklist": [{"id": 0, "title": "Is the 2D to 2.5D transformation effect properly implemented?", "description": "Review whether the code accurately implements transformation from a flat 2D shape to a 2.5D perspective view using canvas manipulation and matrix transformations. Score 0 if no transformation is implemented, 5 if there's basic transformation but lacks depth perception, and 10 if the transformation includes proper perspective, shading, and visual depth cues.", "maxScore": 10}, {"id": 1, "title": "Is the Vue 3 integration well-executed?", "description": "Evaluate whether the code properly leverages Vue 3 features (Composition API, reactive refs, computed properties, lifecycle hooks) to manage the canvas and transformation state. Deduct 3 points if not using Vue 3's reactive system effectively, 3 points if not properly handling component lifecycle, and 3 points if missing proper component structure. The full score is 10 points.", "maxScore": 10}, {"id": 2, "title": "Is the canvas drawing implementation correct and efficient?", "description": "Check whether the canvas API is used correctly for both 2D and transformed states. Look for proper context management, efficient redrawing strategy, and correct handling of canvas dimensions. Deduct 5 points if using inefficient redraw methods (like clearing the entire canvas unnecessarily), 3 points if canvas dimensions are not responsive, and 3 points if transformations cause visual artifacts. The full score is 10 points.", "maxScore": 10}, {"id": 3, "title": "Is the animation smooth and visually appealing?", "description": "Evaluate whether the transformation between 2D and 2.5D states is animated smoothly. Check for use of requestAnimationFrame, proper easing functions, and consistent frame rates. Deduct 5 points if animation is jerky or has frame drops, 3 points if transition timing is unnatural, and 2 points if visual artifacts appear during animation. The full score is 10 points.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as window resizing, device pixel ratio differences, interaction during animation, etc.) and provide recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. User-controlled camera angle in 2.5D mode 2. Dynamic lighting effects 3. Interactive manipulation of the transformed object). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar drawing functions 2. Function modules unrelated to the 2D-to-2.5D transformation 3. Fancy effects that affect performance without adding value to the core functionality. Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating rendering logic/transformation logic/interaction handling), reusability of components, and maintainability. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the code lacks proper documentation or comments. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching for both 2D and 2.5D states 2) Proper layout spacing for controls and canvas 3) Professional transitions between states. Deduct 3 points for each visually unappealing element, 5 points for poorly chosen colors that detract from the effect, and 5 points for chaotic button/control placement. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction smooth and seamless?", "description": "Judge whether the interactions conform to human perception characteristics: 1) Click feedback delay ≤ 100ms 2) Transformation animation duration controlled between 300-800ms 3) Clear visual indication of interactive elements. Deduct 5 points for each operation without feedback, 3 points for laggy response during transformation, and 5 points for confusing or hard-to-find controls. The full score is 10 points.", "maxScore": 10}], "class": "Web Applications-Web Visuals", "difficulty": "easy"}
{"index": 967, "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure the code you generate is executable for display. I want to create visualizations - I'll provide requirements, and you'll give me code that I can place in the left panel for the graph to display directly on the right.", "checklist": [{"id": 0, "title": "Is a comprehensive visualization framework implemented?", "description": "Review whether the code includes a complete visualization rendering system with proper initialization, data binding, and responsive design. Score 0 if no visualization is implemented, 5 if basic static visualization exists, and 10 if the visualization supports dynamic data updates and responsive design.", "maxScore": 10}, {"id": 1, "title": "Are appropriate visualization techniques selected based on the requirements?", "description": "Evaluate whether the chosen visualization type (chart, graph, map, etc.) matches the data characteristics and user requirements. Check if the visualization effectively communicates the intended information. Deduct 5 points if the visualization type is inappropriate, and 3 points if better alternatives exist but weren't considered. The full score is 10 points.", "maxScore": 10}, {"id": 2, "title": "Is data processing correctly implemented?", "description": "Check whether the code includes proper data preprocessing, normalization, aggregation, and filtering as needed. The implementation should handle different data formats and edge cases (empty data, outliers). Deduct 5 points for missing data validation, 3 points for inefficient data transformations, and 5 points if the code fails with edge cases. The full score is 10 points.", "maxScore": 10}, {"id": 3, "title": "Are interactive elements properly implemented?", "description": "Assess whether the visualization includes appropriate interactive features (tooltips, zooming, filtering, highlighting). Check if interactions are intuitive and enhance understanding of the data. Deduct 3 points for each missing essential interaction, and 5 points if interactions are implemented but not functioning correctly. The full score is 10 points.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as missing data, browser incompatibilities, window resizing, etc.) and provide appropriate fallbacks or error handling. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Animation transitions between data states 2. Novel interaction techniques 3. Integration with external data sources). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant visualization elements that don't add information 2. Unnecessary graphical effects that distract from the data 3. Complex interactions that don't enhance understanding. Deduct 3 points for each redundancy found, and directly deduct 10 points if the core visualization is compromised by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating data processing/visualization/interaction layers), code reusability, and performance optimization. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if rendering performance is not optimized. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the visualization meet professional design standards?", "description": "Evaluate whether the overall design follows data visualization principles: 1) Appropriate color palette with sufficient contrast 2) Clear visual hierarchy and layout 3) Proper labeling and legends. Deduct 3 points for each violation of perceptual principles, 5 points for misleading visual representations, and 5 points for cluttered design with poor information density. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the visualization accessible and cross-browser compatible?", "description": "Judge whether the visualization is accessible to users with disabilities and works across modern browsers: 1) Color choices consider color blindness 2) Text elements are screen-reader friendly 3) Works consistently in Chrome, Firefox, Safari, and Edge. Deduct 3 points for each accessibility issue, 5 points for major cross-browser incompatibilities, and 5 points if the visualization is completely inaccessible to certain user groups. The full score is 10 points.", "maxScore": 10}], "class": "Data Science-Data Visualization Dashboards", "difficulty": "hard"}
{"index": 1316, "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure that the code you generate is executable for demonstration. The code should be implemented using HTML5 and JavaScript, with the time period from March 10, 2025 to June 14, 2025.", "checklist": [{"id": 0, "title": "Is the date range implementation correctly handling the specified time period?", "description": "Review whether the code accurately implements the date range from March 10, 2025 to June 14, 2025. Check if date validation is properly implemented, preventing out-of-range selections. Score 0 if dates are hardcoded without validation, 5 if basic range implementation exists but with edge case issues, and 10 if full date range management with proper validation and error handling is implemented.", "maxScore": 10}, {"id": 1, "title": "Is the calendar visualization properly implemented?", "description": "Evaluate the visual representation of the calendar. Check if it shows all days within the specified period (March 10, 2025 to June 14, 2025) correctly, with appropriate month transitions. Verify that weekdays and weekends are visually distinguishable. Deduct 3 points if month transitions are incorrect, 3 points if the day labeling is inaccurate, and 4 points if the calendar doesn't reflect the exact specified date range.", "maxScore": 10}, {"id": 2, "title": "Are date selection and manipulation features implemented?", "description": "Check for functionality to select, highlight, or interact with dates in the specified range. Score 0 if no selection mechanism exists, 5 if basic date selection is implemented but lacks feedback or validation, and 10 if comprehensive date selection with visual feedback, range selection capabilities, and proper validation against the specified time period are all properly implemented.", "maxScore": 10}, {"id": 3, "title": "Is the date format handling flexible and internationalized?", "description": "Assess whether the code handles different date formats and localization. Check if it provides options for different date display formats (MM/DD/YYYY, DD/MM/YYYY, etc.) and supports different locales for day/month names. Deduct 3 points if only one date format is supported, 3 points if no localization options exist, and 4 points if the implementation doesn't handle timezone considerations.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as invalid date inputs, browser compatibility issues, leap year considerations, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Interactive date range visualization 2. Event marking/annotation capabilities 3. Animated transitions between months). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar date handling functions 2. Function modules unrelated to the calendar/date requirement 3. Fancy effects that affect performance (e.g., excessive animations when changing months). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating date logic/view layers), unit test coverage, and build process automation. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the build process is not automated. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction smooth and seamless?", "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Click feedback delay ≤ 100ms 2) Transition animation duration controlled between 300-500ms 3) Clear visual focus guidance. Deduct 5 points for each operation without feedback, 3 points for visual after-images during fast sliding, and 5 points for hard-to-find key function buttons. The full score is 10 points.", "maxScore": 10}], "class": "Other-Code Generation", "difficulty": "hard"}
{"index": 234, "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Be sure to ensure that the generated code is executable for display. Create a webpage showing the moon's phase changes from the first to the thirtieth day of the lunar calendar.", "checklist": [{"id": 0, "title": "Is the lunar phase simulation scientifically accurate?", "description": "Check whether the code correctly represents the lunar phases according to astronomical principles (waxing crescent, first quarter, waxing gibbous, full moon, waning gibbous, third quarter, waning crescent, new moon). Review whether the calculation takes into account the 29.53-day lunar cycle rather than simply using a 30-day calendar. Score 0 if phases are incorrect, 5 if basic phases are present but with inaccuracies, and 10 if astronomically accurate with proper illumination angles.", "maxScore": 10}, {"id": 1, "title": "Is the day-by-day phase transition visualization implemented?", "description": "Evaluate whether the code provides a clear visual representation for all 30 days of the lunar calendar, with proper transitions between phases. Check if the illumination percentage matches the day number in the lunar cycle. Deduct 5 points if transitions are abrupt, 3 points if illumination angles are inconsistent, and 2 points if the shape of the moon is distorted. The full score is 10 points.", "maxScore": 10}, {"id": 2, "title": "Is there an interactive component allowing users to navigate between different days?", "description": "Check whether users can interact with the visualization to select specific lunar days or navigate through the cycle (such as sliders, clickable days, or animation controls). Score 0 if no interaction exists, 5 if basic navigation is implemented but clunky, and 10 if smooth, intuitive navigation with immediate visual feedback is provided.", "maxScore": 10}, {"id": 3, "title": "Is additional contextual information about lunar phases provided?", "description": "Assess whether the code includes educational elements about each lunar phase (names, characteristics, cultural significance, or astronomical explanations). Score 0 if no information is provided, 5 if basic labels are present, and 10 if comprehensive information that enhances user understanding is integrated seamlessly with the visualization.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as out-of-bounds input, browser compatibility issues, user operation errors, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Real-time comparisons with current lunar phase 2. Realistic lunar surface textures with shadows 3. Regional visibility indicators based on geography). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant calculations or rendering logic that could be optimized 2. Function modules unrelated to lunar phases (e.g., unnecessary weather information) 3. Fancy effects that affect performance (e.g., excessive animations that distract from the lunar phase visualization). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core visualization is obscured by redundant elements.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating astronomical calculations/visualization/user interface layers), code reusability, and implementation efficiency. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the animation performance is poor (below 30 fps). The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (appropriate night sky or space theme without being garish) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a distracting color scheme that diminishes the moon visualization, and 5 points for chaotic text-image layout. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction smooth and seamless?", "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Click/selection feedback delay ≤ 100ms 2) Phase transition animations controlled between 300-500ms for smooth blending 3) Clear visual cues for current day selection. Deduct 5 points for each operation without feedback, 3 points for jerky animations during phase transitions, and 5 points for confusing navigation between lunar days. The full score is 10 points.", "maxScore": 10}], "class": "Web Applications-Education/Learning", "difficulty": "hard"}
{"index": 1781, "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Be sure to ensure the generated code is executable for demonstration. I need your help to write an HTML application that implements the following functions:\n\nRemind to clock in 5 minutes before work starts on each working day (excluding public holidays). Remind to clock out and sign in for overtime at 18:01. Remind to sign out from overtime at 20:31.\n\nThe screen must remain locked until the clock-in/out is completed. Each time someone clocks in or out, they will receive an encouraging message to provide emotional value.", "checklist": [{"id": 0, "title": "Is the timed reminder functionality properly implemented?", "description": "Evaluate whether the code correctly implements timed reminders that trigger at the specified times (5 minutes before work starts, 18:01 for clock-out/overtime sign-in, and 20:31 for overtime sign-out). Check if the application correctly excludes weekends and public holidays from the reminder schedule. Deduct 5 points if any of the reminder times are incorrectly implemented, and 5 points if the holiday exclusion logic is missing or flawed. The full score is 10 points.", "maxScore": 10}, {"id": 1, "title": "Is the screen locking mechanism implemented effectively?", "description": "Check if the application implements a screen locking mechanism that prevents access until clock-in/out is completed. Verify that the lock cannot be easily bypassed and persists until the required action is taken. Deduct 5 points if the lock can be bypassed, 3 points if the lock doesn't persist properly, and 2 points if the lock doesn't provide clear instructions on how to unlock. The full score is 10 points.", "maxScore": 10}, {"id": 2, "title": "Are emotional value messages implemented with the clock-in/out system?", "description": "Evaluate whether encouraging messages are displayed after each clock-in/out action. Check for variety in messaging (at least 5 different messages), contextual relevance (morning messages differ from evening ones), and positive emotional tone. Deduct 3 points if messages lack variety, 3 points if they're not context-aware, and 4 points if no messages appear at all. The full score is 10 points.", "maxScore": 10}, {"id": 3, "title": "Is the clock-in/out tracking system properly implemented?", "description": "Assess whether the application correctly tracks and records clock-in/out events, including regular work hours and overtime. Check for proper data persistence (local storage at minimum), timestamp accuracy, and the ability to view history. Deduct 5 points if data isn't persisted between sessions, 3 points if timestamps are inaccurate, and 2 points if there's no history view. The full score is 10 points.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as browser notifications being blocked, system time discrepancies, offline usage, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Statistical visualization of work patterns 2. Personalized motivation system based on user preferences 3. Integration with ambient notifications like subtle screen color changes). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple notification systems doing the same thing) 2. Function modules unrelated to attendance tracking (e.g., a built-in game) 3. Fancy effects that affect performance (e.g., excessive animations that slow down the interface). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating UI/business logic/data persistence layers), unit test coverage, and maintainability. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if there's no clear organization or commenting. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction smooth and seamless?", "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Notification visibility and prominence when triggered 2) Transition animation duration controlled between 300-500ms when locking/unlocking screen 3) Clear visual feedback for successful clock-in/out actions. Deduct 5 points for each operation without feedback, 3 points for jarring transitions between states, and 5 points for notifications that are easy to miss. The full score is 10 points.", "maxScore": 10}], "class": "Utility Tools-Automation", "difficulty": "easy"}
{"index": 1011, "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure the code you generate is executable for demonstration. Vue3 Uni-app text display sentence by sentence, showing like a chat conversation.", "checklist": [{"id": 0, "title": "Is the Vue3 Uni-app text display component fully implemented?", "description": "Review whether the code properly implements a Vue3 component that displays text sentence by sentence. Check if the component uses Vue3's Composition API correctly (refs, reactive, setup(), etc.). Score 0 if no functional component is implemented, 5 if the component works but without proper Vue3 paradigms, and 10 if the implementation follows Vue3 best practices with proper reactivity.", "maxScore": 10}, {"id": 1, "title": "Is the sentence-by-sentence display mechanism properly implemented?", "description": "Evaluate if the text is properly split into sentences (using regex or appropriate string manipulation) and displayed with a natural timing mechanism. Check if the implementation handles edge cases like empty strings, single sentences, and punctuation correctly. Deduct 5 points if sentence detection is flawed, and 3 points if the timing mechanism is too simplistic. The full score is 10 points.", "maxScore": 10}, {"id": 2, "title": "Is Uni-app cross-platform compatibility addressed?", "description": "Check whether the code accounts for Uni-app's cross-platform requirements and uses platform-agnostic APIs. Verify that the component works across different platforms (iOS, Android, H5) without platform-specific code or with proper conditional compilation. Deduct 5 points if the code only works on a single platform, and 3 points if it uses deprecated Uni-app methods. The full score is 10 points.", "maxScore": 10}, {"id": 3, "title": "Is the chat conversation UX/UI properly designed?", "description": "Assess if the implementation includes appropriate chat UI elements (message bubbles, timestamps, user avatars, etc.) and follows a proper conversation flow. Check if the component includes features like message status indicators and typing animations. Give 10 points if it fully resembles a professional chat interface, 5 points for basic conversation display, and 0 points if no chat-like UI is implemented.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as empty messages, extremely long sentences, network-loaded content, etc.) and provide friendly error handling. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Customizable typing speed 2. Text-to-speech integration 3. Read receipts or status indicators). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant animation or timing logic 2. Function modules unrelated to text display (e.g., unnecessary network calls) 3. Fancy effects that affect performance (e.g., excessive animations or transitions). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating display logic/typing mechanics/styling), component reusability, and proper Vue3 practices. Deduct 5 points if global state is misused; deduct 5 points if the code has poor separation of concerns; deduct 5 points if Vue3 reactivity system is bypassed with direct DOM manipulation. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the overall design follows modern chat UI principles: 1) Distinguishable message bubbles with proper contrast 2) Consistent padding and margins (following the 8px rule) 3) Readable typography (font size ≥ 14px, appropriate line height). Deduct 3 points for cluttered message layout, 5 points for poor contrast making text hard to read, and 5 points for inconsistent bubble styling. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the typing animation and text transition smooth and natural?", "description": "Judge whether the sentence-by-sentence display feels natural: 1) Appropriate typing speed (neither too fast nor too slow) 2) Smooth transitions between sentences 3) Natural pauses at punctuation. Deduct 5 points if the typing effect feels mechanical, 3 points for jarring transitions between sentences, and 5 points if the timing doesn't account for sentence length or complexity. The full score is 10 points.", "maxScore": 10}], "class": "Web Applications-Communication", "difficulty": "easy"}
{"index": 1699, "question": "You are a code expert, please use your professional knowledge to generate accurate, professional responses. Be sure to ensure the generated code is executable for demonstration. Generate JavaScript code for the Qi Men Dun Jia divination chart system.", "checklist": [{"id": 0, "title": "Is the core Qi Men Dun Jia calculation system accurately implemented?", "description": "Check whether the code correctly implements the fundamental calculations for Qi Men Dun Jia, including the 9 Stars (九星), 8 Gates (八門), 8 Gods (八神), Heavenly Stems (天干), Earthly Branches (地支), and their relationships. Verify if the code handles solar terms (節氣) and time divisions correctly. Score 0 if core calculations are incorrect, 5 if basic calculations are implemented but with minor errors, and 10 if all traditional Qi Men Dun Jia rules are accurately implemented.", "maxScore": 10}, {"id": 1, "title": "Does the code correctly implement the temporal logic for chart generation?", "description": "Evaluate whether the system can generate charts based on different time systems (solar/lunar calendar) and calculate charts for different periods (hour/day/month charts). Check if the code manages the transitions between different Yuan (元) periods and handles the conversion between solar and lunar calendars correctly. Deduct 5 points if the temporal calculations are inconsistent with traditional methods, and 3 points if only basic timing systems are implemented. The full score is 10 points.", "maxScore": 10}, {"id": 2, "title": "Is the spatial arrangement of the Qi Men Dun Jia chart properly visualized?", "description": "Verify if the code generates a visually accurate representation of the Qi Men chart with its characteristic 3x3 palace structure. Check for correct placement of elements (Stems, Branches, Stars, Gates, Gods) within the palaces according to traditional rules. Examine if the chart changes dynamically based on input time parameters. Deduct 5 points if the spatial arrangement is incorrect, and 3 points if the visual representation lacks clarity. The full score is 10 points.", "maxScore": 10}, {"id": 3, "title": "Does the system include interpretation capabilities for divination purposes?", "description": "Review whether the code provides analytical functions to interpret the generated chart for divination purposes. Check if it can identify important patterns like Du Mu He (遇墓解), Tian Yi He Jin (天乙合金), or San Qi Ju (三奇聚). Evaluate if the system offers interpretations for common divination questions (career, relationships, etc.). Deduct 5 points if interpretation functions are missing, and 3 points if they lack depth or cultural accuracy. The full score is 10 points.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as invalid dates, out-of-range inputs, or missing data) and provide friendly error prompts or recovery mechanisms. Check if the code validates Chinese calendar edge cases (e.g., leap months). Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Interactive visual animations for chart transitions 2. AI-assisted interpretation recommendations 3. Historical data correlation for validation 4. Integration with other divination systems like I-Ching). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar calculation methods (e.g., multiple ways to calculate the same stem-branch combination) 2. Function modules unrelated to Qi Men Dun Jia (e.g., unrelated fortune-telling systems) 3. Fancy effects that affect performance (e.g., unnecessary animations that slow down chart generation). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating calculation logic/view/data layers), unit test coverage for calendar calculations, and appropriate use of design patterns. Check if the code follows clear naming conventions that reflect traditional Qi Men Dun Jia terminology. Deduct 5 points if global state pollution is found; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if there's no separation between calculation logic and presentation. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the chart visualization follows both traditional aesthetics and modern design principles: 1) Culturally appropriate color schemes (traditional five-element colors) 2) Clear hierarchy in displaying chart elements (palaces, stems, branches, stars, gates, gods) 3) Professional typography (appropriate use of Chinese characters and their spacing). Deduct 3 points for visually confusing element placement, 5 points for inappropriate color symbolism, and 5 points for illegible character display. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction smooth and informative?", "description": "Judge whether the interactive elements enhance understanding of this complex divination system: 1) Clear highlighting of relationships between elements when selecting components 2) Informative tooltips explaining traditional meanings 3) Smooth transitions when changing chart parameters. Deduct 5 points for each interaction without explanatory feedback, 3 points for confusing navigation between chart sections, and 5 points for important elements being difficult to select or identify. The full score is 10 points.", "maxScore": 10}], "class": "Other-Divination System", "difficulty": "hard"}
{"index": 1255, "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure the code you generate is executable for demonstration purposes. Help me generate code for integrating MapBox-GL in React.", "checklist": [{"id": 0, "title": "Is the MapBox-GL integration properly initialized in React?", "description": "Review whether the code correctly imports and initializes MapBox-GL with an API key, appropriate container configuration, and proper React lifecycle management. Check if useEffect is used correctly to handle map initialization and cleanup. Score 0 if MapBox-GL initialization is missing, 5 if basic initialization exists but with flaws, and 10 if fully implemented with proper access token management and error handling.", "maxScore": 10}, {"id": 1, "title": "Are React-specific MapBox integration practices followed?", "description": "Evaluate if the code follows React best practices for MapBox integration: using refs for DOM container management, handling component unmounting properly to prevent memory leaks, and efficiently managing state for map properties. Deduct 3 points if ref management is improper, 3 points if unmounting cleanup is missing, and 4 points if state management causes unnecessary re-renders. The full score is 10 points.", "maxScore": 10}, {"id": 2, "title": "Are MapBox event handlers properly implemented?", "description": "Check if map events (click, hover, drag, zoom) are handled correctly using React patterns. Event handlers should be properly memoized with useCallback to prevent unnecessary re-renders, and should correctly manage event propagation. Deduct 2 points for each event type that's improperly handled and 4 points if event cleanup on unmount is missing. The full score is 10 points.", "maxScore": 10}, {"id": 3, "title": "Is there proper handling of MapBox layers and sources?", "description": "Examine how the code manages MapBox layers and data sources. Proper implementation should include abstraction for layer management, conditional rendering of layers, and efficient updates without recreating the entire map. Deduct 3 points if layer management is hardcoded, 4 points if data source updates trigger full map reloads, and 3 points if there's no separation between data and presentation layers. The full score is 10 points.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as MapBox loading failures, API key errors, geolocation permission denials, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Custom map controls with React components 2. Animated data visualization layers 3. Integration with other geospatial libraries like Turf.js). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant MapBox-GL wrapper libraries that add complexity without value 2. Unnecessary re-rendering of map or components 3. Over-fetching of geospatial data that could be optimized. Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating map configuration/hooks/components), TypeScript typing for MapBox objects, and proper documentation. Deduct 5 points if global state pollution is found or custom hooks aren't created for reusable functionality; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the component structure doesn't follow separation of concerns. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the overall design follows modern design principles: 1) Proper map styling and theme consistency with the React application 2) Responsive design for different screen sizes 3) Accessibility considerations for map controls. Deduct 3 points for inconsistent styling, 5 points for non-responsive implementations, and 5 points for accessibility issues. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the map interaction smooth and performant?", "description": "Judge whether the map interactions are optimized: 1) Map rendering performance during pan/zoom operations 2) Efficient handling of large datasets with clustering or virtualization 3) Appropriate use of worker threads for heavy computations. Deduct 5 points for noticeable frame drops during interaction, 3 points for performance bottlenecks with large datasets, and 5 points for blocking the main thread with intensive operations. The full score is 10 points.", "maxScore": 10}], "class": "Web Applications-Web Visuals", "difficulty": "easy"}
{"index": 1538, "question": "You are a code expert, please use your professional knowledge to generate accurate and professional responses. Be sure to ensure that the code you generate is executable for demonstration. Player Setup: Enter player names, and teams (optional).\nRound Management: Update points and add/subtract scores as the game progresses by using the point toggle zone.\nFont and Appearance: Customize appearance settings for the display.\nOutput: Ensure the display is broadcasted as an overlay or separate window in your livestream. Filtering out green background for a better vision.\nReset Game: Reset the game by clicking \"Reset Game\".", "checklist": [{"id": 0, "title": "Is the player setup system fully implemented?", "description": "Check if the code accurately implements player name input and team assignment functions, including input validation, data storage, and interface display. Evaluate whether it supports multi-player management, team editing, and real-time updates of player information. If core player management functions are not implemented, score 0; if only basic input is implemented, score 5; if all player setup functions are fully implemented, score 10.", "maxScore": 10}, {"id": 1, "title": "Is the turn management and scoring system precisely implemented?", "description": "Check if the implementation of the score-switching area includes accurate score addition/subtraction logic, real-time score updates, and turn state management. Evaluate whether it has score history, undo functionality, and data persistence. If scoring logic is incorrect, deduct 5 points; if turn management is missing, deduct 3 points; if data persistence is not implemented, deduct 3 points. Full score is 10.", "maxScore": 10}, {"id": 2, "title": "Is the font and appearance customization system complete?", "description": "Evaluate whether the code provides full font selection, color customization, size adjustment, and layout settings. Check if it supports real-time preview, style saving, and theme switching. If the font system is missing, deduct 5 points; if color customization is absent, deduct 3 points; if style saving is not implemented, deduct 2 points. Full score is 10.", "maxScore": 10}, {"id": 3, "title": "Is the live broadcast output and green screen filtering professionally implemented?", "description": "Check if professional live broadcast overlay output, independent window mode, and green screen background filtering are implemented. Evaluate the precision of the chroma key algorithm, output resolution adaptation, and streaming compatibility. If green screen filtering is poor, deduct 5 points; if independent window mode is missing, deduct 3 points; if live output is unstable, deduct 2 points. Full score is 10.", "maxScore": 10}, {"id": 4, "title": "How robust is the code?", "description": "Evaluate whether the code can handle common exceptions (e.g., out-of-bounds input, network interruptions, user operation errors) and provide friendly error prompts or recovery mechanisms. Highly robust code should effectively handle these edge cases, scoring 10. Moderately robust code scores 5, and code that does not handle exceptions scores 0.", "maxScore": 10}, {"id": 5, "title": "Does it have innovative features that stand out?", "description": "Check if the code includes surprising features that enhance the experience (e.g., 1. real-time data visualization charts, 2. automatic match template import, 3. social media sharing, 4. voice broadcast). Each practical innovative feature implemented adds 3 points (maximum 10).", "maxScore": 10}, {"id": 6, "title": "Are there redundant features?", "description": "Strictly check for three types of redundancy: 1. Duplicate implementations of similar functions (e.g., multiple scoring logics coexisting), 2. Function modules unrelated to the scoring system (e.g., built-in music player), 3. Flashy effects that impact performance (e.g., particle explosion animations). For each redundancy found, deduct 3 points; if redundant code interferes with core functions, deduct 10 points directly.", "maxScore": 10}, {"id": 7, "title": "Does the code meet engineering quality standards?", "description": "Review modular design (e.g., separation of data logic/view/tool layers), unit test coverage, and build process automation. Deduct 5 points for global state pollution or unused design patterns; deduct 5 points for high code duplication (over 30%); deduct 5 points for non-automated build processes. Full score is 10.", "maxScore": 10}, {"id": 8, "title": "Does the interface visually meet professional design standards?", "description": "Evaluate whether the overall design follows modern principles: 1) Harmonious color scheme (no more than 3 primary colors), 2) Reasonable layout spacing (element spacing follows the 8px multiple rule), 3) Professional font system (main text size ≥14px, line height ≥1.5x). For each instance of crowded visual elements, deduct 3 points; for jarring color schemes, deduct 5 points; for chaotic text-image layouts, deduct 5 points. Full score is 10.", "maxScore": 10}, {"id": 9, "title": "Are dynamic interactions smooth and seamless?", "description": "Judge whether animations align with human perception: 1) Click feedback delay ≤100ms, 2) Transition animation duration between 300-500ms, 3) Clear visual focus guidance. For each instance of unresponsive operations, deduct 5 points; for visual ghosting during rapid scrolling, deduct 3 points; for hard-to-find key function buttons, deduct 5 points. Full score is 10.", "maxScore": 10}], "class": "Game Development-Casual", "difficulty": "medium"}
{"index": 273, "question": "You are a code expert, please use your professional knowledge to generate accurate and professional responses. Make sure the generated code is executable.\n\nThis is a Python face-swapping project I found on GitHub. Here's the file structure, and now I'd like you to help me create a frontend interface where I can upload the face image I want to swap and the target face image, then click a generate button to perform the face swap and display the successfully swapped face image in the frontend interface. Below is the Python code from the run.py file:\n\n```python\n#!/usr/bin/env python3\n\nfrom roop import core\nfrom inference_codeformer import inference_codeformer\n\nif __name__ == \"__main__\":\n    newface = r\"inputs/1.jpg\"  # New face image\n    oldface = r\"inputs/4.jpg\"  # Old face image\n    savepath = r\"outputs/output_009.png\"\n\n    core.run(newface, oldface, savepath)\n    inference_codeformer.run(savepath)", "checklist": [{"id": 0, "title": "Is the basic face-swapping functionality properly implemented in the frontend?", "description": "Check whether the frontend interface correctly implements the core functionality to upload two face images (source and target) and trigger the face-swapping process. The interface should include clear upload areas for both images with proper labeling and a generate button. Score 0 if uploads aren't implemented, 5 if only basic uploads work without proper validation, and 10 if the interface handles the complete workflow with clear visual guidance.", "maxScore": 10}, {"id": 1, "title": "Is the backend integration with the Python face-swapping code properly implemented?", "description": "Evaluate whether the frontend properly communicates with the Python backend (core.run and inference_codeformer.run functions). This includes handling API calls, processing responses, and managing errors. Check if the implementation uses appropriate techniques like AJAX, fetch API, or WebSockets. Deduct 5 points if there's no error handling, and 3 points if the backend communication is inefficient. The full score is 10 points.", "maxScore": 10}, {"id": 2, "title": "Is image preview functionality implemented before and after face-swapping?", "description": "Check if the interface provides image previews of both source images before processing and the resulting face-swapped image after processing. The previews should be properly sized, maintain aspect ratios, and be clearly labeled. Deduct 5 points if only the result is shown without previews of source images, and 3 points if previews exist but have rendering issues. Full score is 10 points.", "maxScore": 10}, {"id": 3, "title": "Is there appropriate feedback during the face-swapping process?", "description": "Evaluate whether the interface provides clear loading indicators, progress updates, or status messages during the face-swapping operation. Users should know when the process starts, its current status, and when it completes. Deduct 5 points if there's no loading indicator, and 3 points if the feedback is present but unclear or misleading. Full score is 10 points for comprehensive, user-friendly processing feedback.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as invalid image uploads, network interruption, backend errors, etc.) and provide friendly error prompts or recovery mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Face detection preview with markers 2. Image adjustment tools before processing 3. Gallery of previous swaps 4. Image comparison slider). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple image processing methods) 2. Function modules unrelated to face-swapping (e.g., unnecessary social media integration) 3. Fancy effects that affect performance (e.g., heavy animations that slow down the interface). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (such as separating UI/API/processing logic), code organization, and build process automation. Deduct 5 points if global state pollution is found or design patterns are not used; deduct 5 points if the code duplication rate is too high (over 30%); deduct 5 points if the build process is not automated. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the overall design follows modern design principles: 1) Harmonious color matching (no more than 3 primary colors) 2) Proper layout spacing (element spacing follows the 8px multiple principle) 3) Professional font system (body font size ≥ 14px, line height over 1.5 times). Deduct 3 points for each crowded visual element, 5 points for a glaring color combination, and 5 points for chaotic text-image layout. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction smooth and seamless?", "description": "Judge whether the dynamic effects conform to human perception characteristics: 1) Click feedback delay ≤ 100ms 2) Transition animation duration controlled between 300-500ms 3) Clear visual focus guidance. Deduct 5 points for each operation without feedback, 3 points for visual after-images during fast sliding, and 5 points for hard-to-find key function buttons. The full score is 10 points.", "maxScore": 10}], "class": "Web Applications-Web Visuals", "difficulty": "easy"}
{"index": 69, "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure the generated code is executable and demonstrable.\n\nPlease use HTML and JavaScript to implement an animation transition: enable character animation switching between different states, such as walking, running, jumping, and other different actions.\n[CHAT_SEP]Please optimize the above game response and add some comments in the code so that other developers can understand your implementation process.", "checklist": [{"id": 0, "title": "Is the character animation system properly implemented?", "description": "Check if the code implements the core animation system with state management for different character actions (walking, running, jumping). Evaluate the state machine architecture, handling transitions between animation states cleanly. Score 0 if no state transitions exist, 5 if only basic transitions are implemented, and 10 if all specified actions with seamless transitions are included.", "maxScore": 10}, {"id": 1, "title": "Is sprite sheet or animation framework implementation correct?", "description": "Review the implementation of sprite animation technique (whether using sprite sheets, CSS animations, or canvas-based animation). Check for proper frame sequencing, timing control, and animation loops. Deduct 5 points if animation frames are incorrectly sequenced, 3 points if timing control is inconsistent. Full score requires proper sprite resource management and optimization.", "maxScore": 10}, {"id": 2, "title": "Are the animation transitions smooth and natural?", "description": "Evaluate the transition logic between different animation states (e.g., walking to running, running to jumping). Check for interpolation techniques, easing functions, and blending between animations. Deduct 5 points for abrupt transitions, 3 points for inconsistent animation speeds. 10 points for natural, realistic transitions that follow physical movement principles.", "maxScore": 10}, {"id": 3, "title": "Is user input handling implemented correctly for animation control?", "description": "Examine if the code includes proper event listeners for keyboard/mouse/touch input to trigger different animation states. Check if there's debouncing for rapid input changes and proper handling of simultaneous inputs. Deduct 5 points if input lag exceeds 100ms, 3 points if certain input combinations cause animation glitches. Full score requires responsive and intuitive controls.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code handles edge cases like rapid state transitions, browser compatibility issues, and resource loading failures. Code with strong robustness should implement error boundaries and fallback animations. Deduct 5 points for each unhandled edge case. Give 10 points if all common exceptions are properly managed with graceful fallbacks.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Particle effects during transitions 2. Dynamic camera following 3. Interactive environment reactions to movement). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant animation loops or duplicate frame calculations 2. Unnecessary rendering cycles that affect performance 3. Overlapping event listeners causing multiple triggers. Deduct 3 points for each redundancy found, and directly deduct 10 points if core animation functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (separating animation logic, rendering, and input handling), code reusability, and performance optimization. Deduct 5 points if animation and business logic are tightly coupled; deduct 5 points if requestAnimationFrame is not properly implemented; deduct 5 points if there's no performance consideration for mobile devices. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the character and animation design follows good visual principles: 1) Consistent art style and proportions 2) Clear silhouette during different actions 3) Appropriate use of color to indicate different states. Deduct 3 points for inconsistent art style, 5 points for unclear visual feedback during state changes, and 5 points for poor contrast against backgrounds. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the animation performance optimized?", "description": "Judge whether the animations run smoothly at 60fps: 1) Proper use of GPU acceleration techniques 2) Efficient DOM manipulation or Canvas drawing 3) Asset preloading and memory management. Deduct 5 points for frame drops below 45fps on standard devices, 3 points for memory leaks during long animation sequences, and 5 points for not implementing any performance optimization techniques. The full score is 10 points.", "maxScore": 10}], "class": "Game Development-Action/Rhythm", "difficulty": "easy"}
{"index": 787, "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure the code you generate is executable whenever possible. Help me write a detailed daily schedule planner.", "checklist": [{"id": 0, "title": "Is the core scheduling functionality fully implemented?", "description": "Evaluate if the code properly implements calendar representation, event creation, modification, and deletion. Check for proper date handling, time slot management, and conflict detection. Score 0 if basic scheduling is missing, 5 if only simple event adding is implemented, and 10 if the planner includes comprehensive event management with validation.", "maxScore": 10}, {"id": 1, "title": "Does the planner include task categorization and priority management?", "description": "Verify if the code allows users to categorize tasks (work, personal, etc.), set priorities (high, medium, low), and filter/sort based on these attributes. Check for visual indicators of priority levels. Deduct 3 points if categorization is missing, 3 points if priority setting is absent, and 4 points if no filtering/sorting mechanisms exist. Full score is 10 points.", "maxScore": 10}, {"id": 2, "title": "Is there persistent data storage and retrieval functionality?", "description": "Check if the planner implements data persistence using localStorage, IndexedDB, or server-side storage. Assess if data is properly loaded on application start and saved on changes. Verify existence of backup/export functionality. Deduct 5 points if data isn't persisted between sessions, 3 points if there's no export option, and 2 points if data validation is missing before storage. Full score is 10 points.", "maxScore": 10}, {"id": 3, "title": "Are notifications and reminders implemented effectively?", "description": "Evaluate if the planner includes notifications for upcoming events, deadline reminders, and customizable alert timing. Check if the implementation uses browser notifications, sound alerts, or visual cues. Score 0 if reminders are completely missing, 5 if only basic visual reminders exist, and 10 if comprehensive notification options with timing preferences are available.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code handles common edge cases (invalid date inputs, concurrent edits, browser refresh, etc.) and provides friendly error messages or recovery mechanisms. Check for form validation, proper error handling, and data integrity protection. Give 10 points if all common edge cases are handled gracefully, 5 points if basic validation exists but some scenarios are unhandled, and 0 points if critical errors can easily occur.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check for standout features that enhance usability (e.g., 1. Natural language processing for quick event creation 2. AI-suggested optimal scheduling 3. Integration with external calendars 4. Weather information relevant to planning). Add 2.5 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check for three types of redundancy: 1. Duplicate scheduling mechanisms that perform similar functions differently 2. Overly complex features irrelevant to daily planning 3. Unnecessary animations or visual effects that hinder performance. Deduct 3 points for each redundancy found, and directly deduct 10 points if core planning functionality is obscured by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review code organization (separation of UI/logic/storage layers), implementation of design patterns, naming conventions, and comments. Check for modular structure and reusable components. Deduct 5 points for global variable abuse, 3 points for inconsistent naming or poor readability, and 2 points for inadequate comments. Full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate if the design follows modern UI principles: 1) Clean and consistent color scheme (max 3-4 colors) 2) Proper whitespace and layout hierarchy 3) Responsive design for different screen sizes 4) Readable typography (proper contrast, size ≥14px). Deduct 3 points for each cluttered view, 2 points for inconsistent styling, and 5 points for poor mobile adaptation. Full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction smooth and intuitive?", "description": "Judge whether interactions feel natural and efficient: 1) Quick response to user inputs (<100ms) 2) Logical tab order and keyboard navigation 3) Clear visual feedback for actions 4) Intuitive drag-and-drop for event management if implemented. Deduct 3 points for each laggy interaction, 2 points for confusing navigation patterns, and 5 points if key planning operations require excessive clicks. Full score is 10 points.", "maxScore": 10}], "class": "Utility Tools-Daily Office Tasks", "difficulty": "easy"}
{"index": 737, "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Make sure that the code you provide is executable for demonstration. The image dimensions seem incorrect. I have sent you layer-1.jpg, please optimize it and then write all the code in a single HTML file. Can you accomplish this?", "checklist": [{"id": 0, "title": "Is the image optimization process correctly implemented?", "description": "Review whether the code properly analyzes and optimizes the received image (layer-1.jpg). Check if it addresses dimensions, aspect ratio, file size, quality, and format. Score 0 if no optimization is performed, 5 if basic resizing is implemented, and 10 if comprehensive optimization (resizing, compression, format conversion if needed) is properly executed.", "maxScore": 10}, {"id": 1, "title": "Is the HTML structure properly organized for the image display?", "description": "Examine if the HTML document follows semantic markup principles with appropriate tags (<figure>, <picture>, etc.) for image presentation. Check if responsive design principles are applied (max-width, viewport settings). Deduct 5 points if basic HTML structure is missing, 3 points if non-semantic tags are used inappropriately. The full score is 10 points.", "maxScore": 10}, {"id": 2, "title": "Are proper image loading techniques implemented?", "description": "Evaluate whether the code implements modern image loading techniques like lazy loading, progressive loading, or uses the 'loading' attribute. Check if fallback options are provided for browsers that don't support certain features. Deduct 5 points if no optimization techniques are used, 3 points if implementation is basic without fallbacks. The full score is 10 points.", "maxScore": 10}, {"id": 3, "title": "Is the optimized image correctly integrated into a single HTML file?", "description": "Verify if the image is properly embedded within a single HTML file as requested, either through base64 encoding, data URI scheme, or another appropriate method. Score 0 if the image is not integrated into a single file, 5 if basic integration exists but with issues, and 10 if seamlessly integrated with proper encoding and performance considerations.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code can handle common abnormal situations (such as image loading failures, unsupported browser features, etc.) and provide friendly error handling or fallback mechanisms. Code with strong robustness should be able to effectively handle these edge cases, giving 10 points. If the robustness is average, give 5 points, and if no exceptions are handled, give 0 points.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Progressive image loading effect 2. Zoom/pan functionality 3. Dynamic image optimization based on viewport). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant implementation of similar functions (e.g., multiple image loading methods when one would suffice) 2. Function modules unrelated to image optimization (e.g., unnecessary animations) 3. Fancy effects that affect performance (e.g., heavy JavaScript that slows down image rendering). Deduct 3 points for each redundancy found, and directly deduct 10 points if the core functions are interfered with by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review code organization, error handling patterns, cross-browser compatibility considerations, and performance optimization techniques. Deduct 5 points if global namespace pollution is found; deduct 5 points if the code is not modular or contains excessive comments/unnecessary complexity; deduct 5 points if performance best practices are ignored. The full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the image display meet professional design standards?", "description": "Evaluate whether the image presentation follows modern design principles: 1) Proper containment within viewport 2) Appropriate padding/margins around the image 3) Professional styling considerations (borders, shadows, etc. if applied). Deduct 3 points for poor image containment, 5 points for inadequate spacing, and 5 points for unprofessional styling. The full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the user experience smooth and intuitive?", "description": "Judge whether the image display experience is optimal: 1) Fast loading with visual indication during loading 2) Proper image scaling on different viewports 3) Intuitive interaction if any interactive elements are added. Deduct 5 points for slow loading without indicators, 3 points for poor scaling on mobile devices, and 5 points for confusing or unintuitive interactive elements. The full score is 10 points.", "maxScore": 10}], "class": "Multimedia Editing-Image Editing", "difficulty": "easy"}
{"index": 1214, "question": "You are a code expert. Please use your professional knowledge to generate accurate and professional responses. Be sure to ensure that the code you generate is executable. I need a piece of code that can create a mind map. I have a PDF file called \"《Chinese Modern Literature: Thirty Years》Study Guide_11950065\". My requirement is to organize the key points, difficult areas, required reading lists, timeline events, authors and their works, as well as their literary significance mentioned in the file, and create a mind map from this information. Please generate a complete, runnable code for me.", "checklist": [{"id": 0, "title": "Is the mind map core structure implementation complete?", "description": "Review whether the code implements a tree data structure to support the hierarchical organization of mind map nodes and provides methods to add, delete, edit, and navigate these nodes. Check if the data model logically separates nodes, connections, and content. Score 0 if fundamental mind map structure is missing, 5 if a basic tree structure is implemented but lacks manipulation functions, and 10 if a robust hierarchical data structure with full CRUD operations is implemented.", "maxScore": 10}, {"id": 1, "title": "Does the code provide PDF parsing and content extraction functionality?", "description": "Examine whether the code includes reliable PDF parsing capabilities (e.g., using libraries like pdf.js, pdfminer, PyPDF2) that extract text content, identify headings/sections, and recognize structural elements from the '《Chinese Modern Literature: Thirty Years》Study Guide'. Deduct 5 points if only basic text extraction is implemented without structure recognition, deduct 3 points if the extraction fails to handle Chinese characters properly. The full score is 10 points.", "maxScore": 10}, {"id": 2, "title": "Is there intelligent content categorization for Chinese literature elements?", "description": "Assess whether the code contains algorithms or patterns to automatically identify and categorize key literary elements (key points, difficult areas, reading lists, timeline events, authors and works, literary significance) from the extracted text. Check for natural language processing techniques or rule-based systems to organize content. Score 0 if no categorization exists, 5 if basic keyword matching is used, and 10 if sophisticated content analysis with context awareness is implemented.", "maxScore": 10}, {"id": 3, "title": "Does the visualization component effectively render the mind map?", "description": "Evaluate the quality of the mind map rendering - check if it uses appropriate libraries (D3.js, GoJS, vis.js) or implements custom graphics rendering. The visualization should support zooming, panning, and proper hierarchical layout with Chinese text rendering. Deduct 5 points if the layout algorithm results in overlapping nodes, 3 points if zoom/pan controls are missing, and 5 points if Chinese characters display incorrectly. Full score is 10 points.", "maxScore": 10}, {"id": 4, "title": "Is the code robust?", "description": "Evaluate whether the code handles common error cases (invalid PDF format, parsing failures, empty sections, memory limitations with large files) and provides appropriate error messages or recovery mechanisms. Code with strong robustness should properly validate inputs, handle Unicode/Chinese characters correctly, and manage memory efficiently. Score 10 for comprehensive error handling, 5 for basic validation, and 0 if critical errors are unhandled.", "maxScore": 10}, {"id": 5, "title": "Are there any innovative features that are eye-catching?", "description": "Check whether the code includes surprise features that enhance the experience (e.g., 1. Auto-summarization of literary concepts 2. Integration with literature databases for additional context 3. Timeline visualization for historical literary events 4. Author relationship network visualization). Add 3 points for each practical innovative feature implemented (maximum 10 points).", "maxScore": 10}, {"id": 6, "title": "Are there any redundant features?", "description": "Strictly check three types of redundancy: 1. Redundant data processing pipelines (multiple text extraction methods without clear purpose) 2. Feature modules unrelated to literature mind mapping (e.g., built-in document editor) 3. Excessive visual effects that impact performance. Deduct 3 points for each redundancy found, and directly deduct 10 points if core mind mapping functionality is compromised by redundant code.", "maxScore": 10}, {"id": 7, "title": "Does the code have engineering quality?", "description": "Review modular design (separation of PDF parsing, data processing, mind map visualization), code reusability, documentation quality, and development workflow integration. Deduct 5 points if global variables are overused or module boundaries are unclear; deduct 5 points if code duplication exceeds 30%; deduct 5 points if documentation is insufficient for complex functions. Full score is 10 points.", "maxScore": 10}, {"id": 8, "title": "Does the interface vision meet professional design standards?", "description": "Evaluate whether the mind map design follows modern visualization principles: 1) Appropriate use of color to distinguish different categories of literature concepts 2) Clear hierarchical spacing between mind map levels 3) Legible typography for Chinese text (appropriate font choice, sufficient size). Deduct 3 points for visually cluttered node arrangements, 5 points for poor color contrast that affects readability, and 5 points for improper handling of long Chinese text. Full score is 10 points.", "maxScore": 10}, {"id": 9, "title": "Is the dynamic interaction smooth and seamless?", "description": "Judge whether the mind map interactions suit user expectations: 1) Responsive node expansion/collapse (≤100ms) 2) Smooth transitions when navigating between different levels (300-500ms) 3) Intuitive controls for reorganizing nodes. Deduct 5 points for laggy rendering with many nodes, 3 points for jarring transitions between mind map states, and 5 points for unintuitive node manipulation controls. Full score is 10 points.", "maxScore": 10}], "class": "Mermaid Flowcharts-Mind Maps", "difficulty": "medium"}
